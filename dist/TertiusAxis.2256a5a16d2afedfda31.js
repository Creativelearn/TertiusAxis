!function(e){function t(t){for(var r,o,s=t[0],c=t[1],l=t[2],u=0,m=[];u<s.length;u++)o=s[u],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&m.push(a[o][0]),a[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(d&&d(t);m.length;)m.shift()();return i.push.apply(i,l||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,s=1;s<n.length;s++){var c=n[s];0!==a[c]&&(r=!1)}r&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={0:0},i=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var l=0;l<s.length;l++)t(s[l]);var d=c;i.push([68,1]),n()}({25:function(e,t,n){},35:function(e,t,n){},48:function(e,t,n){},49:function(e,t,n){},52:function(e,t,n){},53:function(e,t,n){},54:function(e,t,n){},55:function(e,t,n){},59:function(e,t,n){},60:function(e,t,n){var r={"./0A0A0A_A9A9A9_525252_747474-64px.png":61,"./0C0CC3_04049F_040483_04045C-64px.png":62,"./0C430C_257D25_439A43_3C683C-64px.png":63,"./0D0DBD_040497_04047B_040455-64px.png":64,"./777C61_333727_BABFA1_A5AC8C-64px.png":65,"./777D7D_BDCAD2_3E3C2E_B1B8B6-64px.png":66};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=60},61:function(e,t,n){"use strict";n.r(t),t.default=n.p+"8446d916d3935bd4f04739231f43ce23.png"},62:function(e,t,n){"use strict";n.r(t),t.default=n.p+"43bb02131dd5a1da300334bbeaf678d7.png"},63:function(e,t,n){"use strict";n.r(t),t.default=n.p+"7a12f68d3b284d4c9309206247fd0634.png"},64:function(e,t,n){"use strict";n.r(t),t.default=n.p+"b37362d408528bbb5f78efe5612c4a59.png"},65:function(e,t,n){"use strict";n.r(t),t.default=n.p+"e6f659522f7f5e2a7b831675139d1d1a.png"},66:function(e,t,n){"use strict";n.r(t),t.default=n.p+"be3600834a6c37c4c2ef8d3f66c69243.png"},67:function(e,t,n){},68:function(e,t,n){"use strict";n.r(t);var r=n(5),a=n.n(r),i=n(9),o=n.n(i),s=(n(35),n(3)),c=n.n(s),l=n(6),d=n.n(l),u=n(0),m=n(27),h=n(18),p=n.n(h),f=n(28),v=n.n(f),g=n(29),y=n.n(g),b=n(16),E=function(){function e(){c()(this,e);var t=this;this.createGeometry=function(e,t){var n=new u[e];this.checkParams(t,n.parameters);var r=Object.values(t);return n=v()(u[e],y()(r))},this.checkParams=function(e,t){if(e instanceof Object)if(t instanceof Object){var n={};for(var r in Object.assign(n,t),n)e.hasOwnProperty(r)?void 0===e[r]&&""===e[r]&&console.warn('"'+r+'" not set'):console.warn('Parameter "'+r+'" is missing ')}else console.error("paramsTamplate must be an object. Now params are "+("undefined"==typeof params?"undefined":p()(params)));else console.error("paramsToCheck must be an object. Now params are "+("undefined"==typeof params?"undefined":p()(params)))},this.createBox=function(e,t,n,r,a,i,o){var s={width:r,height:a,depth:i,widthSegments:1,heightSegments:1,depthSegments:1},c=this.createGeometry("BoxBufferGeometry",s);c||console.error("Invalid geometry. Object not created");var l=new u.Mesh(c,o);return l.position.x=e,l.position.y=t,l.position.z=n,l},this.createSphere=function(e,t,n,r,a,i){var o={radius:r,widthSegments:a,heightSegments:a,phiStart:0,phiLength:2*Math.PI,thetaStart:0,thetaLength:Math.PI},s=this.createGeometry("SphereBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createCircle=function(e,t,n,r,a,i){var o={radius:r,segments:a,thetaStart:0,thetaLength:2*Math.PI},s=this.createGeometry("CircleBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createCone=function(e,t,n,r,a,i,o,s){var c={radius:r,height:a,radialSegments:i,heightSegments:o,openEnded:!1,thetaStart:0,thetaLength:2*Math.PI},l=this.createGeometry("ConeBufferGeometry",c);l||console.error("Invalid geometry. Object not created");var d=new u.Mesh(l,s);return d.position.x=e,d.position.y=t,d.position.z=n,d},this.createCylinder=function(e,t,n,r,a,i,o,s,c){var l={radiusTop:r,radiusBottom:a,height:i,radialSegments:o,heightSegments:s,openEnded:!1,thetaStart:0,thetaLength:2*Math.PI},d=this.createGeometry("CylinderBufferGeometry",l);d||console.error("Invalid geometry. Object not created");var m=new u.Mesh(d,c);return m.position.x=e,m.position.y=t,m.position.z=n,m},this.createDodecahedron=function(e,t,n,r,a,i){var o={radius:r,detail:a},s=this.createGeometry("DodecahedronBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createIcosahedron=function(e,t,n,r,a,i){var o={radius:r,detail:a},s=this.createGeometry("IcosahedronBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createOctahedron=function(e,t,n,r,a,i){var o={radius:r,detail:a},s=this.createGeometry("OctahedronBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createTorus=function(e,t,n,r,a,i,o,s){var c={radius:r,tube:a,radialSegments:i,tubularSegments:o,arc:2*Math.PI},l=this.createGeometry("TorusBufferGeometry",c);l||console.error("Invalid geometry. Object not created");var d=new u.Mesh(l,s);return d.position.x=e,d.position.y=t,d.position.z=n,d},this.createTetrahedron=function(e,t,n,r,a,i){var o={radius:r,detail:a},s=this.createGeometry("TetrahedronBufferGeometry",o);s||console.error("Invalid geometry. Object not created");var c=new u.Mesh(s,i);return c.position.x=e,c.position.y=t,c.position.z=n,c},this.createLine=function(e,t,n,r,a,i,o,s){var c;switch(s){case"dashed":c=new u.LineDashedMaterial({color:new u.Color(o),dashSize:.9,gapSize:.5});break;case"solid":c=new u.LineBasicMaterial({color:new u.Color(o)});default:c=new u.LineBasicMaterial({color:new u.Color(o)})}var l=new u.Geometry;l.vertices.push(new u.Vector3(e,t,n)),l.vertices.push(new u.Vector3(r,a,i));var d=new u.Line(l,c);return"dashed"===s&&d.computeLineDistances(),d},this.createLabel=function(e,t,n,r){var a=document.createElement("div");a.className="labelDiv",a.textContent=r,a.style.marginTop="-1em";var i=new b.a(a);return i.position.set(e,t,n),i},this.createPlane=function(e,t){var n=new u.PlaneBufferGeometry(t,e),r=new u.MeshBasicMaterial({color:new u.Color("lightgrey"),transparent:!1,opacity:1,side:u.DoubleSide});return new u.Mesh(n,r)},this.selectEntity=function(e,t){return t.object=e,t.object.add(this.createBoundingBox(t.object)),(new D).createParametersMenu(e),t},this.createWireframe=function(e){var t=new u.EdgesGeometry(e.geometry),n=new u.LineSegments(t);return n.material.depthTest=!0,n.material.color=new u.Color("white"),n.name="wireframe",n.scale.set(1.001,1.001,1.001),n},this.createBoundingBox=function(e){e.geometry.computeBoundingBox();var t=new u.Box3Helper(e.geometry.boundingBox,new u.Color("red"));return t.name="BoundingBox",0===t.box.min.z&&(t.box.min.z=-.001,t.box.max.z=.001),t},this.removeSelection=function(e){this.removeWireframeAndBoundingBox(e.object),e.object=null,e.objectOwnColor=null},this.removeWireframeAndBoundingBox=function(e){e.children.filter((function(e){return"wireframe"===e.name||"BoundingBox"===e.name})).forEach((function(t){e.remove(t)}))},this.updateSelectedObject=function(e,t,n){var r=n.geometry,a={};Object.assign(a,r.parameters),a[e]=t;var i=this.createGeometry(n.geometry.type,a);n.geometry.dispose(),n.geometry=i;var o=n.getObjectByName("BoundingBox");n.geometry.computeBoundingBox();var s=new u.Box3Helper(n.geometry.boundingBox);0===s.box.min.z&&(s.box.min.z=-.001,s.box.max.z=.001),o.box=s.box},this.updateObject=function(e,t,n){var r=n.geometry,a={};Object.assign(a,r.parameters),a[e]=t;var i=this.createGeometry(n.geometry.type,a);n.geometry.dispose(),n.geometry=i},this.randomColor=function(){return new u.Color(Math.random(),Math.random(),Math.random())},this.CreatingEntity=function(){var e,n=this;this.centerOfObjectWorld=null,this.centerOfObjectScreen=null,this.currentEntity=null,this.createEntity=function(r,a,i,o){n.centerOfObjectScreen=new u.Vector2(i.x,i.y);var s,c=this.centerOfObjectWorld.x,l=this.centerOfObjectWorld.y,d=this.centerOfObjectWorld.z;if(n.currentEntity){var m=n.currentEntity.position.clone().project(o.camera);n.centerOfObjectScreen.x=m.x*window.innerWidth/2+window.innerWidth/2,n.centerOfObjectScreen.y=-m.y*window.innerHeight/2+window.innerHeight/2;var h=o.getWorldSizeOfScreen(o.camera,n.currentEntity.position),p=1e9*window.innerHeight/(1e9*h.height);s=1*new u.Vector2(i.x,i.y).distanceTo(n.centerOfObjectScreen)/p}else s=.01;switch(e=new u.MeshPhongMaterial({color:t.randomColor()}),r.entity){case"BoxBufferGeometry":null!==this.currentEntity?(t.updateObject("width",s,this.currentEntity),t.updateObject("height",s,this.currentEntity),t.updateObject("depth",s,this.currentEntity)):(this.currentEntity=t.createBox(c,l,d,s,s,s,e),this.currentEntity.name="CUBE",a.add(this.currentEntity));break;case"SphereBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createSphere(c,l,d,s,12,e),this.currentEntity.name="SPHERE",a.add(this.currentEntity));break;case"CircleBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createCircle(c,l,d,s,12,e),this.currentEntity.name="Circle",a.add(this.currentEntity));break;case"ConeBufferGeometry":null!==this.currentEntity?(t.updateObject("radius",s,this.currentEntity),t.updateObject("height",2*s,this.currentEntity)):(this.currentEntity=t.createCone(c,l,d,s,2*s,8,1,e),this.currentEntity.name="Cone",a.add(this.currentEntity));break;case"CylinderBufferGeometry":null!==this.currentEntity?(t.updateObject("radiusTop",s,this.currentEntity),t.updateObject("radiusBottom",s,this.currentEntity),t.updateObject("height",2*s,this.currentEntity)):(this.currentEntity=t.createCylinder(c,l,d,s,s,2*s,8,1,e),this.currentEntity.name="Cylinder",a.add(this.currentEntity));break;case"DodecahedronBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createDodecahedron(c,l,d,s,0,e),this.currentEntity.name="Dodecahedron",a.add(this.currentEntity));break;case"IcosahedronBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createIcosahedron(c,l,d,s,0,e),this.currentEntity.name="Icosahedron",a.add(this.currentEntity));break;case"OctahedronBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createOctahedron(c,l,d,s,0,e),this.currentEntity.name="Octahedron",a.add(this.currentEntity));break;case"TorusBufferGeometry":null!==this.currentEntity?(t.updateObject("radius",s,this.currentEntity),t.updateObject("tube",s/5,this.currentEntity)):(this.currentEntity=t.createTorus(c,l,d,s,s/10,8,12,e),this.currentEntity.name="Torus",a.add(this.currentEntity));break;case"TetrahedronBufferGeometry":null!==this.currentEntity?t.updateObject("radius",s,this.currentEntity):(this.currentEntity=t.createTetrahedron(c,l,d,s,0,e),this.currentEntity.name="Tetrahedron",a.add(this.currentEntity))}},this.stopCreating=function(){this.currentEntity.userData={createdByUser:!0,selectable:!0},this.centerOfObjectWorld=null,this.centerOfObjectScreen=null,this.currentEntity=null}}}return d()(e,[{key:"cloneObject",value:function(e){if(e.currentSelection.object){var t=e.currentSelection.object.id;this.removeWireframeAndBoundingBox(e.currentSelection.object);var n=e.scene.getObjectById(t).clone(!1);e.selectableObjects.push(n),e.scene.add(n),this.selectEntity(e.currentSelection.object,e.currentSelection)}if(e.currentSelection.multiselection.children.length>0)for(var r=e.currentSelection.multiselection.children.length,a=e.currentSelection.multiselection.children,i=r-1;i>=0;i--){this.removeWireframeAndBoundingBox(a[i]);var o=a[i].id,s=e.scene.getObjectById(o);e.scene.attach(a[i]);var c=s.clone();e.scene.add(c),e.selectableObjects.push(c),e.currentSelection.multiselection.attach(s),s.add(this.createBoundingBox(s))}}}]),e}();function S(e){e.transformControlsMode="translate",e.currentSelection.object&&e.transformControls.attach(e.currentSelection.object),e.currentSelection.multiselection.children.length>0&&e.transformControls.attach(e.currentSelection.multiselection),e.transformControls.setMode(e.transformControlsMode),e.mode.action="select",e.orbitControls.enableRotate=!0}function w(e){e.transformControlsMode="rotate",e.currentSelection.object&&e.transformControls.attach(e.currentSelection.object),e.currentSelection.multiselection.children.length>0&&e.transformControls.attach(e.currentSelection.multiselection),e.transformControls.setMode(e.transformControlsMode),e.mode.action="select",e.orbitControls.enableRotate=!0}function C(e){e.currentSelection.object&&e.transformControls.attach(e.currentSelection.object),e.currentSelection.multiselection.children.length>0&&e.transformControls.attach(e.currentSelection.multiselection),e.transformControlsMode="scale",e.transformControls.setMode(e.transformControlsMode),e.mode.action="select",e.orbitControls.enableRotate=!0}function j(e,t){var n=new E,r=new D;e?(t.currentSelection.object&&(t.currentSelection.object,t.currentSelection.multiselection.children.length,n.removeWireframeAndBoundingBox(t.currentSelection.object)),t.mode.action="",t.dragControls.activate(),r.elements.finishButton.form.reset(),r.elements.finishButton.style.display="none",t.mode.action="select",t.mode.entity=null):(t.currentSelection.object&&n.selectEntity(t.currentSelection.object,t.currentSelection),t.dragControls.deactivate(),labelRenderer.style.cursor="auto")}var O=n.p+"e9fc577801284e14630b16e377d18e94.png",M=n.p+"32cf69671653c30609f4299a9ebdb5bd.png",x=function(){function e(){if(c()(this,e),e.exist)return e.instance;e.instance=this,e.exist=!0,this._events={}}return d()(e,[{key:"onEvent",value:function(e,t){this._events[e]||(this._events[e]=[]),this._events[e].push(t)}},{key:"removelistener",value:function(e,t){if(!this._events[e])throw new Error("Can't remove a listener. Event \"".concat(e," doesn't exist"));this._events[e]=this._events[e].filter((function(e){return e!=t}))}},{key:"emitEvent",value:function(e,t){this._events[e]&&this._events[e].forEach((function(e){return e(t)}))}}]),e}(),B=function(){function e(){if(c()(this,e),e.exist)return e.instance;e.instance=this,e.exist=!0,this.eventEmitter=new x,this.state={},this.appMode={mode:"",meshEdit:!1,action:"select",entity:null},this.transformMode={mode:"",transformControlsMode:""},this.meshEditMode={}}return d()(e,[{key:"changeAppState",value:function(e,t){this._updateState(e,t),this.eventEmitter.emitEvent(e,t)}},{key:"_updateState",value:function(e,t){this.state[e]=t,this.eventEmitter.emitEvent("appStateChanged",e+" "+t)}}]),e}();var L=n(30),k=n(31),P=function(e,t,n){var r=new u.Plane,a=new u.Raycaster,i=new u.Vector2,o=new u.Vector3,s=new u.Vector3,c=new u.Vector3,l=new u.Matrix4,d=[],m=null,h=null,p=this;function f(){n.addEventListener("mousemove",g,!1),n.addEventListener("mousedown",y,!1),n.addEventListener("mouseup",b,!1),n.addEventListener("mouseleave",b,!1),n.addEventListener("touchmove",E,!1),n.addEventListener("touchstart",S,!1),n.addEventListener("touchend",w,!1)}function v(){n.removeEventListener("mousemove",g,!1),n.removeEventListener("mousedown",y,!1),n.removeEventListener("mouseup",b,!1),n.removeEventListener("mouseleave",b,!1),n.removeEventListener("touchmove",E,!1),n.removeEventListener("touchstart",S,!1),n.removeEventListener("touchend",w,!1)}function g(u){u.preventDefault();var f=n.getBoundingClientRect();if(i.x=(u.clientX-f.left)/f.width*2-1,i.y=-(u.clientY-f.top)/f.height*2+1,a.setFromCamera(i,t),m&&p.enabled)return a.ray.intersectPlane(r,s)&&m.position.copy(s.sub(o).applyMatrix4(l)),void p.dispatchEvent({type:"drag",object:m});if(d.length=0,a.setFromCamera(i,t),a.intersectObjects(e,!0,d),d.length>0){n.style.cursor="pointer";var v=d[0].object;r.setFromNormalAndCoplanarPoint(t.getWorldDirection(r.normal),c.setFromMatrixPosition(v.matrixWorld)),h!==v&&(p.dispatchEvent({type:"hoveron",object:v}),h=v)}else null!==h&&(p.dispatchEvent({type:"hoveroff",object:h}),n.style.cursor="auto",h=null)}function y(u){u.preventDefault(),d.length=0,a.setFromCamera(i,t),a.intersectObjects(e,!0,d),d.length>0&&(m=!0===p.transformGroup?e[0]:d[0].object,a.ray.intersectPlane(r,s)&&(l.getInverse(m.parent.matrixWorld),o.copy(s).sub(c.setFromMatrixPosition(m.matrixWorld))),n.style.cursor="move",p.dispatchEvent({type:"dragstart",object:m}))}function b(e){e.preventDefault(),m&&(p.dispatchEvent({type:"dragend",object:m}),m=null),n.style.cursor=h?"pointer":"auto"}function E(e){e.preventDefault(),e=e.changedTouches[0];var c=n.getBoundingClientRect();if(i.x=(e.clientX-c.left)/c.width*2-1,i.y=-(e.clientY-c.top)/c.height*2+1,a.setFromCamera(i,t),m&&p.enabled)return a.ray.intersectPlane(r,s)&&m.position.copy(s.sub(o).applyMatrix4(l)),void p.dispatchEvent({type:"drag",object:m})}function S(u){u.preventDefault(),u=u.changedTouches[0];var h=n.getBoundingClientRect();i.x=(u.clientX-h.left)/h.width*2-1,i.y=-(u.clientY-h.top)/h.height*2+1,d.length=0,a.setFromCamera(i,t),a.intersectObjects(e,!0,d),d.length>0&&(m=!0===p.transformGroup?e[0]:d[0].object,r.setFromNormalAndCoplanarPoint(t.getWorldDirection(r.normal),c.setFromMatrixPosition(m.matrixWorld)),a.ray.intersectPlane(r,s)&&(l.getInverse(m.parent.matrixWorld),o.copy(s).sub(c.setFromMatrixPosition(m.matrixWorld))),n.style.cursor="move",p.dispatchEvent({type:"dragstart",object:m}))}function w(e){e.preventDefault(),m&&(p.dispatchEvent({type:"dragend",object:m}),m=null),n.style.cursor="auto"}f(),this.enabled=!0,this.transformGroup=!1,this.activate=f,this.deactivate=v,this.dispose=function(){v()},this.getObjects=function(){return e}};(P.prototype=Object.create(u.EventDispatcher.prototype)).constructor=P;var T=function(){function e(){c()(this,e),this.ambientLight=new u.AmbientLight(new u.Color("white"),.5),this.spotLight=new u.SpotLight(new u.Color("grey")),this.spotLight.position.set(-3,0,2),this.spotLight.castShadow=!0,this.spotLight.shadow.mapSize.width=1024,this.spotLight.shadow.mapSize.height=1024,this.spotLight.shadow.camera.near=500,this.spotLight.shadow.camera.far=4e3,this.spotLight.shadow.camera.fov=30}return d()(e,[{key:"initAmbientlight",value:function(e){e&&e.isScene?e.add(this.ambientLight):console.warn("Parameter of this function must be object of THREE.Scene()")}},{key:"initSpotLight",value:function(e){e&&e.isScene?e.add(this.spotLight):console.warn("Parameter of this function must be object of THREE.Scene()")}},{key:"initAll",value:function(e){e&&e.isScene?(e.add(this.spotLight),e.add(this.ambientLight)):console.warn("Parameter of this function must be object of THREE.Scene()")}},{key:"removeAll",value:function(e){e&&e.isScene?(e.remove(this.spotLight),e.remove(this.ambientLight)):console.warn("Parameter of this function must be object of THREE.Scene()")}}]),e}(),N=function(){this.coordsHelpers=function(){this.createCoordsHelpers=function(e,t){if(e.length>0){var n,r,a,i,o,s,c=e[0].point.x,l=e[0].point.y,d=e[0].point.z,u=new E,m=u.createLabel(c,l,d,"");switch(m.name="CoordsHelper",t.add(m),e[0].object.name){case"mainPlaneZY":m.element.innerHTML="z = "+Math.round(100*d)/100+"<br>y = "+Math.round(100*l)/100,(s=u.createLabel(0,0,d,"")).name="CoordsHelper",s.element.innerHTML="z = "+Math.round(100*d)/100,t.add(s),(o=u.createLabel(0,l,0,"")).name="CoordsHelper",o.element.innerHTML="y = "+Math.round(100*l)/100,t.add(o),(a=u.createLine(c,l,d,c,0,d,"red","dashed")).name="CoordsHelper",t.add(a),(r=u.createLine(c,l,d,c,l,0,"red","dashed")).name="CoordsHelper",t.add(r);break;case"mainPlaneXY":m.element.innerHTML=" x = "+Math.round(100*c)/100+"<br>y = "+Math.round(100*l)/100,(i=u.createLabel(c,0,0,"")).name="CoordsHelper",i.element.innerHTML="x = "+Math.round(100*c)/100,t.add(i),(o=u.createLabel(0,l,0,"")).name="CoordsHelper",o.element.innerHTML="y = "+Math.round(100*l)/100,t.add(o),(n=u.createLine(c,l,d,c,0,d,"red","dashed")).name="CoordsHelper",t.add(n),(r=u.createLine(c,l,d,0,l,d,"red","dashed")).name="CoordsHelper",t.add(r);break;case"mainPlaneXZ":m.element.innerHTML="x = "+Math.round(100*c)/100+"<br>z = "+Math.round(100*d)/100,(i=u.createLabel(c,0,0,"")).name="CoordsHelper",i.element.innerHTML="x = "+Math.round(100*c)/100,t.add(i),(s=u.createLabel(0,0,d,"")).name="CoordsHelper",s.element.innerHTML="z = "+Math.round(100*d)/100,t.add(s),(n=u.createLine(c,l,d,c,l,0,"red","dashed")).name="CoordsHelper",t.add(n),(a=u.createLine(c,l,d,0,l,d,"red","dashed")).name="CoordsHelper",t.add(a)}}},this.removeCoordsHelpers=function(e){e.children.filter((function(e){return"CoordsHelper"===e.name})).forEach((function(t){e.remove(t)}))}},this.SceneGrids=function(e){this.gridHelperSmall=new u.GridHelper(100,100,new u.Color("grey"),new u.Color("lightgrey")),this.gridHelperSmall.position.y=0,this.gridHelperSmall.position.x=0,this.gridHelperBig=new u.GridHelper(100,20,255,new u.Color("grey")),this.gridHelperBig.position.y=0,this.gridHelperBig.position.x=0,this.mainPlanesArray=[];var t=new u.PlaneBufferGeometry(200,200),n=new u.MeshBasicMaterial({color:new u.Color("lightgrey"),transparent:!0,opacity:0,alphaTest:.1,side:u.DoubleSide}),r=new u.Mesh(t,n);r.name="mainPlaneXY",e.add(r),this.mainPlanesArray.push(r);var a=new u.Mesh(t,n);a.rotation.y=90*Math.PI/180,a.name="mainPlaneZY",e.add(a),this.mainPlanesArray.push(a);var i=new u.Mesh(t,n);i.rotation.x=90*Math.PI/180,i.name="mainPlaneXZ",e.add(i),this.mainPlanesArray.push(i);var o=(new E).createLine(0,-100,0,0,100,0,"blue","solid");o.name="AxisY",e.add(o),this.initSmallGrid=function(e){e&&e.isScene?e.add(this.gridHelperSmall):console.warn("Parameter of this function must be object of THREE.Scene()")},this.initBigGrid=function(e){e&&e.isScene?e.add(this.gridHelperBig):console.warn("Parameter of this function must be object of THREE.Scene()")},this.initAll=function(e){e&&e.isScene?(e.add(this.gridHelperSmall),e.add(this.gridHelperBig)):console.warn("Parameter of this function must be object of THREE.Scene()")},this.removeAll=function(e){e&&e.isScene?(e.remove(this.gridHelperSmall),e.remove(this.gridHelperBig)):console.warn("Parameter of this function must be object of THREE.Scene()")}},this.addCameraHelper=function(e,t){var n=new u.CameraHelper(t);e.add(n)}},H=function(){function e(){c()(this,e),this.camera=new u.PerspectiveCamera(50,window.innerWidth/window.innerHeight,.01,1e4),this.camera.position.z=50,this.camera.position.y=50,this.camera.position.x=50,this.camera.lookAt(0,0,0)}return d()(e,[{key:"initCamera",value:function(){return this.camera}},{key:"getWorldSizeOfScreen",value:function(e,t){var n=new u.Vector3;e.getWorldDirection(n);var r=new u.Vector3;r=e.position.clone();var a=t.distanceTo(r);r.add(n.multiplyScalar(a));var i=new u.Line3(e.position,r),o=new u.Vector3;i.closestPointToPoint(t,!0,o),a=o.distanceTo(e.position);var s=e.fov/2,c=a*Math.tan(s*Math.PI/180)*2;return{height:c,width:c*e.aspect*2}}}]),e}();function _(e){if(!Array.isArray(e))return null;var t=e.length;return e.reduce((function(e,t){return e.add(t)})).divideScalar(t)}var I=function(){function e(t){if(c()(this,e),e.exist)return e.instance;e.instance=this,e.exist=!0,this.ta_UI=t,this.scene,this.mousePosition={x:null,y:null},this.mode={action:"select",entity:null},this.ta_State=new B,this.events=new x,this.meshEditObject={},this.selectableObjects=[],this.tempSelectableObjects=[],this.currentSelection={object:null,objectOwnColor:null,multiselection:new u.Group},this.transformControlsMode="",this.transformControlsChanged=!1,this.orbitControlsChanged=!1}return d()(e,[{key:"createScene",value:function(){var e=this,t=new u.Scene,n=new u.WebGLRenderer({antialias:!0}),r=new u.WebGLRenderer,a=new u.Raycaster,i=new H,o=new H,s=new b.b,c=new E,l=new c.CreatingEntity,d=new T,m=i.initCamera(),h=o.initCamera();(h=new u.PerspectiveCamera(50,document.getElementById("secondCanvas").clientWidth/document.getElementById("secondCanvas").clientHeight,.01,1e4)).position.z=0,h.position.y=4.6,h.position.x=0,h.lookAt(0,0,0);var p=new((new N).SceneGrids)(t);t.add(this.currentSelection.multiselection),t.background=new u.Color("white"),n.setSize(window.innerWidth,window.innerHeight),r.setSize(document.getElementById("secondCanvas").clientWidth,document.getElementById("secondCanvas").clientHeight),s.setSize(window.innerWidth,window.innerHeight),s.domElement.style.position="absolute",s.domElement.style.top=0,s.domElement.id="labelRenderer",d.initAll(t),p.initBigGrid(t),document.body.appendChild(n.domElement),document.getElementById("secondCanvas").appendChild(r.domElement),document.body.appendChild(s.domElement),this.orbitControls=new L.a(m,s.domElement),this.transformControls=new k.a(m,s.domElement),t.add(this.transformControls),this.transformControls.addEventListener("change",A),this.transformControls.addEventListener("change",(function(){})),this.orbitControls.addEventListener("start",(function(){})),this.orbitControls.addEventListener("change",(function(){e.orbitControlsChanged=!0})),this.transformControls.addEventListener("mouseDown",(function(){document.removeEventListener("click",M,!1),e.transformControlsChanged=!0,e.ta_State.appMode.meshEdit&&(e.meshEditObject.mesh.remove(e.meshEditObject.mesh.getObjectByName("FaceHighlight")),e.meshEditObject.faceHighlighting=!1)})),this.transformControls.addEventListener("mouseUp",(function(){document.addEventListener("click",M,!1),e.transformControlsChanged=!0,e.ta_State.appMode.meshEdit&&(e.meshEditObject.faceHighlighting=!0)})),this.transformControls.addEventListener("objectChange",(function(t){if(document.removeEventListener("click",M,!1),"translate"===t.target.mode){if(e.ta_State.appMode.meshEdit){var n=t.target;e.meshEditObject.transformMesh(n)}if("Group"===t.target.object.type)return;t.target.worldPositionStart.x,t.target.worldPosition.x,t.target.worldPositionStart.y,t.target.worldPosition.y,t.target.worldPositionStart.z,t.target.worldPosition.z}})),this.transformControls.addEventListener("dragging-changed",(function(t){e.orbitControls.enabled=!t.value})),this.dragControls=new P(this.selectableObjects,m,s.domElement),this.dragControls.deactivate(),this.dragControls.addEventListener("drag",(function(){e.orbitControls.enableRotate=!1,e.transformControls.enabled=!1})),this.dragControls.addEventListener("dragend",(function(){e.orbitControls.enableRotate=!0,e.transformControls.enabled=!0}));var f=document.getElementById("infoParagraph");function v(){var e=document.getElementById("secondCanvas").clientWidth,t=document.getElementById("secondCanvas").clientHeight;h.aspect=e/t,h.updateProjectionMatrix(),r.setSize(e,t)}window.addEventListener("resize",(function(){m.aspect=window.innerWidth/window.innerHeight,m.updateProjectionMatrix(),h.aspect=document.getElementById("secondCanvas").clientWidth/document.getElementById("secondCanvas").clientHeight,h.updateProjectionMatrix(),r.setSize(document.getElementById("secondCanvas").clientWidth,document.getElementById("secondCanvas").clientHeight),n.setSize(window.innerWidth,window.innerHeight),s.setSize(window.innerWidth,window.innerHeight)}),!1),document.addEventListener("click",M,!1),document.addEventListener("mousemove",(function(n){n.stopPropagation();var r=x(n);e.mousePosition.x=r.x,e.mousePosition.y=r.y,a.setFromCamera(r,m),B(a.intersectObjects(p.mainPlanesArray)),l.currentEntity&&(l.createEntity(e.mode,t,n,i),e.ta_UI.updateParametersMenu(l.currentEntity));if(e.ta_State.appMode.meshEdit&&"Faces"===e.meshEditObject.mode&&e.meshEditObject.faceHighlighting){var o=a.intersectObjects([e.meshEditObject.mesh]);e.meshEditObject.highlightFace(o)}}),!1),document.addEventListener("mouseup",(function(t){if("labelRenderer"!==t.target.id)return;if(e.ta_State.appMode.meshEdit)return;if(e.orbitControlsChanged)return void(e.orbitControlsChanged=!1);"select"===e.mode.action&&(e.transformControlsChanged||function(t){var n=x(t);a.setFromCamera(n,m);var r=a.intersectObjects(e.selectableObjects);if(r.length>0){var i=r[0].object;if(t.ctrlKey){e.currentSelection.object&&(c.removeWireframeAndBoundingBox(e.currentSelection.object),e.currentSelection.multiselection.attach(e.currentSelection.object),e.currentSelection.object=null);var o=[];(o=o.concat(e.currentSelection.multiselection.children)).includes(i)?(c.removeWireframeAndBoundingBox(i),o.splice(o.indexOf(i),1)):o.push(i),e.returnObjectsToScene();var s=[];o.forEach((function(e){s.push(e.position.clone())}));var l=_(s).clone();e.currentSelection.multiselection.position.set(l.x,l.y,l.z);for(var d=o.length-1;d>=0;d--)e.currentSelection.multiselection.attach(o[d]),o[d].add(c.createBoundingBox(o[d]));""!==e.transformControlsMode&&(e.transformControls.setMode(e.transformControlsMode),e.transformControls.attach(e.currentSelection.multiselection))}else e.returnObjectsToScene(),e.resetMultyselection(),e.currentSelection.object&&c.removeSelection(e.currentSelection),e.currentSelection=c.selectEntity(i,e.currentSelection),""!==e.transformControlsMode&&(e.transformControls.setMode(e.transformControlsMode),e.transformControls.attach(e.currentSelection.object))}else e.transformControlsChanged||(e.returnObjectsToScene(),e.resetMultyselection(),e.ta_State.meshEditMode&&!e.currentSelection.object||(e.transformControls.detach(e.currentSelection.object),c.removeSelection(e.currentSelection),e.ta_UI.elements.meshEditContainer.style.display="none"));e.currentSelection.object?(e.ta_UI.createParametersMenu(e.currentSelection.object),e.ta_UI.elements.meshEditContainer.style.display="inline"):e.ta_UI.deleteParametersMenu();e.transformControlsChanged&&(e.transformControlsChanged=!1)}(t))}),!1),document.addEventListener("keydown",(function(n){switch(n.keyCode){case 27:l.currentEntity&&(e.selectableObjects.push(l.currentEntity),l.stopCreating(e.selectableObjects)),document.getElementById("addToSceneButtons").reset(),document.getElementById("Finish").style.display="none",e.mode={action:"select",entity:null};break;case 46:if(e.currentSelection.object&&(e.transformControlsMode="",e.transformControls.detach(e.currentSelection.object),t.remove(e.currentSelection.object),e.currentSelection.object=null),e.currentSelection.multiselection.children.length>0){e.transformControls.detach(e.currentSelection.multiselection);for(var r=e.currentSelection.multiselection.children.length-1;r>=0;r--)e.currentSelection.multiselection.remove(e.currentSelection.multiselection.children[r]);e.resetMultyselection()}break;case 67:c.cloneObject(e);break;case 77:S(e),document.getElementById("Move").checked=!0;break;case 82:w(e),document.getElementById("Rotate").checked=!0;break;case 83:C(e),document.getElementById("Scale").checked=!0;break;case 68:var a=document.getElementById("dragCheck");a.checked=!a.checked,l.currentEntity&&(e.selectableObjects.push(l.currentEntity),l.stopCreating(e.selectableObjects)),j(a.checked,e)}}),!1),document.addEventListener("touchstart",(function(){}),!1),document.addEventListener("touchend",(function(){}),!1),document.addEventListener("touchmove",(function(){B(a.intersectObjects(p.mainPlanesArray))}),!1);var g=new u.MeshPhongMaterial({color:new u.Color("green"),transparent:!0,opacity:1}),y=new u.BoxBufferGeometry(10,10,10),O=new u.Mesh(y,g);function M(n){if(e.orbitControlsChanged)e.orbitControlsChanged=!1;else if(n.target.parentElement&&"secondCanvas"===n.target.parentElement.id)!function(){var e=document.getElementById("secondCanvas");if("200px"===e.style.width){var t=window.innerWidth+"px",n=window.innerHeight+"px";e.style.width=t,e.style.height=n,e.style.left="0px",e.style.top="0px",e.style.width=t,e.style.height=n,v()}else{var r="200px";e.style.left="",e.style.right="30px",e.style.top="30px",e.style.width=r,e.style.height=r,e.style.width=r,e.style.height=r,v()}}();else{if("labelRenderer"===n.target.id){var r=x(n);a.setFromCamera(r,m);var o=a.intersectObjects(p.mainPlanesArray);if("creationEntity"===e.mode.action){if(e.returnObjectsToScene(),e.resetMultyselection(),l.centerOfObjectWorld)return c.selectEntity(l.currentEntity,e.currentSelection),e.ta_UI.elements.meshEditContainer.style.display="block",l.currentEntity&&e.selectableObjects.push(l.currentEntity),l.stopCreating(),void(""!==e.transformControlsMode&&(e.transformControls.setMode(e.transformControlsMode),e.transformControls.attach(e.currentSelection.object)));e.currentSelection.object&&(c.removeSelection(e.currentSelection),e.currentSelection.object=null,e.currentSelection.objectOwnColor=null),l.centerOfObjectWorld=o[0].point,l.createEntity(e.mode,t,n,i),e.ta_UI.createParametersMenu(l.currentEntity)}if(e.ta_State.appMode.meshEdit){var s=x(n);if(a.setFromCamera(s,m),"Faces"===e.meshEditObject.mode){e.meshEditObject.mesh.remove(e.meshEditObject.mesh.getObjectByName("FaceHighlight"));var d=a.intersectObject(e.meshEditObject.mesh);if(d.length>0){d[0].object.remove(d[0].object.getObjectByName("FaceHighlight")),e.meshEditObject.addTriangle(d);var u=e.meshEditObject.mesh.getObjectByName("SphereFace_");e.transformControlsMode="translate",e.transformControls.attach(u)}}if("Vertices"===e.meshEditObject.mode){var h=a.intersectObjects(e.selectableObjects);if(h.length>0){var f=h[0].object;e.transformControlsMode="translate",e.transformControls.attach(f)}}}}e.transformControlsChanged=!1}}function x(e){return(new u.Vector2).set(e.clientX/window.innerWidth*2-1,-e.clientY/window.innerHeight*2+1)}function B(e){if(e.length>0){var t=e[0].object.name,n=e[0].point.x,r=e[0].point.y,a=e[0].point.z;f.innerHTML=t+":<br> x="+Math.round(100*n)/100+"; y="+Math.round(100*r)/100+"; z="+Math.round(100*a)/100}else f.innerHTML=""}t.add(O),O.position.set(0,0,7),O.name="TestCube",this.selectableObjects.push(O),this.returnObjectsToScene=function(){if(e.currentSelection.multiselection.children.length>0){for(var n=e.currentSelection.multiselection.children.length-1;n>=0;n--)c.removeWireframeAndBoundingBox(e.currentSelection.multiselection.children[n]),t.attach(e.currentSelection.multiselection.children[n]);e.transformControls.detach(e.currentSelection.multiselection)}},this.resetMultyselection=function(){e.currentSelection.multiselection.children=[],e.currentSelection.multiselection.position.set(0,0,0),e.currentSelection.multiselection.scale.set(1,1,1),e.currentSelection.multiselection.rotation.set(0,0,0)},this.events.onEvent("matcapChanged",(function(t){if(!e.currentSelection.object)return;e.currentSelection.object.material.dispose(),e.currentSelection.object.material=new u.MeshMatcapMaterial;var n=(new u.TextureLoader).load("_Resources/Matcabs/Test/"+t,(function(){}));e.currentSelection.object.material.matcap=n}));var I=function e(){requestAnimationFrame(e),t.updateMatrixWorld(),A()};function A(){n.render(t,m),r.render(t,h),s.render(t,m)}this.camera=m,this.scene=t,this.animate=I,I()}},{key:"clearScene",value:function(){var e,t=this,n=new E;this.currentSelection.object&&(this.transformControls.detach(this.currentSelection.object),n.removeSelection(this.currentSelection)),this.returnObjectsToScene(),this.resetMultyselection();var r=this.scene.children,a=[];r.forEach((function(e){e.userData.createdByUser&&(a.push(e),t.selectableObjects.splice(t.selectableObjects.indexOf(e)))})),(e=this.scene).remove.apply(e,a)}},{key:"getScene",get:function(){return this.scene}}]),e}(),A=function(){function e(t){c()(this,e),this.mesh=t,this.vertices,this.points,this.mode="Vertices",this.ta_UI=new D,this.ta_Entities=new E,this.ta_Scene=new I,this.faceHighlighting=!0,this.materialHighlight=new u.MeshBasicMaterial({color:new u.Color("yellow"),transparent:!0,opacity:.9}),this.triangleForHighlighting=F([new u.Vector3(0,0,0),new u.Vector3(0,0,0),new u.Vector3(0,0,0)],this.materialHighlight)}return d()(e,[{key:"highlightFace",value:function(e){var t=this;if(e.length>0){var n=e[0].object,r=e[0].face,a=G(n),i=[a[r.a],a[r.b],a[r.c]],o=[];i.map((function(e){o.push(e.x),o.push(e.y),o.push(e.z)})),o.map((function(e,n){return t.triangleForHighlighting.geometry.attributes.position.array[n]=e})),this.triangleForHighlighting.geometry.attributes.position.needsUpdate=!0,this.triangleForHighlighting.name="FaceHighlight",n.add(this.triangleForHighlighting)}}},{key:"createMeshHelpers",value:function(){var e,t;this.points=G(this.mesh),this.vertices=(e=this.points,t=[],e.forEach((function(e){var n=!1;t.forEach((function(t){e.equals(t)&&(n=!0)})),n||t.push(e)})),t),"Vertices"===this.mode&&this.addSpheresToVertices(this.mesh,this.vertices),this.mode}},{key:"removeMeshHelpers",value:function(){this.ta_Entities.removeWireframeAndBoundingBox(this.mesh),this.mesh.remove(this.mesh.getObjectByName("shperesForMeshEdit")),this.mesh.remove(this.mesh.getObjectByName("FaceHelperGroup"))}},{key:"transformMesh",value:function(e){if("Vertices"===this.mode&&this.moveVertex(e.object.userData.vertexNumber,e.object.position),"Faces"===this.mode){var t=e.object.name,n=e.object.parent.getObjectByName(e.object.name.replace("Sphere","")),r=e.object,a=r.position.clone();a.subVectors(r.position,n.userData.baryCenter),n.position.set(a.x,a.y,a.z);for(var i=n.geometry.attributes.position.array,o=[],s=0;s<i.length;s+=3)o.push(new u.Vector3(i[s],i[s+1],i[s+2]));for(var c=n.userData.verticesNumbers,l=0;l<c.length;l++){var d=c[l],m=o[l].clone().add(n.position.clone()).clone();this.moveVertex(d,m);var h=this.ta_Scene.scene.getObjectByName(t);this.ta_Scene.transformControls.attach(h)}this.createMeshHelpers()}}},{key:"moveVertex",value:function(e,t){var n=this.mesh;n.geometry.parameters=null;var r,a,i,o=(r=this.points,a=this.vertices,i=[],a.map((function(e){var t=[];r.forEach((function(n,r){n.equals(e)&&t.push(r)})),i.push(t)})),i);this.ta_Entities.removeWireframeAndBoundingBox(n),this.vertices[+e]=t,function(e,t){var n=[];t.map((function(e){n.push(e.x),n.push(e.y),n.push(e.z)})),e.geometry.attributes.position.array.map((function(t,r){e.geometry.attributes.position.array[r]=n[r]}))}(n,function(e,t,n){return e.map((function(e,r){n[r].map((function(n){return t[n]=e}))})),t[0]=e[0],t}(this.vertices,this.points,o)),n.geometry.attributes.position.needsUpdate=!0,n.geometry.computeBoundingSphere(),n.geometry.computeBoundingBox(),n.add(this.ta_Entities.createWireframe(n))}},{key:"addSpheresToVertices",value:function(e,t){var n=this,r=new u.SphereBufferGeometry(.3,3,2),a=new u.MeshBasicMaterial({color:new u.Color("red")}),i=new u.Group;i.name="shperesForMeshEdit",t.map((function(e,t){var o=new u.Mesh(r,a);o.name="createMeshHelpers",o.userData.vertexNumber="".concat(t),i.add(o),o.position.set(e.x,e.y,e.z),n.ta_Scene.selectableObjects.push(o)})),e.add(i)}},{key:"addTriangle",value:function(e){var t=this,n=new u.Group;n.name="FaceHelperGroup";var r=new u.SphereBufferGeometry(.2,3,2),a=new u.MeshBasicMaterial({color:new u.Color("lightgrey"),transparent:!0,opacity:.9});if(e.length>0){var i=e[0].object,o=e[0].face;i.remove(i.getObjectByName("FaceHelperGroup"));var s=G(i),c=[s[o.a],s[o.b],s[o.c]],l=F(c,a);l.name="Face_",l.userData.type="createMeshHelpers",l.userData.verticesNumbers=[],c.map((function(e){t.vertices.forEach((function(t,n){e.equals(t)&&l.userData.verticesNumbers.push(n)}))}));var d=_(c.map((function(e){return e.clone()})));l.userData.baryCenter=d;var m=new u.Mesh(r,a);m.position.set(d.x,d.y,d.z),m.name="SphereFace_",m.userData.type="createMeshHelpers",n.add(m),n.add(l),i.add(n)}}},{key:"addTriangles",value:function(e,t){var n=this,r=new u.SphereBufferGeometry(.2,3,2),a=new u.MeshBasicMaterial({color:new u.Color("lightgrey")}),i=0,o=new u.Group;o.name="FacesForMeshEdit";for(var s=e.geometry.index.array,c=function(c){var l=[t[s[c]],t[s[c+1]],t[s[c+2]]],d=F(l,a);d.name="Face_"+i,d.userData.type="createMeshHelpers",d.userData.indexes=[s[c],s[c+1],s[c+2]],d.userData.verticesNumbers=[],l.map((function(e){n.vertices.forEach((function(t,n){e.equals(t)&&d.userData.verticesNumbers.push(n)}))})),d.add(n.ta_Entities.createWireframe(d));var m=_(l.map((function(e){return e.clone()})));d.userData.baryCenter=m;var h=new u.Mesh(r,a);h.position.set(m.x,m.y,m.z),h.name="SphereFace_"+i,h.userData.type="createMeshHelpers",o.add(h),o.add(d),e.add(o),n.ta_Scene.selectableObjects.push(d),i++},l=0;l<s.length;l+=3)c(l)}}]),e}();function G(e){for(var t=e.geometry.attributes.position.array,n=e.geometry.attributes.position.itemSize,r=[],a=0;a<t.length;a+=n)r.push(new u.Vector3(t[a],t[a+1],t[a+2]));return r}function F(e,t){if(3==e.length){e.forEach((function(e){e.isVector3||console.error("Vertices must be an array of 3 Vectors")}));var n=[];e.map((function(e){n.push(e.x),n.push(e.y),n.push(e.z)}));var r=new u.BufferGeometry;return r.setAttribute("position",new u.BufferAttribute(new Float32Array(n),3)),r.setIndex([0,1,2]),new u.Mesh(r,t)}console.error("Vertices must be an array of 3 Vectors")}var D=function(){function e(){if(c()(this,e),e.exist)return e.instance;e.instance=this,e.exist=!0,this.elements={}}return d()(e,[{key:"init",value:function(e){return function(e){if(null===document.getElementById("mainMenu")){var t=new D,n=document.createElement("div");n.className="mainMenu",n.id="mainMenu",document.body.appendChild(n),t.addElement(n,"p","TertiusAxis","").className="Title";var r=t.addElement(n,"button","File","");r.addEventListener("mouseover",(function(){var e=n.offsetHeight,t=h(r);o.style.left=t[0]+"px",o.style.top=e-1+"px",o.style.visibility="visible"})),r.addEventListener("mouseout",(function(e){e.relatedTarget&&"fileMenu"===e.relatedTarget.offsetParent.id||(o.style.visibility="hidden")}));var a=t.addElement(n,"button","Edit","");a.addEventListener("mouseover",(function(){var e=n.offsetHeight,t=h(a);s.style.left=t[0]+"px",s.style.top=e+"px",s.style.visibility="visible"})),a.addEventListener("mouseout",(function(e){e.relatedTarget&&"editMenu"===e.relatedTarget.offsetParent.id||(s.style.visibility="hidden")})),t.addElement(n,"button","Settings","").addEventListener("mouseover",(function(){}));var i=t.addElement(n,"button","Help","");i.addEventListener("mouseover",(function(){var e=n.offsetHeight,t=h(i);c.style.left=t[0]+"px",c.style.top=e+"px",c.style.visibility="visible"})),i.addEventListener("mouseout",(function(e){e.relatedTarget&&"helpMenu"===e.relatedTarget.offsetParent.id||(c.style.visibility="hidden")}));var o=t.createContainer("fileMenu",n);o.className="subMainMenu",o.addEventListener("mouseout",(function(e){e.relatedTarget&&"fileMenu"===e.relatedTarget.offsetParent.id||(this.style.visibility="hidden")})),t.addElement(o,"label","Clear Scene","",(function(){confirm("All objects will be deleted. Are you shure?")&&e.clearScene()})),t.addElement(o,"label","Save to disk","",(function(){var t=new E;e.currentSelection.object&&t.removeSelection(e.currentSelection);var n=e.scene.children,r=[];n.forEach((function(t){t.userData.createdByUser&&(r.push(t.toJSON()),t.userData.selectable&&e.selectableObjects.push(t))})),d(new Blob([JSON.stringify(r,null,2)],{type:"text/plain"}),"Scene","trxs")})),t.addElement(o,"label","Export glTF","",(function(){(new m.a).parse(e.scene,(function(e){var t=JSON.stringify(e,null,2);d(new Blob([t],{type:"text/plain"}),"Scene","gltf")}))})),t.createFileSelectionButton(o,"Load scene from disk",(function(t){e.clearScene(),l(t)})),t.createFileSelectionButton(o,"Merge with scene from disk",(function(e){l(e)}));var s=t.createContainer("editMenu",n);s.className="subMainMenu",t.addElement(s,"label","Clone object","",(function(){(new E).cloneObject(e)})),s.addEventListener("mouseout",(function(e){e.relatedTarget&&"editMenu"===e.relatedTarget.offsetParent.id||(this.style.visibility="hidden")}));var c=t.createContainer("helpMenu",n);return c.className="subMainMenu",c.addEventListener("mouseout",(function(e){e.relatedTarget&&"fileMenu"===e.relatedTarget.offsetParent.id||(this.style.visibility="hidden")})),t.addElement(c,"label","About","",(function(){window.open("https://dragon3dgraff.ru/")})),console.log("MainMenu created"),n}function l(t){var n=t.srcElement.files[0];if(n.name.endsWith(".trxs")){var r=new FileReader;r.readAsText(n),r.onload=function(){var t=new u.ObjectLoader;JSON.parse(r.result).forEach((function(n){var r=t.parse(n);e.scene.add(r),r.userData.selectable&&e.selectableObjects.push(r)}))},r.onerror=function(){alert(r.error)}}else alert("File is not a TertiusAxis Scene")}function d(e,t,n){var r=t+"."+n,a=document.createElement("a");a.download=r,window.navigator&&window.navigator.msSaveOrOpenBlob?window.navigator.msSaveOrOpenBlob(e,r):(a.href=URL.createObjectURL(e),a.click(),URL.revokeObjectURL(a.href))}function h(e){var t=0,n=0;do{t+=e.offsetLeft,n+=e.offsetTop}while(e=e.offsetParent);return[t,n]}console.warn("MainMenu may be called only once")}(e),function(){if(null===document.getElementById("mainToolbar")){var e=new D,t=document.createElement("div");t.className="mainToolbar",t.id="mainToolbar",document.body.appendChild(t);var n=document.createElement("div");n.className="hideButton",n.id="hideButton",n.innerHTML="&#9668",t.style.left="0px",n.addEventListener("click",(function(e){"0px"===t.style.left?requestAnimationFrame((function e(){var r=t.style.left.replace("px","");r-=10,t.style.left=r+"px",t.style.left.replace("px","")>-250&&(n.innerHTML="&#9658",requestAnimationFrame(e))})):(t.style.left="0px",n.innerHTML="&#9668")})),t.appendChild(n);var r=e.createContainer("info",t);e.addElement(r,"p","","").id="infoParagraph",e.createContainer("mainContainer",t),console.log("MainToolbar created")}else console.warn("MainToolbar may be called only once")}(),!0}},{key:"fillMainToolbar",value:function(e){return function(e){if(null===document.getElementById("ManipulateToolbar")){var t=new D,n=t.createContainer("ManipulateToolbar",mainContainer);t.elements.selectButton=t.createSwitchButton({parent:n,text:"Select",id:"Select",name:"manupulateRadio",value:"Select",tooltip:"Select",imgLink:""},r),t.elements.moveButton=t.createSwitchButton({parent:n,text:"Move",id:"Move",name:"manupulateRadio",value:"Move",tooltip:"Move(m)",imgLink:""},r),t.elements.rotateButton=t.createSwitchButton({parent:n,text:"Rotate",id:"Rotate",name:"manupulateRadio",value:"Rotate",tooltip:"Rotate(r)",imgLink:""},r),t.elements.scaleButton=t.createSwitchButton({parent:n,text:"Scale",id:"Scale",name:"manupulateRadio",value:"Scale",tooltip:"Scale(s)",imgLink:""},r),t.elements.dragButton=t.createStayPressedButton({parent:n,text:"Drag",id:"dragCheck",name:"dragCheck",value:"dragCheck",tooltip:"(d)",imgLink:""},(function(){j(this.checked,e)})),console.log("ManipulateToolbar created")}else console.warn("ManipulateToolbar may be called only once");function r(t){switch(t.target.id){case"Select":!function(e){e.mode.action="select",e.transformControlsMode="",e.transformControls.detach(e.currentSelection.object),e.orbitControls.enableRotate=!0}(e);break;case"Move":S(e);break;case"Rotate":w(e);break;case"Scale":C(e)}}}(e),function(e){if(null===document.getElementById("AddToSceneToolbar")){var t=new D,n=new B,r=t.createContainer("sectionDiv",mainContainer);r.id="AddToSceneToolbar";var a=t.addElement(r,"p","Add to scene &#9650","");a.className="sectionName",a.addEventListener("click",(function(){var e=document.getElementById("addToSceneButtons");"grid"===e.style.display?(e.style.display="none",this.innerHTML="Add to scene &#9660"):(e.style.display="grid",this.innerHTML="Add to scene &#9650")}),!1);var i=t.addElement(r,"form","","");return i.className="buttonsDiv",i.id="addToSceneButtons",i.style.display="grid",[{text:"",type:"BoxBufferGeometry",imgLink:O,active:!0},{text:"",type:"SphereBufferGeometry",imgLink:M,active:!0},{text:"Circle",type:"CircleBufferGeometry",imgLink:"",active:!0},{text:"Cone",type:"ConeBufferGeometry",imgLink:"",active:!0},{text:"Cylinder",type:"CylinderBufferGeometry",imgLink:"",active:!0},{text:"Torus",type:"TorusBufferGeometry",imgLink:"",active:!0},{text:"4-hedron",type:"TetrahedronBufferGeometry",imgLink:"",active:!0},{text:"8-hedron",type:"OctahedronBufferGeometry",imgLink:"",active:!0},{text:"12-hedron",type:"DodecahedronBufferGeometry",imgLink:"",active:!0},{text:"20-hedron",type:"IcosahedronBufferGeometry",imgLink:"",active:!0},{text:"Plane",type:"PlaneBufferGeometry",imgLink:"",active:!1},{text:"Ring",type:"RingBufferGeometry",imgLink:"",active:!1},{text:"Shape",type:"ShapeBufferGeometry",imgLink:""},{text:"Text",type:"TextBufferGeometry",imgLink:"",active:!1},{text:"TorusKnot",type:"TorusKnotBufferGeometry",imgLink:"",active:!1},{text:"Tube",type:"TubeBufferGeometry",imgLink:"",active:!1}].forEach((function(r){r.active&&(t.elements[r.type]=t.createSwitchButton({parent:i,text:r.text,id:r.type,name:"addToScene",value:r.type,tooltip:r.type,imgLink:r.imgLink},(function(r){var a=r.target;n.appMode.meshEdit?a.form.reset():a.id===e.mode.entity?(a.form.reset(),t.elements.finishButton.style.display="none",e.mode.action="select",e.mode.entity=null):(e.mode.action="creationEntity",e.mode.entity=a.id,t.elements.finishButton.style.display="block")})))})),t.elements.finishButton=t.addElement(i,"button","Finish","",(function(){this.style.display="none",e.mode.action="select",e.mode.entity=null})),t.elements.finishButton.id="Finish",t.elements.finishButton.className="finishButton",t.elements.finishButton.type="reset",t.elements.finishButton.style.display="none",console.log("AddToSceneToolbar created"),r}console.warn("AddToSceneToolbar may be called only once")}(e),function(){if(null===document.getElementById("paramContainer")){var e=new D,t=e.createContainer("paramContainer",mainContainer);t.className="paramContainer";var n=e.addElement(t,"p","Object parameters &#9650","");n.className="sectionName",n.addEventListener("click",(function(){var e=document.getElementById("paramsDiv");"block"===e.style.display?(e.style.display="none",this.innerHTML="Object parameters &#9660"):(e.style.display="block",this.innerHTML="Object parameters &#9650")}),!1);var r=e.addElement(t,"div","","");r.id="paramsDiv",r.style.display="block";var a=e.addElement(r,"div","","");a.className="tabsButtons",a.id="tabsButtons",a.style.display="none";var i=e.addElement(a,"button","Geometry","",(function(){document.getElementById("GeometryParameters").style.display="block",i.style.backgroundColor="darkslategrey",document.getElementById("MaterialParameters").style.display="none",o.style.backgroundColor="rgb(51, 51, 51)",document.getElementById("GeneralParameters").style.display="none",s.style.backgroundColor="rgb(51, 51, 51)"})),o=e.addElement(a,"button","Material","",(function(){document.getElementById("GeometryParameters").style.display="none",i.style.backgroundColor="rgb(51, 51, 51)",document.getElementById("MaterialParameters").style.display="block",o.style.backgroundColor="darkslategrey",document.getElementById("GeneralParameters").style.display="none",s.style.backgroundColor="rgb(51, 51, 51)"})),s=e.addElement(a,"button","General","",(function(){document.getElementById("GeometryParameters").style.display="none",i.style.backgroundColor="rgb(51, 51, 51)",document.getElementById("MaterialParameters").style.display="none",o.style.backgroundColor="rgb(51, 51, 51)",document.getElementById("GeneralParameters").style.display="block",s.style.backgroundColor="darkslategrey"})),c=e.addElement(r,"div","","");c.className="tabs",c.id="tabs",e.elements.geometryParameters=e.addElement(c,"div","",""),e.elements.geometryParameters.className="GeometryParameters",e.elements.geometryParameters.id="GeometryParameters";var l=e.addElement(c,"div","","");l.className="MaterialParameters",l.id="MaterialParameters";var d=e.addElement(c,"div","","");d.className="GeneralParameters",d.id="GeneralParameters",console.log("ParametersToolbar created")}else console.warn("paramContainer may be called only once")}(),function(){var e=new D,t=new I,n=new B;e.elements.meshEditContainer=e.createContainer("meshEditContainer",mainContainer),e.elements.meshEditForm=e.addElement(meshEditContainer,"form","",""),e.elements.meshEditForm.id="meshEditForm",e.elements.meshEditForm.className="meshEditForm",e.elements.meshEditButton=e.createStayPressedButton({parent:meshEditForm,text:"Edit mesh",id:"meshEdit",name:"meshEdit",value:"meshEdit",tooltip:"Edit mesh"},(function(){if(this.checked){var r=new E;e.elements.finishButton.form.reset(),e.elements.finishButton.style.display="none",e.elements.meshEditElementsForm.style.display="flex",n.appMode.meshEdit=!0;var a=document.querySelector('input[name="meshEditElements"]:checked');t.meshEditObject=new A(t.currentSelection.object),t.meshEditObject.mode=a.id,n.changeAppState("meshEditEvent",a.id),t.tempSelectableObjects=t.tempSelectableObjects.concat(t.selectableObjects),t.selectableObjects=[],t.transformControls.detach(t.meshEditObject.mesh),t.meshEditObject.mesh.add(r.createWireframe(t.meshEditObject.mesh)),t.meshEditObject.createMeshHelpers()}else e.elements.meshEditElementsForm.style.display="none",t.transformControls.detach(t.meshEditObject.mesh),t.meshEditObject.removeMeshHelpers(),t.meshEditObject.mesh.remove(t.meshEditObject.mesh.getObjectByName("FaceHighlight")),t.meshEditObject.faceHighlighting=!1,t.selectableObjects=[],t.selectableObjects=t.selectableObjects.concat(t.tempSelectableObjects),t.tempSelectableObjects=[],t.meshEditObject=null,n.appMode.meshEdit=!1,t.mode.entity=null,n.changeAppState("meshEditEvent","")})),e.elements.meshEditContainer.style.display="none",e.elements.meshEditElementsForm=e.addElement(meshEditContainer,"form","",""),e.elements.meshEditElementsForm.id="meshEditElementsForm",e.elements.meshEditElementsForm.className="meshEditElementsForm",e.elements.meshEditVertex=e.createSwitchButton({parent:meshEditElementsForm,text:"Vertices",id:"Vertices",name:"meshEditElements",value:"Vertices",tooltip:"Vertices",imgLink:""},(function(){var e=new E;n.changeAppState("meshEditEvent","Vertices"),t.meshEditObject.mode="Vertices",t.meshEditObject.removeMeshHelpers(),t.meshEditObject.mesh.remove(t.meshEditObject.mesh.getObjectByName("FaceHighlight")),t.meshEditObject.faceHighlighting=!1,t.meshEditObject.addSpheresToVertices(t.meshEditObject.mesh,t.meshEditObject.vertices),t.transformControls.detach(t.transformControls.object),t.meshEditObject.mesh.add(e.createWireframe(t.meshEditObject.mesh))})),e.elements.meshEditVertex.checked=!0,e.elements.meshEditEdges=e.createSwitchButton({parent:meshEditElementsForm,text:"Edges",id:"Edges",name:"meshEditElements",value:"Edges",tooltip:"Edges",imgLink:""},(function(){n.changeAppState("meshEditEvent","Edges"),t.meshEditObject.mode="Edges"})),e.elements.meshEditFaces=e.createSwitchButton({parent:meshEditElementsForm,text:"Faces",id:"Faces",name:"meshEditElements",value:"Faces",tooltip:"Faces",imgLink:""},(function(){var e=new E;n.changeAppState("meshEditEvent","Faces"),t.meshEditObject.mode="Faces",t.meshEditObject.removeMeshHelpers(),t.meshEditObject.createMeshHelpers(),t.transformControls.detach(t.transformControls.object),t.meshEditObject.mesh.add(e.createWireframe(t.meshEditObject.mesh))}))}(),!0}},{key:"addElement",value:function(e,t,n,r,a){var i=document.createElement(t);if(e.appendChild(i),i.innerHTML=n,""!==r){var o=document.createElement("img");o.src=r,i.appendChild(o)}return"function"==typeof a&&i.addEventListener("click",a,!1),i}},{key:"createFileSelectionButton",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Choose File",n=arguments.length>2?arguments[2]:void 0,r=document.createElement("label");e.appendChild(r),r.innerHTML=t;var a=document.createElement("input");return a.type="file",a.className="selectFile",r.appendChild(a),"function"==typeof n&&r.addEventListener("change",n,!1),r}},{key:"createSwitchButton",value:function(e,t){if("function"==typeof t){var n=document.createElement("input");n.type="radio",n.name=e.name,n.id=e.id,n.value=e.value,n.addEventListener("click",t),e.parent.appendChild(n);var r=document.createElement("label");if(r.innerHTML=e.text,r.htmlFor=n.id,r.title=e.tooltip,e.parent.appendChild(r),e.imgLink&&""!==e.imgLink){var a=document.createElement("img");a.src=e.imgLink,r.appendChild(a)}return n}console.error(t+" is not a function")}},{key:"createStayPressedButton",value:function(e,t){if("function"==typeof t){var n=document.createElement("input");n.type="checkbox",n.name=e.name,n.id=e.id,n.value=e.value,n.addEventListener("click",t),e.parent.appendChild(n);var r=document.createElement("label");if(r.innerHTML=e.text,r.htmlFor=n.id,r.title=e.tooltip,e.parent.appendChild(r),e.imgLink&&""!==e.imgLink){var a=document.createElement("img");a.src=e.imgLink,r.appendChild(a)}return n}console.error(t+" is not a function")}},{key:"createContainer",value:function(e,t){var n=document.createElement("div");return n.className=e,n.id=e,t.appendChild(n),n}},{key:"createParametersMenu",value:function(e){this.deleteParametersMenu(),document.getElementById("tabsButtons").style.display="flex",e.geometry.parameters&&function(e){new D;var t=new B,n=document.getElementById("GeometryParameters"),r=document.createElement("div");r.id="ParametersGoemetryRows",n.appendChild(r);for(var a=Object.entries(e.geometry.parameters),i=function(n){var i=document.createElement("div");r.appendChild(i),i.className="ParametersRow";var o=document.createElement("p");i.appendChild(o),o.innerHTML=a[n][0];var s=void 0,c=new E;if("boolean"==typeof a[n][1]){(s=document.createElement("select")).id=a[n][0];var l=document.createElement("option");l.text="true",l.value="true",s.add(l),(l=document.createElement("option")).text="false",l.value="false",s.add(l),s.value=a[n][1],s.addEventListener("input",(function(){var n=JSON.parse(s.value);c.updateSelectedObject(s.id,n,e),t.changeAppState("GeometryParameters-"+s.id,s.value)}),!1)}else(s=document.createElement("input")).id=a[n][0],s.min=.001,s.step=.1,s.type="number",s.value=Math.round(1e3*a[n][1])/1e3,s.addEventListener("input",(function(){c.updateSelectedObject(s.id,+s.value,e),t.changeAppState("GeometryParameters-"+s.id,s.value)}),!1);a[n][0].toUpperCase().includes("SEGMENTS")&&(s.step=1,s.min=1),a[n][0].toUpperCase().includes("DETAIL")&&(s.step=1,s.min=0,s.max=7),i.appendChild(s)},o=0;o<a.length;o++)i(o)}(e),function(e){var t=new D,n=document.getElementById("MaterialParameters"),r=document.createElement("div");r.id="ParametersMaterialRows",n.appendChild(r);var a=["LineBasicMaterial","LineDashedMaterial","MeshBasicMaterial","MeshDepthMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshMatcapMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","RawShaderMaterial","ShaderMaterial","ShadowMaterial","SpriteMaterial"],i=document.createElement("div");i.className="ParametersRow";var o=document.createElement("p");i.appendChild(o),o.innerHTML="Type";var s=document.createElement("select");s.id="MaterialType",s.className="selectMaterial",r.appendChild(i);for(var c=0;c<a.length;c++){var l=document.createElement("option");l.text=a[c],l.value=a[c],s.add(l)}s.value=e.material.type,s.disabled="true",i.appendChild(s),i=t.addParametersRow("Color","color",e.material.color),r.appendChild(i);var d=t.getInput(i);d.className="inputColor",d.value="#"+e.material.color.getHexString(),d.addEventListener("input",(function(){e.material.color=new u.Color(this.value);var t=e.material.color;v(t),g(t)})),t.addElement(r,"p","Color components","");for(var m=Object.entries(e.material.color),h=function(t){var n=document.createElement("div");r.appendChild(n),n.className="ParametersRowRange";var a=document.createElement("p");switch(n.appendChild(a),m[t][0]){case"r":a.innerHTML="Red";break;case"g":a.innerHTML="Green";break;case"b":a.innerHTML="Blue"}var i=document.createElement("input");i.id=m[t][0]+"_number",i.type="number",i.value=m[t][1],i.step=.01,i.min=0,i.max=1,i.addEventListener("input",(function(){var n=m[t][0];e.material.color[n]=i.value;var r=e.material.color;f(r),v(r)}),!1),n.appendChild(i);var o=document.createElement("input");o.id=m[t][0],o.type="range",o.className="slider",n.appendChild(o),o.value=m[t][1],o.step=.001,o.min=0,o.max=1,o.addEventListener("input",(function(){var n=m[t][0];e.material.color[n]=o.value,f(e.material.color),g(e.material.color)}),!1)},p=0;p<m.length;p++)h(p);function f(e){document.getElementById("Color").value="#"+e.getHexString()}function v(e){document.getElementById("r").value=e.r,document.getElementById("g").value=e.g,document.getElementById("b").value=e.b}function g(e){document.getElementById("r_number").value=Math.round(1e3*e.r)/1e3,document.getElementById("g_number").value=Math.round(1e3*e.g)/1e3,document.getElementById("b_number").value=Math.round(1e3*e.b)/1e3}}(e),function(e){var t=new D,n=new B,r=document.getElementById("GeneralParameters"),a=document.createElement("div");a.id="ParametersGeneralRows",r.appendChild(a);var i=t.addParametersRow("ID","string",e.id);a.appendChild(i);var o=t.addParametersRow("Name","string",e.name);a.appendChild(o);var s=t.getInput(o);s.addEventListener("input",(function(){e.name=s.value}),!1),t.addParametersRow("id","string",e.id).disabled=!0,t.addElement(a,"p","Position","");for(var c=Object.entries(e.position),l=function(r){var i=c[r][0],o=Math.round(1e3*c[r][1])/1e3,s=t.addParametersRow("position_"+i,"number",o);a.appendChild(s);var l=t.getInput(s);l.step=.1,l.addEventListener("input",(function(){e.position[i]=l.value,n.changeAppState("GeneralParameters-"+l.id,l.value)}),!1)},d=0;d<c.length;d++)l(d);t.addElement(a,"p","Rotation",""),c=Object.entries({x:e.rotation.x,y:e.rotation.y,z:e.rotation.z});for(var u=function(r){var i=c[r][0],o=Math.round(1e3*c[r][1])/1e3,s=t.addParametersRow("rotation_"+i,"number",o);a.appendChild(s);var l=t.getInput(s);l.step=.1,l.addEventListener("input",(function(){e.rotation[i]=l.value,n.changeAppState("GeneralParameters-"+l.id,l.value)}),!1)},m=0;m<c.length;m++)u(m);t.addElement(a,"p","Scale",""),c=Object.entries(e.scale);for(var h=function(r){var i=c[r][0].replace("_",""),o=Math.round(1e3*c[r][1])/1e3,s=t.addParametersRow("scale_"+i,"number",o);a.appendChild(s);var l=t.getInput(s);l.step=.1,l.addEventListener("input",(function(){e.scale[i]=l.value,n.changeAppState("GeneralParameters-"+l.id,l.value)}),!1)},p=0;p<c.length;p++)h(p)}(e)}},{key:"addParametersRow",value:function(e,t,n){var r=document.createElement("div");r.className="ParametersRow";var a=document.createElement("p");r.appendChild(a),a.innerHTML=e;var i=document.createElement("input");return i.id=e,i.type=t,r.appendChild(i),i.value=n,r}},{key:"getInput",value:function(e){return e.getElementsByTagName("input")[0]}},{key:"updateParametersMenu",value:function(e){if(e.geometry.parameters)for(var t=Object.entries(e.geometry.parameters),n=0;n<t.length;n++){var r=document.getElementById(t[n][0]);"number"===r.type&&(r.value=Math.round(1e3*t[n][1])/1e3)}else console.warn("No Params")}},{key:"deleteGeometryParametersTab",value:function(){var e=document.getElementById("ParametersGoemetryRows");e&&e.remove()}},{key:"deleteParametersMenu",value:function(){this.deleteGeometryParametersTab();var e=document.getElementById("ParametersMaterialRows");e&&e.remove(),(e=document.getElementById("ParametersGeneralRows"))&&e.remove(),tabsButtons.style.display="none"}}]),e}(),R=n(1),W=n.n(R),z=n(32),V=n.n(z),U=n(2),Y=n.n(U),X=(n(48),n(49),n(12)),J=n.n(X);function q(e){var t=e.name,n=e.setPanel;return W.a.createElement("button",{className:"addPanel_Buttons",onClick:function(){n(t)}},t)}q.propTypes={name:J.a.string,setPanel:J.a.func};var Z=q,K=(n(25),{MatCaps:"Select Matcap",Textures:"Select Texture",Models:"Select Model"});var Q=function(e){var t=Object(R.useState)(!1),n=Y()(t,2),r=n[0],a=n[1],i=Object(R.useState)("0px"),o=Y()(i,2),s=o[0],c=o[1],l=Object(R.useState)("30px"),d=Y()(l,2),u=d[0],m=d[1],h=Object(R.useState)(null),p=Y()(h,2),f=p[0],v=p[1],g=Object(R.useState)({x:void 0,y:void 0}),y=Y()(g,2),b=y[0],E=y[1],S=Object(R.useContext)(ie),w=new B;function C(){var e,t;event.pageX<20||event.pageX>document.documentElement.clientWidth-20||event.pageY<20||event.pageY>document.documentElement.clientHeight-20||(1===event.buttons?(e=event.pageX,t=event.pageY,c(e-b.x-b.blockOffset.x+"px"),m(t-b.y-b.blockOffset.y+"px")):a(!1))}return Object(R.useEffect)((function(){return r&&document.addEventListener("mousemove",C,!1),function(){document.removeEventListener("mousemove",C,!1)}}),[r]),Object(R.useEffect)((function(){v(e.cardsDiv)}),[]),W.a.createElement("div",{className:"MatCap",onMouseUp:function(){a(!1)},style:{left:s,top:u}},W.a.createElement("div",{className:"dragLine",onMouseDown:function(){if(1===event.buttons){var e=getComputedStyle(event.target.parentNode.parentNode),t={x:e.left.replace("px",""),y:e.top.replace("px","")},n={x:event.offsetX,y:event.offsetY,blockOffset:t};E(n),a(!0),event.stopPropagation(),event.preventDefault()}}},K[e.panel],W.a.createElement("button",{className:"addPanel_CloseButton",onClick:function(){e.setPanel("")}},"X")),W.a.createElement("div",{className:"HeadMatCab"},W.a.createElement("div",{className:"matCapPreview"},"MatCaps"===e.panel&&S.img?W.a.createElement("img",{className:"cardImgSelected",src:S.img}):""),W.a.createElement("div",{className:"HeadMatCabButtons"},W.a.createElement("label",null,"Preview",W.a.createElement("input",{type:"checkbox",name:"checkbox",onChange:function(e){console.log("changeCheckbox",e.target.checked)}})),W.a.createElement("button",{className:"addPanel_Buttons",onClick:function(){w.changeAppState("matcapChanged",S.src)}},"Use"))),"MatCaps"===e.panel&&f)};function $(e){var t=Object(R.useState)(""),n=Y()(t,2),r=n[0],a=n[1],i=Object(R.useState)(null),o=Y()(i,2),s=o[0],c=o[1];return Object(R.useEffect)((function(){c(e.cardsDiv)}),[]),W.a.createElement("div",{className:"Main"},["MatCaps","Textures","Models"].map((function(e){return W.a.createElement(Z,{name:e,key:e,setPanel:a})})),r&&W.a.createElement(Q,{setPanel:a,panel:r,cardsDiv:s}))}$.propTypes={cardsDiv:J.a.element};var ee=$;var te=function(e){return W.a.createElement("label",{className:"MatcabCard",onClick:function(t){e.setImage(e.value)}},W.a.createElement("input",{type:"radio",value:e.value.name,name:"MatcabCard"}),W.a.createElement("img",{className:"cardImg",src:e.value.img}))},ne=(n(52),new x),re=new B;function ae(e){var t=Object(R.useState)(""),n=Y()(t,2),r=n[0],a=n[1],i=Object(R.useState)(""),o=Y()(i,2),s=o[0],c=o[1];return Object(R.useEffect)((function(){var e=[];for(var t in re.state)re.state.hasOwnProperty(t)&&e.push(W.a.createElement("p",{key:t},t," -- ",String(re.state[t])));c(e)}),[r]),ne.onEvent("appStateChanged",(function(e){a(e)})),W.a.createElement("div",{className:"DebuggingPanel"},W.a.createElement("h3",null,"Debug panel "),W.a.createElement("p",{className:"appStateChanged"},"appStateChanged:"),W.a.createElement("p",null,r),W.a.createElement("hr",null),s)}var ie=W.a.createContext();function oe(e){var t=e.matcapImages.cards_64.map((function(e){return W.a.createElement(te,{key:e.name.toString(),value:e,setImage:c})})),n=W.a.createElement("div",{className:"MatCapImages"},t),r=new B,a=Object(R.useState)(""),i=Y()(a,2),o=i[0],s=i[1];function c(e){s(e)}return Object(R.useEffect)((function(){r.changeAppState("matcapChanged",o.src)}),[o]),W.a.createElement(ie.Provider,{value:o},W.a.createElement(ee,{cardsDiv:n}),W.a.createElement(ae,null))}var se=n(19),ce=n.n(se),le=n(4),de=(n(53),n(14)),ue=n.n(de),me=(n(54),n.p+"58295a667983b8bae1403f04106af335.jpg"),he=function(){function e(t){c()(this,e),this.ta_State=t}var t,n,r,i;return d()(e,[{key:"checkAuth",value:(i=o()(a.a.mark((function e(){var t,n;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,this.ta_State.changeAppState("isLoading",!0),e.next=4,fetch("/api/check/checkAuth",{method:"POST"});case 4:if(200!==(t=e.sent).status){e.next=17;break}return e.next=8,t.json();case 8:return(n=e.sent).auth=!0,this.ta_State.changeAppState("userName",n.userName),this.ta_State.changeAppState("userId",n.userId),this.ta_State.changeAppState("auth",n.auth),this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",n);case 17:return this.ta_State.changeAppState("userName",void 0),this.ta_State.changeAppState("userId",void 0),this.ta_State.changeAppState("auth",!1),this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",{userName:void 0,userId:void 0,auth:!1});case 22:e.next=27;break;case 24:e.prev=24,e.t0=e.catch(0),this.ta_State.changeAppState("isLoading",!1);case 27:case"end":return e.stop()}}),e,this,[[0,24]])}))),function(){return i.apply(this,arguments)})},{key:"register",value:(r=o()(a.a.mark((function e(t){var n,r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,this.ta_State.changeAppState("isLoading",!0),e.next=4,fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});case 4:if(201!==(n=e.sent).status){e.next=10;break}return this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",201);case 10:return e.next=12,n.json();case 12:return r=e.sent,this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",r.message);case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(0),this.ta_State.changeAppState("isLoading",!1);case 20:case"end":return e.stop()}}),e,this,[[0,17]])}))),function(e){return r.apply(this,arguments)})},{key:"login",value:(n=o()(a.a.mark((function e(t){var n,r;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,this.ta_State.changeAppState("isLoading",!0),e.next=4,fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"same-origin",body:JSON.stringify(t)});case 4:return n=e.sent,e.next=7,n.json();case 7:return(r=e.sent).userName&&(this.ta_State.changeAppState("userName",r.userName),this.ta_State.changeAppState("userId",r.userId),this.ta_State.changeAppState("auth",!0)),this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",r);case 13:e.prev=13,e.t0=e.catch(0),this.ta_State.changeAppState("isLoading",!1);case 16:case"end":return e.stop()}}),e,this,[[0,13]])}))),function(e){return n.apply(this,arguments)})},{key:"logout",value:(t=o()(a.a.mark((function e(){var t;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,this.ta_State.changeAppState("isLoading",!0),e.next=4,fetch("/api/auth/logout",{method:"POST"});case 4:return t=e.sent,this.ta_State.changeAppState("userName",void 0),this.ta_State.changeAppState("userId",void 0),this.ta_State.changeAppState("auth",!1),this.ta_State.changeAppState("isLoading",!1),e.abrupt("return",t.status);case 12:e.prev=12,e.t0=e.catch(0),this.ta_State.changeAppState("isLoading",!1);case 15:case"end":return e.stop()}}),e,this,[[0,12]])}))),function(){return t.apply(this,arguments)})}]),e}();function pe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pe(Object(n),!0).forEach((function(t){ue()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ve=new he(new B);function ge(e){var t=e.history,n=e.hide,r=Object(R.useRef)(),i=Object(R.useRef)(),s=Object(R.useState)({name:"",email:"",password:"",confirmPassword:""}),c=Y()(s,2),l=c[0],d=c[1],u=Object(R.useState)(""),m=Y()(u,2),h=m[0],p=m[1],f=Object(R.useState)(!1),v=Y()(f,2),g=v[0],y=v[1];Object(R.useEffect)((function(){return n(!1),document.addEventListener("keydown",b),function(){return document.removeEventListener("keydown",b)}}),[]);var b=function(e){"Escape"===e.key&&E()},E=function(e){"registration-div"===e.target.className&&(n(!0),t.push("/"))},S=function(e){p(""),d(fe(fe({},l),{},ue()({},e.target.name,e.target.value)))},w=function(){var e=o()(a.a.mark((function e(t){var n;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),l.password===l.confirmPassword){e.next=5;break}return i.current.value="",p("Please confirm your password"),e.abrupt("return");case 5:return e.next=7,ve.register(fe({},l));case 7:n=e.sent,r.current.value="",i.current.value="",201===n?y(!0):p(n);case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),C=function(){t.push("/login")};return W.a.createElement("div",{className:"registration-div",onClick:E},g?W.a.createElement("div",{className:"registration-form-congrat"},W.a.createElement("div",{className:"congrat-text"},"Congratulations! ",W.a.createElement("br",null),"You have registered on TertiusAxis editor!"),W.a.createElement("button",{className:"registration-form-register",onClick:C},"Ok")):W.a.createElement("div",{className:"registration-form"},W.a.createElement("div",{className:"registration-form-header"},W.a.createElement("img",{src:me,alt:"Logo"}),W.a.createElement("div",{className:"registration-form-title"},W.a.createElement("h1",null,"Registration"),h&&W.a.createElement("p",{className:"registration-form-error"},"Error: ",h)),W.a.createElement("button",{className:"registration-close",onClick:E},"x")),W.a.createElement("form",{className:"registration-form-inputs"},W.a.createElement("input",{placeholder:"Name",name:"name",onChange:S}),W.a.createElement("input",{placeholder:"Email",name:"email",onChange:S}),W.a.createElement("input",{ref:r,placeholder:"Password not less 6 symbols",name:"password",type:"password",onChange:S}),W.a.createElement("input",{ref:i,placeholder:"Confirm password",name:"confirmPassword",type:"password",onChange:S}),W.a.createElement("div",{className:"registration-form-buttons"},W.a.createElement("button",{className:"registration-form-IHaveLogin",onClick:C},"I have login"),W.a.createElement("button",{className:"registration-form-register",type:"submit",onClick:w},"Register")))))}n(55);function ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function be(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ye(Object(n),!0).forEach((function(t){ue()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ee=new he(new B);function Se(e){var t=e.history,n=e.hide,r=Object(R.useRef)(),i=Object(R.useState)({email:"",password:""}),s=Y()(i,2),c=s[0],l=s[1],d=Object(R.useState)(""),u=Y()(d,2),m=u[0],h=u[1];Object(R.useEffect)((function(){return n(!1),document.addEventListener("keydown",f),function(){return document.removeEventListener("keydown",f)}}),[]);var p=function(e){l(be(be({},c),{},ue()({},e.target.name,e.target.value)))},f=function(e){"Escape"===e.key&&g()},v=function(){n(!0),t.push("/")},g=function(e){"Login-div"===e.target.className&&v()},y=function(){var e=o()(a.a.mark((function e(t){var n;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),h(""),e.next=4,Ee.login(be({},c));case 4:n=e.sent,r.current.value="",n&&n.userName?v():h("No connection");case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return W.a.createElement("div",{className:"Login-div",onClick:g},W.a.createElement("div",{className:"registration-form"},W.a.createElement("div",{className:"registration-form-header"},W.a.createElement("img",{src:me,alt:"Logo"}),W.a.createElement("div",{className:"registration-form-title"},W.a.createElement("h1",null,"Login"),m&&W.a.createElement("p",{className:"registration-form-error"},"Error: ",m)),W.a.createElement("button",{className:"registration-close",onClick:g},"x")),W.a.createElement("form",{className:"registration-form-inputs"},W.a.createElement("input",{placeholder:"Email",name:"email",onChange:p}),W.a.createElement("input",{ref:r,placeholder:"Password",name:"password",type:"password",onChange:p}),W.a.createElement("div",{className:"registration-form-buttons"},W.a.createElement("button",{className:"registration-form-IHaveLogin",onClick:function(e){t.push("/registration")}},"I have no login"),W.a.createElement("button",{className:"registration-form-register",type:"submit",onClick:y},"Login")))))}function we(e){e.history;var t=Object(R.useState)(!0),n=Y()(t,2),r=n[0],a=n[1],i=function(e){a(e)};return W.a.createElement("div",{className:"registration-mainMenu",style:r?{height:"0px"}:{height:"100%"}},W.a.createElement(le.c,null,W.a.createElement(le.a,{path:"/registration",render:function(e){return W.a.createElement(ge,ce()({hide:i},e))}}),W.a.createElement(le.a,{path:"/Login",render:function(e){return W.a.createElement(Se,ce()({hide:i},e))}})))}var Ce=n(15),je=(n(59),new he(new B));function Oe(e){var t=e.userName,n=e.showUsermenu,r=Object(R.useRef)(null);function i(){n()}var s=function(){var e=o()(a.a.mark((function e(){return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,je.logout();case 2:n();case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return Object(R.useEffect)((function(){return r.current.addEventListener("mouseleave",i),function(){r.current.removeEventListener("mouseleave",i)}}),[]),W.a.createElement("div",{ref:r,className:"UserMenu-div"},W.a.createElement("ul",null,t,W.a.createElement("li",null,"Profile"),W.a.createElement("li",null,"Scenes"),W.a.createElement("li",null,"Settings"),"___________",W.a.createElement("li",null,W.a.createElement("span",{className:"UserMenu-logout",onClick:s},"Logout"))))}var Me=new B;function xe(){var e=Object(R.useState)(!1),t=Y()(e,2),n=t[0],r=t[1],a=Object(R.useState)(!1),i=Y()(a,2),o=i[0],s=i[1];Object(R.useEffect)((function(){(new x).onEvent("auth",(function(){r(Me.state.auth)}))}),[]);var c=function(){s(!o)},l=W.a.createElement("div",null,W.a.createElement(Ce.a,{to:"/Login"},W.a.createElement("span",{className:"authentication-link"},"Login")),W.a.createElement(Ce.a,{to:"/registration"},W.a.createElement("span",{className:"authentication-link"},"Registration"))),d=W.a.createElement("div",{className:"authentication-welcome"},"Welcome,",W.a.createElement("span",{onClick:c,className:"authentication-link"},Me.state.userName));return W.a.createElement("div",{className:"auth-in-mainMenu"},n?d:l,n&&o&&W.a.createElement(Oe,{userName:Me.state.userName,showUsermenu:c}))}var Be=n(8),Le=function(){function e(){c()(this,e),this.images_64=this.importAll(n(60)),this.cards_64=this.createCards(this.images_64)}return d()(e,[{key:"importAll",value:function(e){var t={};return e.keys(0).map((function(n){t[n.replace("./","")]=e(n)})),t}},{key:"createCards",value:function(e){var t=[];return Object.entries(e).map((function(e,n){t.push({name:"Card "+n,img:e[1].default,src:e[0]})})),t}}]),e}(),ke=(n(67),function(){document.body.appendChild(function(){var e=document.createElement("div");e.className="loader",e.id="loader";var t=document.createElement("h1");t.className="loader-text",t.innerHTML="Loading...",e.appendChild(t);var n=document.createElement("div");n.className="container",n.id="container";var r=document.createElement("div");r.className="dash uno",r.id="uno",n.appendChild(r);var a=document.createElement("div");a.className="dash dos",a.id="dos",n.appendChild(a);var i=document.createElement("div");i.className="dash tres",i.id="tres",n.appendChild(i);var o=document.createElement("div");return o.className="dash cuatro",o.id="cuatro",n.appendChild(o),e.appendChild(n),e}())}),Pe=function(){var e=document.getElementById("loader");e&&document.body.removeChild(e)};var Te=new B,Ne=new he(Te),He=new Le,_e=Object(Be.a)();(new x).onEvent("isLoading",(function(){Te.state.isLoading?ke():Pe()})),function(){var e=o()(a.a.mark((function e(){return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ne.checkAuth();case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()(),V.a.render(W.a.createElement(W.a.StrictMode,null,W.a.createElement(le.b,{history:_e},W.a.createElement(we,null),W.a.createElement(xe,null)),W.a.createElement(oe,{matcapImages:He})),document.getElementById("MatCab"));var Ie=new D,Ae=new I(Ie);Ie.init(Ae),Ae.createScene(),Ie.fillMainToolbar(Ae)&&console.log("TertiusAxis loaded")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL19SZXNvdXJjZXMvTWF0Y2Ficy9UZXN0IHN5bmMgbm9ucmVjdXJzaXZlIFxcLihwbmcpJCIsIndlYnBhY2s6Ly8vLi9zcmMvX1Jlc291cmNlcy9NYXRjYWJzL1Rlc3QvMEEwQTBBX0E5QTlBOV81MjUyNTJfNzQ3NDc0LTY0cHgucG5nIiwid2VicGFjazovLy8uL3NyYy9fUmVzb3VyY2VzL01hdGNhYnMvVGVzdC8wQzBDQzNfMDQwNDlGXzA0MDQ4M18wNDA0NUMtNjRweC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL19SZXNvdXJjZXMvTWF0Y2Ficy9UZXN0LzBDNDMwQ18yNTdEMjVfNDM5QTQzXzNDNjgzQy02NHB4LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvX1Jlc291cmNlcy9NYXRjYWJzL1Rlc3QvMEQwREJEXzA0MDQ5N18wNDA0N0JfMDQwNDU1LTY0cHgucG5nIiwid2VicGFjazovLy8uL3NyYy9fUmVzb3VyY2VzL01hdGNhYnMvVGVzdC83NzdDNjFfMzMzNzI3X0JBQkZBMV9BNUFDOEMtNjRweC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL19SZXNvdXJjZXMvTWF0Y2Ficy9UZXN0Lzc3N0Q3RF9CRENBRDJfM0UzQzJFX0IxQjhCNi02NHB4LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvRW50aXRpZXMvVEFfRW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljby9jdWJlaWNvLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvL3NwaGVyZWljby5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50RW1pdHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVEFfU3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RyYWdDb250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVEFfU2NlbmVMaWdodHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RBX0hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RBX1NjZW5lQ2FtZXJhLmpzIiwid2VicGFjazovLy8uL3NyYy9DYWxjdWxhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1RBX1NjZW5lLmpzIiwid2VicGFjazovLy8uL3NyYy9NZXNoRWRpdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvVEFfVUkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL01haW5NZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9NYWluVG9vbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvTWFuaXB1bGF0ZVRvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0FkZFRvU2NlbmVUb29sYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9QYXJhbWV0ZXJzVG9vbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvTWVzaEVkaXRUb29sYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9HZW9tZXRyeVBhcmFtZXRlcnNUYWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL01hdGVyaWFsUGFyYW1ldGVyc1RhYi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvR2VuZXJhbFBhcmFtZXRlcnNUYWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0FkZFBhbmVsL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvQWRkUGFuZWwvTWF0ZXJpYWxzVGFiL01hdGNhcC9NYXRjYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0FkZFBhbmVsL0FkZFBhbmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9BZGRQYW5lbC9NYXRlcmlhbHNUYWIvTWF0Y2FwL01hdGNhYkNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0RlYnVnZ2luZ1BhbmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9SZWFjdFBhbmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9fUmVzb3VyY2VzL0xvZ28vbG9nbzUuanBnIiwid2VicGFjazovLy8uL3NyYy9IdHRwLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9BdXRoZW50aWNhdGlvbi9SZWdpc3RyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0F1dGhlbnRpY2F0aW9uL0xvZ2luLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9BdXRoZW50aWNhdGlvbi9BdXRoZW50aWNhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvUGVyc29uYWwvVXNlck1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0F1dGhlbnRpY2F0aW9uL0F1dGhJbk1haW5NZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9NYXRjYXBJbWFnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGVydGl1c0F4aXMuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJtYXAiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiZSIsIkVycm9yIiwiY29kZSIsImtleXMiLCJyZXNvbHZlIiwiVEFfRW50aXRpZXMiLCJHTE9CQUxTQ09QRSIsInRoaXMiLCJjcmVhdGVHZW9tZXRyeSIsImdlb21ldHJ5VHlwZSIsInBhcmFtcyIsImdlb21ldHJ5IiwiVEhSRUUiLCJjaGVja1BhcmFtcyIsInBhcmFtZXRlcnMiLCJwYXJhbXNBcnJheSIsInZhbHVlcyIsInBhcmFtc1RvQ2hlY2siLCJwYXJhbXNUZW1wbGF0ZSIsImFzc2lnbiIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCJjcmVhdGVCb3giLCJ4IiwieSIsInoiLCJ3aWR0aCIsImhlaWdodCIsImRlcHRoIiwibWF0ZXJpYWwiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJkZXB0aFNlZ21lbnRzIiwiYm94IiwicG9zaXRpb24iLCJjcmVhdGVTcGhlcmUiLCJyYWRpdXMiLCJzZWdtZW50cyIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwiTWF0aCIsIlBJIiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwic3BoZXJlIiwiY3JlYXRlQ2lyY2xlIiwiY2lyY2xlIiwiY3JlYXRlQ29uZSIsInJhZGlhbFNlZ21lbnRzIiwib3BlbkVuZGVkIiwiY29uZSIsImNyZWF0ZUN5bGluZGVyIiwicmFkaXVzVG9wIiwicmFkaXVzQm90dG9tIiwiY3lsaW5kZXIiLCJjcmVhdGVEb2RlY2FoZWRyb24iLCJkZXRhaWwiLCJkb2RlY2FoZWRyb24iLCJjcmVhdGVJY29zYWhlZHJvbiIsImljb3NhaGVkcm9uIiwiY3JlYXRlT2N0YWhlZHJvbiIsIm9jdGFoZWRyb24iLCJjcmVhdGVUb3J1cyIsInR1YmUiLCJ0dWJ1bGFyU2VnbWVudHMiLCJhcmMiLCJ0b3J1cyIsImNyZWF0ZVRldHJhaGVkcm9uIiwidGV0cmFoZWRyb24iLCJjcmVhdGVMaW5lIiwieDEiLCJ5MSIsInoxIiwiY29sb3IiLCJkYXNoZWQiLCJkYXNoU2l6ZSIsImdhcFNpemUiLCJ2ZXJ0aWNlcyIsImxpbmUiLCJjb21wdXRlTGluZURpc3RhbmNlcyIsImNyZWF0ZUxhYmVsIiwidGV4dCIsImxhYmVsRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidGV4dENvbnRlbnQiLCJzdHlsZSIsIm1hcmdpblRvcCIsImxhYmVsb2JqZWN0IiwiQ1NTMkRPYmplY3QiLCJzZXQiLCJjcmVhdGVQbGFuZSIsInBsYW5lR2VvbSIsInBsYW5lTWF0ZXJpYWwiLCJ0cmFuc3BhcmVudCIsIm9wYWNpdHkiLCJzaWRlIiwic2VsZWN0RW50aXR5Iiwib2JqZWN0VG9TZWxlY3QiLCJjdXJyZW50U2VsZWN0aW9uIiwiYWRkIiwiY3JlYXRlQm91bmRpbmdCb3giLCJUQV9VSSIsImNyZWF0ZVBhcmFtZXRlcnNNZW51IiwiY3JlYXRlV2lyZWZyYW1lIiwid2lyZWZyYW1lIiwid2lyZWZyYW1lTGluZXMiLCJkZXB0aFRlc3QiLCJzY2FsZSIsImNvbXB1dGVCb3VuZGluZ0JveCIsImJvdW5kaW5nQm94IiwibWluIiwibWF4IiwicmVtb3ZlU2VsZWN0aW9uIiwicmVtb3ZlV2lyZWZyYW1lQW5kQm91bmRpbmdCb3giLCJvYmplY3RPd25Db2xvciIsImNoaWxkcmVuIiwiZmlsdGVyIiwiaXRlbSIsImZvckVhY2giLCJlbGVtZW50IiwicmVtb3ZlIiwidXBkYXRlU2VsZWN0ZWRPYmplY3QiLCJwYXJhbWV0ZXJOYW1lIiwicGFyYW1ldGVyVmFsdWUiLCJlbnRpdHkiLCJnZW9tIiwibmV3R2VvbSIsInR5cGUiLCJkaXNwb3NlIiwiZ2V0T2JqZWN0QnlOYW1lIiwiYm94M0hlbHBlciIsInVwZGF0ZU9iamVjdCIsInJhbmRvbUNvbG9yIiwicmFuZG9tIiwiQ3JlYXRpbmdFbnRpdHkiLCJzY29wZSIsImNlbnRlck9mT2JqZWN0V29ybGQiLCJjZW50ZXJPZk9iamVjdFNjcmVlbiIsImN1cnJlbnRFbnRpdHkiLCJjcmVhdGVFbnRpdHkiLCJzY2VuZSIsImV2ZW50Iiwic2NlbmVDYW1lcmEiLCJwb3MiLCJjbG9uZSIsInByb2plY3QiLCJjYW1lcmEiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ3b3JsZFNpemVPZlNjcmVlbiIsImdldFdvcmxkU2l6ZU9mU2NyZWVuIiwicmF0aW8iLCJkaXN0YW5jZVRvIiwic3RvcENyZWF0aW5nIiwidXNlckRhdGEiLCJjcmVhdGVkQnlVc2VyIiwic2VsZWN0YWJsZSIsInRhX3NjZW5lIiwiY29waWVkT2JqZWN0SUQiLCJuZXdPYmplY3QiLCJnZXRPYmplY3RCeUlkIiwic2VsZWN0YWJsZU9iamVjdHMiLCJtdWx0aXNlbGVjdGlvbiIsImxlbmd0aEFycmF5IiwibXVsdHVTZWxlY3Rpb25BcnJheSIsImNvcGllZE9iamVjdCIsImF0dGFjaCIsInN3aXRjaE9uTW92ZU1vZGUiLCJ0YVNjZW5lIiwidHJhbnNmb3JtQ29udHJvbHNNb2RlIiwidHJhbnNmb3JtQ29udHJvbHMiLCJzZXRNb2RlIiwiYWN0aW9uIiwib3JiaXRDb250cm9scyIsImVuYWJsZVJvdGF0ZSIsInN3aXRjaE9uUm90YXRpb25Nb2RlIiwic3dpdGNoT25TY2FsZU1vZGUiLCJzd2l0Y2hEcmFnTW9kZSIsImNoZWNrZWQiLCJ0YUVudGl0aWVzIiwidGFfVUkiLCJkcmFnQ29udHJvbHMiLCJhY3RpdmF0ZSIsImVsZW1lbnRzIiwiZmluaXNoQnV0dG9uIiwiZm9ybSIsInJlc2V0IiwiZGlzcGxheSIsImRlYWN0aXZhdGUiLCJsYWJlbFJlbmRlcmVyIiwiY3Vyc29yIiwiRXZlbnRFbWl0dGVyIiwiZXhpc3QiLCJpbnN0YW5jZSIsIl9ldmVudHMiLCJsaXN0ZW5lciIsImxpc3RlbmVyVG9SZW1vdmUiLCJjYWxsYmFjayIsIlRBX1N0YXRlIiwiZXZlbnRFbWl0dGVyIiwic3RhdGUiLCJhcHBNb2RlIiwibWVzaEVkaXQiLCJ0cmFuc2Zvcm1Nb2RlIiwibWVzaEVkaXRNb2RlIiwiX3VwZGF0ZVN0YXRlIiwiZW1pdEV2ZW50IiwiRHJhZ0NvbnRyb2xzIiwiX29iamVjdHMiLCJfY2FtZXJhIiwiX2RvbUVsZW1lbnQiLCJfcGxhbmUiLCJQbGFuZSIsIl9yYXljYXN0ZXIiLCJSYXljYXN0ZXIiLCJfbW91c2UiLCJWZWN0b3IyIiwiX29mZnNldCIsIlZlY3RvcjMiLCJfaW50ZXJzZWN0aW9uIiwiX3dvcmxkUG9zaXRpb24iLCJfaW52ZXJzZU1hdHJpeCIsIk1hdHJpeDQiLCJfaW50ZXJzZWN0aW9ucyIsIl9zZWxlY3RlZCIsIl9ob3ZlcmVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uRG9jdW1lbnRNb3VzZU1vdmUiLCJvbkRvY3VtZW50TW91c2VEb3duIiwib25Eb2N1bWVudE1vdXNlQ2FuY2VsIiwib25Eb2N1bWVudFRvdWNoTW92ZSIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0Iiwib25Eb2N1bWVudFRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsInRvcCIsInNldEZyb21DYW1lcmEiLCJlbmFibGVkIiwicmF5IiwiaW50ZXJzZWN0UGxhbmUiLCJjb3B5Iiwic3ViIiwiYXBwbHlNYXRyaXg0IiwiZGlzcGF0Y2hFdmVudCIsImludGVyc2VjdE9iamVjdHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImdldFdvcmxkRGlyZWN0aW9uIiwibm9ybWFsIiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwibWF0cml4V29ybGQiLCJ0cmFuc2Zvcm1Hcm91cCIsImdldEludmVyc2UiLCJwYXJlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsImdldE9iamVjdHMiLCJFdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsIlRBX1NjZW5lTGlnaHRzIiwiYW1iaWVudExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiQ29sb3IiLCJzcG90TGlnaHQiLCJTcG90TGlnaHQiLCJjYXN0U2hhZG93Iiwic2hhZG93IiwibWFwU2l6ZSIsIm5lYXIiLCJmYXIiLCJmb3YiLCJpc1NjZW5lIiwiVEFfSGVscGVycyIsImNvb3Jkc0hlbHBlcnMiLCJjcmVhdGVDb29yZHNIZWxwZXJzIiwiaW50ZXJzZWN0cyIsImxpbmVYIiwibGluZVkiLCJsaW5lWiIsImxhYmVsWCIsImxhYmVsWSIsImxhYmVsWiIsInBvaW50IiwibGFiZWxBdFBvaW50IiwiaW5uZXJIVE1MIiwicm91bmQiLCJyZW1vdmVDb29yZHNIZWxwZXJzIiwiU2NlbmVHcmlkcyIsImdyaWRIZWxwZXJTbWFsbCIsIkdyaWRIZWxwZXIiLCJncmlkSGVscGVyQmlnIiwibWFpblBsYW5lc0FycmF5IiwibWFpblBsYW5lR2VvbSIsIlBsYW5lQnVmZmVyR2VvbWV0cnkiLCJtYWluUGxhbmVNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiYWxwaGFUZXN0IiwiRG91YmxlU2lkZSIsIm1haW5QbGFuZVpZIiwiTWVzaCIsIm1haW5QbGFuZVhZIiwicm90YXRpb24iLCJtYWluUGxhbmVYWiIsImxpbmVBeGl4WSIsImluaXRTbWFsbEdyaWQiLCJpbml0QmlnR3JpZCIsImluaXRBbGwiLCJyZW1vdmVBbGwiLCJhZGRDYW1lcmFIZWxwZXIiLCJoZWxwZXIiLCJDYW1lcmFIZWxwZXIiLCJUQV9TY2VuZUNhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwibG9va0F0IiwiY2FtZXJhRGlyZWN0aW9uIiwiY2FtZXJhUG9zaXRpb24iLCJkaXN0YW5jZSIsIm11bHRpcGx5U2NhbGFyIiwibGluZTMiLCJMaW5lMyIsInBvaW50T25MaW5lIiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsImFuZ2xlIiwic2l6ZU9mVmlld1giLCJ0YW4iLCJhc3BlY3QiLCJmaW5kQmFyeUNlbnRlciIsInBvaW50cyIsIkFycmF5IiwiaXNBcnJheSIsInBvaW50c0NvdW50IiwicmVkdWNlIiwic3VtIiwiY3VycmVudCIsImRpdmlkZVNjYWxhciIsIlRBX1NjZW5lIiwibW91c2VQb3NpdGlvbiIsInRhX1N0YXRlIiwiZXZlbnRzIiwibWVzaEVkaXRPYmplY3QiLCJ0ZW1wU2VsZWN0YWJsZU9iamVjdHMiLCJHcm91cCIsInRyYW5zZm9ybUNvbnRyb2xzQ2hhbmdlZCIsIm9yYml0Q29udHJvbHNDaGFuZ2VkIiwiU2NlbmUiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJyZW5kZXJlcjIiLCJyYXljYXN0ZXIiLCJzY2VuZUNhbWVyYTIiLCJDU1MyRFJlbmRlcmVyIiwidGFfRW50aXRpZXMiLCJjcmVhdGluZ0VudGl0eSIsInNjZW5lTGlnaHRzIiwiaW5pdENhbWVyYSIsImNhbWVyYTIiLCJnZXRFbGVtZW50QnlJZCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwic2NlbmVHcmlkIiwiYmFja2dyb3VuZCIsInNldFNpemUiLCJkb21FbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiT3JiaXRDb250cm9scyIsIlRyYW5zZm9ybUNvbnRyb2xzIiwicmVuZGVyIiwib25Eb2N1bWVudE1vdXNlQ2xpY2siLCJtZXNoIiwiZmFjZUhpZ2hsaWdodGluZyIsInRhcmdldCIsImVkaXRIZWxwZXIiLCJ0cmFuc2Zvcm1NZXNoIiwid29ybGRQb3NpdGlvblN0YXJ0Iiwid29ybGRQb3NpdGlvbiIsImluZm9EaXYiLCJ1cGRhdGVTbWFsbFdpbmRvdyIsInNlY29uZENhbnZhc1dpZHRoIiwic2Vjb25kQ2FudmFzSGVpZ2h0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsInN0b3BQcm9wYWdhdGlvbiIsInNjcmVlblBvaW50IiwiZ2V0U2NyZWVuUG9pbnQiLCJpbnRlcnNlY3Rpb25zSW5mbyIsInVwZGF0ZVBhcmFtZXRlcnNNZW51IiwiaW50ZXJzZWN0c09iamVjdHMiLCJoaWdobGlnaHRGYWNlIiwiY3RybEtleSIsImFycmF5T2JqZWN0c0luU2VsZWN0aW9uIiwiY29uY2F0IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwicmV0dXJuT2JqZWN0c1RvU2NlbmUiLCJjZW50ZXJQb2ludHMiLCJiYXJ5Q2VudGVyIiwicmVzZXRNdWx0eXNlbGVjdGlvbiIsImRldGFjaCIsIm1lc2hFZGl0Q29udGFpbmVyIiwiZGVsZXRlUGFyYW1ldGVyc01lbnUiLCJzZWxlY3RCeU1vdXNlIiwia2V5Q29kZSIsImNsb25lT2JqZWN0IiwiQWN0aW9ucyIsImRyYWdCdXR0b24iLCJNZXNoUGhvbmdNYXRlcmlhbCIsImN1YmVHZW9tZXRyeSIsIkJveEJ1ZmZlckdlb21ldHJ5IiwicGFyZW50RWxlbWVudCIsInNlY29uZENhbnZhcyIsInNpemUiLCJyaWdodCIsInJlc2l6ZVNlY29uZENhbnZhcyIsImludGVyc2VjdE9iamVjdCIsImFkZFRyaWFuZ2xlIiwib2JqZWN0TmFtZSIsIm9uRXZlbnQiLCJpbWciLCJNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJ0ZXh0dXJlIiwiVGV4dHVyZUxvYWRlciIsImxvYWQiLCJtYXRjYXAiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlTWF0cml4V29ybGQiLCJlbGVtZW50c1RvUmVtb3ZlIiwiTWVzaEVkaXQiLCJ0YV9TY2VuZSIsIm1hdGVyaWFsSGlnaGxpZ2h0IiwidHJpYW5nbGVGb3JIaWdobGlnaHRpbmciLCJjcmVhdGVUcmlhbmdsZSIsImZhY2UiLCJnZXRQb2ludHMiLCJhIiwiYiIsImFyciIsImluZGV4IiwiYXR0cmlidXRlcyIsImFycmF5IiwibmVlZHNVcGRhdGUiLCJpbmRleFBvaW50cyIsImVxdWFsIiwiaW5kZXhWZXJ0ZXgiLCJlcXVhbHMiLCJhZGRTcGhlcmVzVG9WZXJ0aWNlcyIsIm1vdmVWZXJ0ZXgiLCJ2ZXJ0ZXhOdW1iZXIiLCJzcGhlcmVOYW1lIiwicmVwbGFjZSIsInN1YlZlY3RvcnMiLCJhdHRyQXJyYXkiLCJ2ZXJ0aWNlc051bWJlcnMiLCJwb2ludE51bWJlciIsInBvaW50UG9zaXRpb24iLCJjcmVhdGVNZXNoSGVscGVycyIsImluZGV4ZXNBcnJheSIsIlZlcnRleGVzUG9pbnRzSW5kZXhlcyIsIml0ZW1WZXJ0ZXgiLCJpbmRleGVzIiwiaXRlbVBvaW50cyIsInBvc2l0aW9ucyIsInBvaW50c0NoYW5nZUF0dHJpYnV0ZXNQb3NpdGlvbiIsInZlcnRleGVzQ2hhbmdlUG9pbnRzIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwic3BoZXJlR2VvbWV0cnkiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsImdyb3VwIiwidHJpYW5nbGUiLCJpdGVtVmVydCIsInRyaWFuZ2xlTnVtYmVyIiwiaW5kZXhBcnJheSIsInZlcnQiLCJwb2ludHNBcnJheSIsIml0ZW1TaXplIiwiaXNWZWN0b3IzIiwiQnVmZmVyR2VvbWV0cnkiLCJzZXRBdHRyaWJ1dGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDMyQXJyYXkiLCJzZXRJbmRleCIsIm1haW5NZW51IiwiYWRkRWxlbWVudCIsImJ1dHRvbkZpbGUiLCJoZWlnaHRNYWluTWVudSIsIm9mZnNldEhlaWdodCIsInBvc2l0aW9uQnV0dG9uRmlsZSIsIm9mZnNldFBvc2l0aW9uIiwiZmlsZU1lbnUiLCJ2aXNpYmlsaXR5IiwicmVsYXRlZFRhcmdldCIsIm9mZnNldFBhcmVudCIsImJ1dHRvbkVkaXQiLCJlZGl0TWVudSIsImJ1dHRvbkhlbHAiLCJoZWxwTWVudSIsImNyZWF0ZUNvbnRhaW5lciIsImNvbmZpcm0iLCJjbGVhclNjZW5lIiwidGFfZW50aXRpZXMiLCJlbGVtVG9FeHBvcnQiLCJ0b0pTT04iLCJzYXZlRmlsZSIsIkJsb2IiLCJKU09OIiwic3RyaW5naWZ5IiwiR0xURkV4cG9ydGVyIiwicGFyc2UiLCJnbHRmIiwiY3JlYXRlRmlsZVNlbGVjdGlvbkJ1dHRvbiIsImxvYWRTY2VuZSIsIm9wZW4iLCJsb2ciLCJmaWxlIiwic3JjRWxlbWVudCIsImZpbGVzIiwiZW5kc1dpdGgiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsIm9ubG9hZCIsImxvYWRlciIsIk9iamVjdExvYWRlciIsImxvYWRlZE9iamVjdCIsIm9uZXJyb3IiLCJhbGVydCIsImJsb2IiLCJmaWxlRXh0ZW50aW9uIiwiZmlsZU5hbWUiLCJsaW5rIiwiZG93bmxvYWQiLCJuYXZpZ2F0b3IiLCJtc1NhdmVPck9wZW5CbG9iIiwiaHJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImNsaWNrIiwicmV2b2tlT2JqZWN0VVJMIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsImNyZWF0ZU1haW5NZW51IiwibWFpblRvb2xiYXIiLCJoaWRlQnV0dG9uIiwibW92ZUFuaW0iLCJjcmVhdGVNYWluVG9vbGJhciIsIm1hbmlwdWxhdGluZ0NvbnRhaW5lciIsIm1haW5Db250YWluZXIiLCJzZWxlY3RCdXR0b24iLCJjcmVhdGVTd2l0Y2hCdXR0b24iLCJ0b29sdGlwIiwiaW1nTGluayIsInN3aXRjaE1vZGUiLCJtb3ZlQnV0dG9uIiwicm90YXRlQnV0dG9uIiwic2NhbGVCdXR0b24iLCJjcmVhdGVTdGF5UHJlc3NlZEJ1dHRvbiIsInNlbGVjdGVkUmFkaW8iLCJjcmVhdGVNYW5pcHVsYXRlVG9vbGJhciIsImFkZFRvU2NlbmVDb250YWluZXIiLCJ0aXRsZSIsImFkZFRvU2NlbmVCdXR0b25zIiwiYnV0dG9uc0RpdiIsImN1YmVJY28iLCJhY3RpdmUiLCJzcGhlcmVJY28iLCJzZWxlY3RlZEJ1dHRvbiIsImNyZWF0ZUFkZFRvU2NlbmVUb29sYmFyIiwicGFyYW1Db250YWluZXIiLCJwYXJhbXNEaXYiLCJ0YWJzQnV0dG9ucyIsInRhYkdlb21ldHJ5IiwiYmFja2dyb3VuZENvbG9yIiwidGFiTWF0ZXJpYWwiLCJ0YWJHZW5lcmFsIiwidGFicyIsImdlb21ldHJ5UGFyYW1ldGVycyIsIm1hdGVyaWFsUGFyYW1ldGVycyIsImdlbmVyYWxQYXJhbWV0ZXJzIiwiY3JlYXRlUGFyYW1ldGVyc1Rvb2xiYXIiLCJtZXNoRWRpdEZvcm0iLCJtZXNoRWRpdEJ1dHRvbiIsIm1lc2hFZGl0RWxlbWVudHNGb3JtIiwic2VsZWN0ZWRFZGl0RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjaGFuZ2VBcHBTdGF0ZSIsInJlbW92ZU1lc2hIZWxwZXJzIiwibWVzaEVkaXRWZXJ0ZXgiLCJtZXNoRWRpdEVkZ2VzIiwibWVzaEVkaXRGYWNlcyIsImNyZWF0ZU1lc2hFZGl0VG9vYmFyIiwiZWxlbWVudE5hbWUiLCJmdW5jIiwiZG9tIiwic3JjIiwibGFiZWwiLCJmaWxlQnJvd3NlciIsInJhZGlvIiwiaHRtbEZvciIsImNoZWNrYm94IiwiY29udGFpbmVyTmFtZSIsImRpdkdlb21ldHJ5IiwiZWxlbSIsInBhcmFtZXRlcnNBcnJheSIsImVudHJpZXMiLCJyb3dEaXYiLCJpbnB1dCIsIm9wdGlvbiIsInN0ZXAiLCJ0b1VwcGVyQ2FzZSIsImZpbGxHZW9tZXRyeVBhcmFtZXRlcnNUYWIiLCJkaXZNYXRlcmlhbCIsImVsZW1NYXRlcmlhbCIsIm1hdGVyaWFsVHlwZXMiLCJpbnB1dE1hdGVyaWFsVHlwZSIsImRpc2FibGVkIiwiYWRkUGFyYW1ldGVyc1JvdyIsImlucHV0TWF0ZXJpYWxDb2xvciIsImdldElucHV0IiwiZ2V0SGV4U3RyaW5nIiwidXBkYXRlQ29sb3JDb21wb25lbnRzSW5wdXRzU2xpZGVyIiwidXBkYXRlQ29sb3JDb21wb25lbnRzSW5wdXRzIiwicGFyYW1ldGVyc01hdGVyaWFsIiwiaW5wdXROdW1iZXIiLCJuYW1lT2ZQYXJhbWV0ZXIiLCJ1cGRhdGVDb2xvcklucHV0IiwiaW5wdXRTbGlkZXIiLCJnIiwiZmlsbE1hdGVyaWFsUGFyYW1ldGVyc1RhYiIsImRpdkdlbmVyYWwiLCJlbGVtR2VuZXJhbCIsInJvd1VVSUQiLCJwYXJhbWV0ZXJzR2VuZXJhbCIsInZhbHVlT2ZQYXJhbWV0ZXIiLCJmaWxsR2VuZXJhbFBhcmFtZXRlcnNUYWIiLCJpbnB1dFR5cGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJvd3MiLCJkZWxldGVHZW9tZXRyeVBhcmFtZXRlcnNUYWIiLCJCdXR0b24iLCJzZXRQYW5lbCIsIm9uQ2xpY2siLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJoZWFkZXJzIiwiTWF0Q2FwcyIsIlRleHR1cmVzIiwiTW9kZWxzIiwiTWF0Y2FwIiwicHJvcHMiLCJ1c2VTdGF0ZSIsImRyYWdNb2RlRW5hYmxlZCIsInNldERyYWdNb2RlIiwibmV3WCIsInNldE5ld1giLCJuZXdZIiwic2V0TmV3WSIsImNhcmRzRGl2Iiwic2V0Q2FyZHNEaXYiLCJjbGlja1BvaW50Iiwic2V0Q2xpY2tQb2ludCIsInNlbGVjdGVkQ2FyZCIsInVzZUNvbnRleHQiLCJNYXRjYXBDb250ZXh0Iiwib25Nb3VzZU1vdmUiLCJwYWdlWCIsInBhZ2VZIiwiZG9jdW1lbnRFbGVtZW50IiwiYnV0dG9ucyIsImJsb2NrT2Zmc2V0IiwidXNlRWZmZWN0Iiwib25Nb3VzZVVwIiwib25Nb3VzZURvd24iLCJibG9ja1N0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcmVudE5vZGUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBhbmVsIiwib25DaGFuZ2UiLCJBZGRQYW5lbCIsImJ0biIsIk1hdGNhYkNhcmQiLCJzZXRJbWFnZSIsIkRlYnVnZ2luZ1BhbmVsIiwic2V0U3RhdGUiLCJhcHBTdGF0ZXMiLCJzZXRBcHBTdGF0ZXMiLCJhcHBTdGF0ZXNBcnIiLCJTdHJpbmciLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJSZWFjdFBhbmVsIiwibWF0Y2FiQ2FyZHMiLCJtYXRjYXBJbWFnZXMiLCJjYXJkc182NCIsImNhcmQiLCJ0b1N0cmluZyIsInNldFNlbGVjdGVkQ2FyZCIsIlByb3ZpZGVyIiwiSHR0cCIsImZldGNoIiwibWV0aG9kIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJqc29uIiwiYW5zd2VyIiwiYXV0aCIsInVzZXJOYW1lIiwidXNlcklkIiwibWVzc2FnZSIsImNyZWRlbnRpYWxzIiwicmVzIiwiaHR0cCIsIlJlZ2lzdHJhdGlvbiIsImhpc3RvcnkiLCJoaWRlIiwicGFzc3dvcmRSZWYiLCJ1c2VSZWYiLCJjb25maXJtUGFzc3dvcmRSZWYiLCJlbWFpbCIsInBhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwic2V0Rm9ybSIsImVycm9yTWVzc2FnZSIsInNldEVycm9yTWVzc2FnZSIsInN1Y2Nlc3NSZWdpc3RlciIsInNldFN1Y2Nlc3NSZWdpc3RlciIsImNsb3NlT25Fc2NhcGUiLCJvbkNsb3NlRm9ybSIsIm9uSW5wdXRDaGFuZ2UiLCJvblN1Ym1pdCIsInJlZ2lzdGVyIiwib25Mb2dpbiIsImxvZ28iLCJhbHQiLCJwbGFjZWhvbGRlciIsInJlZiIsIkxvZ2luIiwiaGlkZUZvcm0iLCJsb2dpbiIsIkF1dGhlbnRpY2F0aW9uIiwiaGlkZGVuIiwic2V0SGlkZGVuIiwidmFsIiwicGF0aCIsIlVzZXJNZW51Iiwic2hvd1VzZXJtZW51IiwiZm9ybVJlZiIsIm9uTW91c2VsZWF2ZSIsImxvZ291dCIsIkF1dGhJbk1haW5NZW51IiwiaXNBdXRoIiwic2V0aXNBdXRoIiwidXNlck1lbnVWaXNpYmxlIiwic2V0VXNlck1lbnVWaXNpYmxlIiwidW5sb2dnZWQiLCJ0byIsImxvZ2dlZEluIiwiTWF0Y2FwSW1hZ2VzIiwiaW1hZ2VzXzY0IiwiaW1wb3J0QWxsIiwicmVxdWlyZSIsImNyZWF0ZUNhcmRzIiwiaW1hZ2VzIiwiY2FyZHMiLCJjb250YWluZXIiLCJ1bm8iLCJkb3MiLCJ0cmVzIiwiY3VhdHJvIiwiY3JlYXRlTG9hZGVyIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImNoZWNrQXV0aCIsIlJlYWN0RE9NIiwiU3RyaWN0TW9kZSIsImluaXQiLCJjcmVhdGVTY2VuZSIsImZpbGxNYWluVG9vbGJhciJdLCJtYXBwaW5ncyI6ImFBQ0UsU0FBU0EsRUFBcUJDLEdBUTdCLElBUEEsSUFNSUMsRUFBVUMsRUFOVkMsRUFBV0gsRUFBSyxHQUNoQkksRUFBY0osRUFBSyxHQUNuQkssRUFBaUJMLEVBQUssR0FJSE0sRUFBSSxFQUFHQyxFQUFXLEdBQ3BDRCxFQUFJSCxFQUFTSyxPQUFRRixJQUN6QkosRUFBVUMsRUFBU0csR0FDaEJHLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtDLEVBQWlCWCxJQUFZVyxFQUFnQlgsSUFDcEZLLEVBQVNPLEtBQUtELEVBQWdCWCxHQUFTLElBRXhDVyxFQUFnQlgsR0FBVyxFQUU1QixJQUFJRCxLQUFZRyxFQUNaSyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLUixFQUFhSCxLQUNwRGMsRUFBUWQsR0FBWUcsRUFBWUgsSUFLbEMsSUFGR2UsR0FBcUJBLEVBQW9CaEIsR0FFdENPLEVBQVNDLFFBQ2RELEVBQVNVLE9BQVRWLEdBT0QsT0FIQVcsRUFBZ0JKLEtBQUtLLE1BQU1ELEVBQWlCYixHQUFrQixJQUd2RGUsSUFFUixTQUFTQSxJQUVSLElBREEsSUFBSUMsRUFDSWYsRUFBSSxFQUFHQSxFQUFJWSxFQUFnQlYsT0FBUUYsSUFBSyxDQUcvQyxJQUZBLElBQUlnQixFQUFpQkosRUFBZ0JaLEdBQ2pDaUIsR0FBWSxFQUNSQyxFQUFJLEVBQUdBLEVBQUlGLEVBQWVkLE9BQVFnQixJQUFLLENBQzlDLElBQUlDLEVBQVFILEVBQWVFLEdBQ0csSUFBM0JYLEVBQWdCWSxLQUFjRixHQUFZLEdBRTNDQSxJQUNGTCxFQUFnQlEsT0FBT3BCLElBQUssR0FDNUJlLEVBQVNNLEVBQW9CQSxFQUFvQkMsRUFBSU4sRUFBZSxLQUl0RSxPQUFPRCxFQUlSLElBQUlRLEVBQW1CLEdBS25CaEIsRUFBa0IsQ0FDckJpQixFQUFHLEdBR0FaLEVBQWtCLEdBR3RCLFNBQVNTLEVBQW9CMUIsR0FHNUIsR0FBRzRCLEVBQWlCNUIsR0FDbkIsT0FBTzRCLEVBQWlCNUIsR0FBVThCLFFBR25DLElBQUlDLEVBQVNILEVBQWlCNUIsR0FBWSxDQUN6Q0ssRUFBR0wsRUFDSGdDLEdBQUcsRUFDSEYsUUFBUyxJQVVWLE9BTkFoQixFQUFRZCxHQUFVVyxLQUFLb0IsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0osR0FHL0RLLEVBQU9DLEdBQUksRUFHSkQsRUFBT0QsUUFLZkosRUFBb0JPLEVBQUluQixFQUd4QlksRUFBb0JRLEVBQUlOLEVBR3hCRixFQUFvQlMsRUFBSSxTQUFTTCxFQUFTTSxFQUFNQyxHQUMzQ1gsRUFBb0JZLEVBQUVSLEVBQVNNLElBQ2xDNUIsT0FBTytCLGVBQWVULEVBQVNNLEVBQU0sQ0FBRUksWUFBWSxFQUFNQyxJQUFLSixLQUtoRVgsRUFBb0JnQixFQUFJLFNBQVNaLEdBQ1gsb0JBQVhhLFFBQTBCQSxPQUFPQyxhQUMxQ3BDLE9BQU8rQixlQUFlVCxFQUFTYSxPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RyQyxPQUFPK0IsZUFBZVQsRUFBUyxhQUFjLENBQUVlLE9BQU8sS0FRdkRuQixFQUFvQm9CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRbkIsRUFBb0JtQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUt6QyxPQUFPMEMsT0FBTyxNQUd2QixHQUZBeEIsRUFBb0JnQixFQUFFTyxHQUN0QnpDLE9BQU8rQixlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPbkIsRUFBb0JTLEVBQUVjLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ2QixFQUFvQjJCLEVBQUksU0FBU3RCLEdBQ2hDLElBQUlNLEVBQVNOLEdBQVVBLEVBQU9pQixXQUM3QixXQUF3QixPQUFPakIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUwsRUFBb0JTLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJYLEVBQW9CWSxFQUFJLFNBQVNnQixFQUFRQyxHQUFZLE9BQU8vQyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLMkMsRUFBUUMsSUFHekc3QixFQUFvQjhCLEVBQUksSUFFeEIsSUFBSUMsRUFBYUMsT0FBcUIsYUFBSUEsT0FBcUIsY0FBSyxHQUNoRUMsRUFBbUJGLEVBQVc1QyxLQUFLdUMsS0FBS0ssR0FDNUNBLEVBQVc1QyxLQUFPZixFQUNsQjJELEVBQWFBLEVBQVdHLFFBQ3hCLElBQUksSUFBSXZELEVBQUksRUFBR0EsRUFBSW9ELEVBQVdsRCxPQUFRRixJQUFLUCxFQUFxQjJELEVBQVdwRCxJQUMzRSxJQUFJVSxFQUFzQjRDLEVBSTFCMUMsRUFBZ0JKLEtBQUssQ0FBQyxHQUFHLElBRWxCTSxJLGtOQ3ZKVCxJQUFJMEMsRUFBTSxDQUNULHlDQUEwQyxHQUMxQyx5Q0FBMEMsR0FDMUMseUNBQTBDLEdBQzFDLHlDQUEwQyxHQUMxQyx5Q0FBMEMsR0FDMUMseUNBQTBDLElBSTNDLFNBQVNDLEVBQWVDLEdBQ3ZCLElBQUlDLEVBQUtDLEVBQXNCRixHQUMvQixPQUFPckMsRUFBb0JzQyxHQUU1QixTQUFTQyxFQUFzQkYsR0FDOUIsSUFBSXJDLEVBQW9CWSxFQUFFdUIsRUFBS0UsR0FBTSxDQUNwQyxJQUFJRyxFQUFJLElBQUlDLE1BQU0sdUJBQXlCSixFQUFNLEtBRWpELE1BREFHLEVBQUVFLEtBQU8sbUJBQ0hGLEVBRVAsT0FBT0wsRUFBSUUsR0FFWkQsRUFBZU8sS0FBTyxXQUNyQixPQUFPN0QsT0FBTzZELEtBQUtSLElBRXBCQyxFQUFlUSxRQUFVTCxFQUN6QmxDLEVBQU9ELFFBQVVnQyxFQUNqQkEsRUFBZUUsR0FBSyxJLGdDQzNCcEIsT0FBZSxjQUEwQix3QyxnQ0NBekMsT0FBZSxjQUEwQix3QyxnQ0NBekMsT0FBZSxjQUEwQix3QyxnQ0NBekMsT0FBZSxjQUEwQix3QyxnQ0NBekMsT0FBZSxjQUEwQix3QyxnQ0NBekMsT0FBZSxjQUEwQix3QyxrTkNXbkNPLEUsV0FDSixhQUFjLFlBQ1osSUFBSUMsRUFBY0MsS0FFbEJBLEtBQUtDLGVBQWlCLFNBQVVDLEVBQWNDLEdBQzVDLElBQUlDLEVBQVcsSUFBSUMsRUFBTUgsR0FFekJGLEtBQUtNLFlBQVlILEVBQVFDLEVBQVNHLFlBRWxDLElBQUlDLEVBQWN6RSxPQUFPMEUsT0FBT04sR0FJaEMsT0FGQUMsRUFBVyxJQUFJQyxFQUFNSCxHQUFiLElBQThCTSxLQUt4Q1IsS0FBS00sWUFBYyxTQUFVSSxFQUFlQyxHQUMxQyxHQUFNRCxhQUF5QjNFLE9BTy9CLEdBQU00RSxhQUEwQjVFLE9BQWhDLENBT0EsSUFBSVQsRUFBTyxHQUdYLElBQUssSUFBTW9ELEtBRlgzQyxPQUFPNkUsT0FBT3RGLEVBQU1xRixHQUVGckYsRUFDWG9GLEVBQWN6RSxlQUFleUMsUUFHTG1DLElBQXZCSCxFQUFjaEMsSUFBNkMsS0FBdkJnQyxFQUFjaEMsSUFDcERvQyxRQUFRQyxLQUFLLElBQU1yQyxFQUFNLGFBSDNCb0MsUUFBUUMsS0FBSyxjQUFnQnJDLEVBQU0sc0JBWHJDb0MsUUFBUUUsTUFDTix5RUFBNkRiLE9BQTdELGdCQUE2REEsZUFSL0RXLFFBQVFFLE1BQ04sd0VBQTREYixPQUE1RCxnQkFBNERBLFdBMEJsRUgsS0FBS2lCLFVBQVksU0FBVUMsRUFBR0MsRUFBR0MsRUFBR0MsRUFBT0MsRUFBUUMsRUFBT0MsR0FDeEQsSUFBSXJCLEVBQVMsQ0FDWGtCLE1BQU9BLEVBQ1BDLE9BQVFBLEVBQ1JDLE1BQU9BLEVBQ1BFLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGNBQWUsR0FHYnZCLEVBQVdKLEtBQUtDLGVBQWUsb0JBQXFCRSxHQUVuREMsR0FDSFUsUUFBUUUsTUFBTSx3Q0FHaEIsSUFBSVksRUFBTSxJQUFJdkIsT0FBV0QsRUFBVW9CLEdBTW5DLE9BSkFJLEVBQUlDLFNBQVNYLEVBQUlBLEVBQ2pCVSxFQUFJQyxTQUFTVixFQUFJQSxFQUNqQlMsRUFBSUMsU0FBU1QsRUFBSUEsRUFFVlEsR0FFVDVCLEtBQUs4QixhQUFlLFNBQVVaLEVBQUdDLEVBQUdDLEVBQUdXLEVBQVFDLEVBQVVSLEdBQ3ZELElBQUlyQixFQUFTLENBQ1g0QixPQUFRQSxFQUNSTixjQUFlTyxFQUNmTixlQUFnQk0sRUFDaEJDLFNBQVUsRUFDVkMsVUFBcUIsRUFBVkMsS0FBS0MsR0FDaEJDLFdBQVksRUFDWkMsWUFBYUgsS0FBS0MsSUFFaEJoQyxFQUFXSixLQUFLQyxlQUFlLHVCQUF3QkUsR0FFdERDLEdBQ0hVLFFBQVFFLE1BQU0sd0NBR2hCLElBQUl1QixFQUFTLElBQUlsQyxPQUFXRCxFQUFVb0IsR0FLdEMsT0FKQWUsRUFBT1YsU0FBU1gsRUFBSUEsRUFDcEJxQixFQUFPVixTQUFTVixFQUFJQSxFQUNwQm9CLEVBQU9WLFNBQVNULEVBQUlBLEVBRWJtQixHQUdUdkMsS0FBS3dDLGFBQWUsU0FBVXRCLEVBQUdDLEVBQUdDLEVBQUdXLEVBQVFDLEVBQVVSLEdBQ3ZELElBQUlyQixFQUFTLENBQ1g0QixPQUFRQSxFQUNSQyxTQUFVQSxFQUNWSyxXQUFZLEVBQ1pDLFlBQWEsRUFBSUgsS0FBS0MsSUFFcEJoQyxFQUFXSixLQUFLQyxlQUFlLHVCQUF3QkUsR0FFdERDLEdBQ0hVLFFBQVFFLE1BQU0sd0NBR2hCLElBQUl5QixFQUFTLElBQUlwQyxPQUFXRCxFQUFVb0IsR0FLdEMsT0FKQWlCLEVBQU9aLFNBQVNYLEVBQUlBLEVBQ3BCdUIsRUFBT1osU0FBU1YsRUFBSUEsRUFDcEJzQixFQUFPWixTQUFTVCxFQUFJQSxFQUVicUIsR0FHVHpDLEtBQUswQyxXQUFhLFNBQ2hCeEIsRUFDQUMsRUFDQUMsRUFDQVcsRUFDQVQsRUFDQXFCLEVBQ0FqQixFQUNBRixHQUVBLElBQUlyQixFQUFTLENBQ1g0QixPQUFRQSxFQUNSVCxPQUFRQSxFQUNScUIsZUFBZ0JBLEVBQ2hCakIsZUFBZ0JBLEVBQ2hCa0IsV0FBVyxFQUNYUCxXQUFZLEVBQ1pDLFlBQWEsRUFBSUgsS0FBS0MsSUFFcEJoQyxFQUFXSixLQUFLQyxlQUFlLHFCQUFzQkUsR0FFcERDLEdBQ0hVLFFBQVFFLE1BQU0sd0NBR2hCLElBQUk2QixFQUFPLElBQUl4QyxPQUFXRCxFQUFVb0IsR0FLcEMsT0FKQXFCLEVBQUtoQixTQUFTWCxFQUFJQSxFQUNsQjJCLEVBQUtoQixTQUFTVixFQUFJQSxFQUNsQjBCLEVBQUtoQixTQUFTVCxFQUFJQSxFQUVYeUIsR0FHVDdDLEtBQUs4QyxlQUFpQixTQUNwQjVCLEVBQ0FDLEVBQ0FDLEVBQ0EyQixFQUNBQyxFQUNBMUIsRUFDQXFCLEVBQ0FqQixFQUNBRixHQUVBLElBQUlyQixFQUFTLENBQ1g0QyxVQUFXQSxFQUNYQyxhQUFjQSxFQUNkMUIsT0FBUUEsRUFDUnFCLGVBQWdCQSxFQUNoQmpCLGVBQWdCQSxFQUNoQmtCLFdBQVcsRUFDWFAsV0FBWSxFQUNaQyxZQUFhLEVBQUlILEtBQUtDLElBRXBCaEMsRUFBV0osS0FBS0MsZUFBZSx5QkFBMEJFLEdBRXhEQyxHQUNIVSxRQUFRRSxNQUFNLHdDQUdoQixJQUFJaUMsRUFBVyxJQUFJNUMsT0FBV0QsRUFBVW9CLEdBS3hDLE9BSkF5QixFQUFTcEIsU0FBU1gsRUFBSUEsRUFDdEIrQixFQUFTcEIsU0FBU1YsRUFBSUEsRUFDdEI4QixFQUFTcEIsU0FBU1QsRUFBSUEsRUFFZjZCLEdBR1RqRCxLQUFLa0QsbUJBQXFCLFNBQVVoQyxFQUFHQyxFQUFHQyxFQUFHVyxFQUFRb0IsRUFBUTNCLEdBQzNELElBQUlyQixFQUFTLENBQ1g0QixPQUFRQSxFQUNSb0IsT0FBUUEsR0FFTi9DLEVBQVdKLEtBQUtDLGVBQWUsNkJBQThCRSxHQUU1REMsR0FDSFUsUUFBUUUsTUFBTSx3Q0FHaEIsSUFBSW9DLEVBQWUsSUFBSS9DLE9BQVdELEVBQVVvQixHQUs1QyxPQUpBNEIsRUFBYXZCLFNBQVNYLEVBQUlBLEVBQzFCa0MsRUFBYXZCLFNBQVNWLEVBQUlBLEVBQzFCaUMsRUFBYXZCLFNBQVNULEVBQUlBLEVBRW5CZ0MsR0FHVHBELEtBQUtxRCxrQkFBb0IsU0FBVW5DLEVBQUdDLEVBQUdDLEVBQUdXLEVBQVFvQixFQUFRM0IsR0FDMUQsSUFBSXJCLEVBQVMsQ0FDWDRCLE9BQVFBLEVBQ1JvQixPQUFRQSxHQUVOL0MsRUFBV0osS0FBS0MsZUFBZSw0QkFBNkJFLEdBRTNEQyxHQUNIVSxRQUFRRSxNQUFNLHdDQUdoQixJQUFJc0MsRUFBYyxJQUFJakQsT0FBV0QsRUFBVW9CLEdBSzNDLE9BSkE4QixFQUFZekIsU0FBU1gsRUFBSUEsRUFDekJvQyxFQUFZekIsU0FBU1YsRUFBSUEsRUFDekJtQyxFQUFZekIsU0FBU1QsRUFBSUEsRUFFbEJrQyxHQUdUdEQsS0FBS3VELGlCQUFtQixTQUFVckMsRUFBR0MsRUFBR0MsRUFBR1csRUFBUW9CLEVBQVEzQixHQUN6RCxJQUFJckIsRUFBUyxDQUNYNEIsT0FBUUEsRUFDUm9CLE9BQVFBLEdBRU4vQyxFQUFXSixLQUFLQyxlQUFlLDJCQUE0QkUsR0FFMURDLEdBQ0hVLFFBQVFFLE1BQU0sd0NBR2hCLElBQUl3QyxFQUFhLElBQUluRCxPQUFXRCxFQUFVb0IsR0FLMUMsT0FKQWdDLEVBQVczQixTQUFTWCxFQUFJQSxFQUN4QnNDLEVBQVczQixTQUFTVixFQUFJQSxFQUN4QnFDLEVBQVczQixTQUFTVCxFQUFJQSxFQUVqQm9DLEdBR1R4RCxLQUFLeUQsWUFBYyxTQUNqQnZDLEVBQ0FDLEVBQ0FDLEVBQ0FXLEVBQ0EyQixFQUNBZixFQUNBZ0IsRUFDQW5DLEdBRUEsSUFBSXJCLEVBQVMsQ0FDWDRCLE9BQVFBLEVBQ1IyQixLQUFNQSxFQUNOZixlQUFnQkEsRUFDaEJnQixnQkFBaUJBLEVBQ2pCQyxJQUFLLEVBQUl6QixLQUFLQyxJQUdaaEMsRUFBV0osS0FBS0MsZUFBZSxzQkFBdUJFLEdBRXJEQyxHQUNIVSxRQUFRRSxNQUFNLHdDQUdoQixJQUFJNkMsRUFBUSxJQUFJeEQsT0FBV0QsRUFBVW9CLEdBS3JDLE9BSkFxQyxFQUFNaEMsU0FBU1gsRUFBSUEsRUFDbkIyQyxFQUFNaEMsU0FBU1YsRUFBSUEsRUFDbkIwQyxFQUFNaEMsU0FBU1QsRUFBSUEsRUFFWnlDLEdBR1Q3RCxLQUFLOEQsa0JBQW9CLFNBQVU1QyxFQUFHQyxFQUFHQyxFQUFHVyxFQUFRb0IsRUFBUTNCLEdBQzFELElBQUlyQixFQUFTLENBQ1g0QixPQUFRQSxFQUNSb0IsT0FBUUEsR0FHTi9DLEVBQVdKLEtBQUtDLGVBQWUsNEJBQTZCRSxHQUUzREMsR0FDSFUsUUFBUUUsTUFBTSx3Q0FHaEIsSUFBSStDLEVBQWMsSUFBSTFELE9BQVdELEVBQVVvQixHQUszQyxPQUpBdUMsRUFBWWxDLFNBQVNYLEVBQUlBLEVBQ3pCNkMsRUFBWWxDLFNBQVNWLEVBQUlBLEVBQ3pCNEMsRUFBWWxDLFNBQVNULEVBQUlBLEVBRWxCMkMsR0FLVC9ELEtBQUtnRSxXQUFhLFNBQVU5QyxFQUFHQyxFQUFHQyxFQUFHNkMsRUFBSUMsRUFBSUMsRUFBSUMsRUFBT0MsR0FDdEQsSUFBSTdDLEVBQ0osT0FBUTZDLEdBQ04sSUFBSyxTQUNIN0MsRUFBVyxJQUFJbkIscUJBQXlCLENBQ3RDK0QsTUFBTyxJQUFJL0QsUUFBWStELEdBQ3ZCRSxTQUFVLEdBQ1ZDLFFBQVMsS0FFWCxNQUNGLElBQUssUUFDSC9DLEVBQVcsSUFBSW5CLG9CQUF3QixDQUNyQytELE1BQU8sSUFBSS9ELFFBQVkrRCxLQUUzQixRQUNFNUMsRUFBVyxJQUFJbkIsb0JBQXdCLENBQ3JDK0QsTUFBTyxJQUFJL0QsUUFBWStELEtBSTdCLElBQU1oRSxFQUFXLElBQUlDLFdBQ3JCRCxFQUFTb0UsU0FBU3BJLEtBQUssSUFBSWlFLFVBQWNhLEVBQUdDLEVBQUdDLElBQy9DaEIsRUFBU29FLFNBQVNwSSxLQUFLLElBQUlpRSxVQUFjNEQsRUFBSUMsRUFBSUMsSUFDakQsSUFBTU0sRUFBTyxJQUFJcEUsT0FBV0QsRUFBVW9CLEdBSXRDLE1BSGUsV0FBWDZDLEdBQ0ZJLEVBQUtDLHVCQUVBRCxHQUVUekUsS0FBSzJFLFlBQWMsU0FBVXpELEVBQUdDLEVBQUdDLEVBQUd3RCxHQUNwQyxJQUFJQyxFQUFXQyxTQUFTQyxjQUFjLE9BQ3RDRixFQUFTRyxVQUFZLFdBQ3JCSCxFQUFTSSxZQUFjTCxFQUN2QkMsRUFBU0ssTUFBTUMsVUFBWSxPQUMzQixJQUFJQyxFQUFjLElBQUlDLElBQVlSLEdBRWxDLE9BREFPLEVBQVl2RCxTQUFTeUQsSUFBSXBFLEVBQUdDLEVBQUdDLEdBQ3hCZ0UsR0FFVHBGLEtBQUt1RixZQUFjLFNBQVVqRSxFQUFRRCxHQUNuQyxJQUFJbUUsRUFBWSxJQUFJbkYsc0JBQTBCZ0IsRUFBT0MsR0FDakRtRSxFQUFnQixJQUFJcEYsb0JBQXdCLENBQzlDK0QsTUFBTyxJQUFJL0QsUUFBWSxhQUN2QnFGLGFBQWEsRUFDYkMsUUFBUyxFQUNUQyxLQUFNdkYsZUFHUixPQURZLElBQUlBLE9BQVdtRixFQUFXQyxJQUl4Q3pGLEtBQUs2RixhQUFlLFNBQVVDLEVBQWdCQyxHQVc1QyxPQVJBQSxFQUFpQmxILE9BQVNpSCxFQUUxQkMsRUFBaUJsSCxPQUFPbUgsSUFDdEJoRyxLQUFLaUcsa0JBQWtCRixFQUFpQmxILFVBRTlCLElBQUlxSCxHQUNWQyxxQkFBcUJMLEdBRXBCQyxHQUVUL0YsS0FBS29HLGdCQUFrQixTQUFVdkgsR0FDL0IsSUFBSXdILEVBQVksSUFBSWhHLGdCQUFvQnhCLEVBQU91QixVQUMzQ2tHLEVBQWlCLElBQUlqRyxlQUFtQmdHLEdBTzVDLE9BTkFDLEVBQWU5RSxTQUFTK0UsV0FBWSxFQUdwQ0QsRUFBZTlFLFNBQVM0QyxNQUFRLElBQUkvRCxRQUFZLFNBQ2hEaUcsRUFBZTNJLEtBQU8sWUFDdEIySSxFQUFlRSxNQUFNbEIsSUFBSSxNQUFPLE1BQU8sT0FDaENnQixHQUVUdEcsS0FBS2lHLGtCQUFvQixTQUFVcEgsR0FDakNBLEVBQU91QixTQUFTcUcscUJBQ2hCLElBQUk3RSxFQUFNLElBQUl2QixhQUNaeEIsRUFBT3VCLFNBQVNzRyxZQUNoQixJQUFJckcsUUFBWSxRQVNsQixPQVBBdUIsRUFBSWpFLEtBQU8sY0FFVyxJQUFsQmlFLEVBQUlBLElBQUkrRSxJQUFJdkYsSUFDZFEsRUFBSUEsSUFBSStFLElBQUl2RixHQUFLLEtBQ2pCUSxFQUFJQSxJQUFJZ0YsSUFBSXhGLEVBQUksTUFHWFEsR0FHVDVCLEtBQUs2RyxnQkFBa0IsU0FBVWQsR0FDL0IvRixLQUFLOEcsOEJBQThCZixFQUFpQmxILFFBRXBEa0gsRUFBaUJsSCxPQUFTLEtBQzFCa0gsRUFBaUJnQixlQUFpQixNQUdwQy9HLEtBQUs4Ryw4QkFBZ0MsU0FBVWpJLEdBQ3hCQSxFQUFPbUksU0FBU0MsUUFDbkMsU0FBQ0MsR0FBRCxNQUF3QixjQUFkQSxFQUFLdkosTUFBc0MsZ0JBQWR1SixFQUFLdkosUUFFL0J3SixTQUFRLFNBQUNDLEdBQ3RCdkksRUFBT3dJLE9BQU9ELE9BSWxCcEgsS0FBS3NILHFCQUF1QixTQUMxQkMsRUFDQUMsRUFDQUMsR0FFQSxJQUFJQyxFQUFPRCxFQUFPckgsU0FFZEQsRUFBUyxHQUNicEUsT0FBTzZFLE9BQU9ULEVBQVF1SCxFQUFLbkgsWUFDM0JKLEVBQU9vSCxHQUFpQkMsRUFFeEIsSUFBSUcsRUFBVTNILEtBQUtDLGVBQWV3SCxFQUFPckgsU0FBU3dILEtBQU16SCxHQUV4RHNILEVBQU9ySCxTQUFTeUgsVUFDaEJKLEVBQU9ySCxTQUFXdUgsRUFNbEIsSUFBSWpCLEVBQWNlLEVBQU9LLGdCQUFnQixlQUN6Q0wsRUFBT3JILFNBQVNxRyxxQkFDaEIsSUFBSXNCLEVBQWEsSUFBSTFILGFBQWlCb0gsRUFBT3JILFNBQVNzRyxhQUV6QixJQUF6QnFCLEVBQVduRyxJQUFJK0UsSUFBSXZGLElBQ3JCMkcsRUFBV25HLElBQUkrRSxJQUFJdkYsR0FBSyxLQUN4QjJHLEVBQVduRyxJQUFJZ0YsSUFBSXhGLEVBQUksTUFHekJzRixFQUFZOUUsSUFBTW1HLEVBQVduRyxLQUcvQjVCLEtBQUtnSSxhQUFlLFNBQVVULEVBQWVDLEVBQWdCQyxHQUMzRCxJQUFJQyxFQUFPRCxFQUFPckgsU0FFZEQsRUFBUyxHQUNicEUsT0FBTzZFLE9BQU9ULEVBQVF1SCxFQUFLbkgsWUFDM0JKLEVBQU9vSCxHQUFpQkMsRUFFeEIsSUFBSUcsRUFBVTNILEtBQUtDLGVBQWV3SCxFQUFPckgsU0FBU3dILEtBQU16SCxHQUV4RHNILEVBQU9ySCxTQUFTeUgsVUFDaEJKLEVBQU9ySCxTQUFXdUgsR0FHcEIzSCxLQUFLaUksWUFBYyxXQU9qQixPQU5rQixJQUFJNUgsUUFDcEI4QixLQUFLK0YsU0FDTC9GLEtBQUsrRixTQUNML0YsS0FBSytGLFdBTVRsSSxLQUFLbUksZUFBaUIsV0FDcEIsSUFJSTNHLEVBSkE0RyxFQUFRcEksS0FDWkEsS0FBS3FJLG9CQUFzQixLQUMzQnJJLEtBQUtzSSxxQkFBdUIsS0FDNUJ0SSxLQUFLdUksY0FBZ0IsS0FHckJ2SSxLQUFLd0ksYUFBZSxTQUFVbEssRUFBTW1LLEVBQU9DLEVBQU9DLEdBQ2hEUCxFQUFNRSxxQkFBdUIsSUFBSWpJLFVBQWNxSSxFQUFNeEgsRUFBR3dILEVBQU12SCxHQUM5RCxJQUdJRSxFQUhBSCxFQUFJbEIsS0FBS3FJLG9CQUFvQm5ILEVBQzdCQyxFQUFJbkIsS0FBS3FJLG9CQUFvQmxILEVBQzdCQyxFQUFJcEIsS0FBS3FJLG9CQUFvQmpILEVBRWpDLEdBQUlnSCxFQUFNRyxjQUFlLENBQ3ZCLElBQUlLLEVBQU1SLEVBQU1HLGNBQWMxRyxTQUMzQmdILFFBQ0FDLFFBQVFILEVBQVlJLFFBQ3ZCWCxFQUFNRSxxQkFBcUJwSCxFQUN4QjBILEVBQUkxSCxFQUFJakMsT0FBTytKLFdBQWMsRUFBSS9KLE9BQU8rSixXQUFhLEVBQ3hEWixFQUFNRSxxQkFBcUJuSCxHQUN0QnlILEVBQUl6SCxFQUFJbEMsT0FBT2dLLFlBQWUsRUFBS2hLLE9BQU9nSyxZQUFjLEVBQzdELElBQUlDLEVBQW9CUCxFQUFZUSxxQkFDbENSLEVBQVlJLE9BQ1pYLEVBQU1HLGNBQWMxRyxVQUVsQnVILEVBQ0QsSUFBYW5LLE9BQU9nSyxhQUNwQixJQUFhQyxFQUFrQjVILFFBTWxDRCxFQUFTLEVBSmlCLElBQUloQixVQUFjcUksRUFBTXhILEVBQUd3SCxFQUFNdkgsR0FDeEJrSSxXQUNqQ2pCLEVBQU1FLHNCQUVtQmMsT0FFM0IvSCxFQUFRLElBT1YsT0FKQUcsRUFBVyxJQUFJbkIsb0JBQXdCLENBQ3JDK0QsTUFBT3JFLEVBQVlrSSxnQkFHYjNKLEVBQUttSixRQUNYLElBQUssb0JBQ3dCLE9BQXZCekgsS0FBS3VJLGVBQ1B4SSxFQUFZaUksYUFBYSxRQUFTM0csRUFBT3JCLEtBQUt1SSxlQUM5Q3hJLEVBQVlpSSxhQUFhLFNBQVUzRyxFQUFPckIsS0FBS3VJLGVBQy9DeEksRUFBWWlJLGFBQWEsUUFBUzNHLEVBQU9yQixLQUFLdUksaUJBRTlDdkksS0FBS3VJLGNBQWdCeEksRUFBWWtCLFVBQy9CQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQSxFQUNBQSxFQUNBRyxHQUVGeEIsS0FBS3VJLGNBQWM1SyxLQUFPLE9BRTFCOEssRUFBTXpDLElBQUloRyxLQUFLdUksZ0JBR2pCLE1BRUYsSUFBSyx1QkFDd0IsT0FBdkJ2SSxLQUFLdUksY0FDUHhJLEVBQVlpSSxhQUFhLFNBQVUzRyxFQUFPckIsS0FBS3VJLGdCQUUvQ3ZJLEtBQUt1SSxjQUFnQnhJLEVBQVkrQixhQUMvQlosRUFDQUMsRUFDQUMsRUFDQUMsRUFDQSxHQUNBRyxHQUdGeEIsS0FBS3VJLGNBQWM1SyxLQUFPLFNBRTFCOEssRUFBTXpDLElBQUloRyxLQUFLdUksZ0JBR2pCLE1BRUYsSUFBSyx1QkFDd0IsT0FBdkJ2SSxLQUFLdUksY0FDUHhJLEVBQVlpSSxhQUFhLFNBQVUzRyxFQUFPckIsS0FBS3VJLGdCQUUvQ3ZJLEtBQUt1SSxjQUFnQnhJLEVBQVl5QyxhQUMvQnRCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0EsR0FDQUcsR0FHRnhCLEtBQUt1SSxjQUFjNUssS0FBTyxTQUUxQjhLLEVBQU16QyxJQUFJaEcsS0FBS3VJLGdCQUdqQixNQUVGLElBQUsscUJBQ3dCLE9BQXZCdkksS0FBS3VJLGVBQ1B4SSxFQUFZaUksYUFBYSxTQUFVM0csRUFBT3JCLEtBQUt1SSxlQUMvQ3hJLEVBQVlpSSxhQUFhLFNBQWtCLEVBQVIzRyxFQUFXckIsS0FBS3VJLGlCQUVuRHZJLEtBQUt1SSxjQUFnQnhJLEVBQVkyQyxXQUMvQnhCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ1EsRUFBUkEsRUFDQSxFQUNBLEVBQ0FHLEdBR0Z4QixLQUFLdUksY0FBYzVLLEtBQU8sT0FFMUI4SyxFQUFNekMsSUFBSWhHLEtBQUt1SSxnQkFHakIsTUFFRixJQUFLLHlCQUN3QixPQUF2QnZJLEtBQUt1SSxlQUNQeEksRUFBWWlJLGFBQWEsWUFBYTNHLEVBQU9yQixLQUFLdUksZUFDbER4SSxFQUFZaUksYUFDVixlQUNBM0csRUFDQXJCLEtBQUt1SSxlQUVQeEksRUFBWWlJLGFBQWEsU0FBa0IsRUFBUjNHLEVBQVdyQixLQUFLdUksaUJBRW5EdkksS0FBS3VJLGNBQWdCeEksRUFBWStDLGVBQy9CNUIsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUEsRUFDUSxFQUFSQSxFQUNBLEVBQ0EsRUFDQUcsR0FHRnhCLEtBQUt1SSxjQUFjNUssS0FBTyxXQUUxQjhLLEVBQU16QyxJQUFJaEcsS0FBS3VJLGdCQUdqQixNQUVGLElBQUssNkJBQ3dCLE9BQXZCdkksS0FBS3VJLGNBQ1B4SSxFQUFZaUksYUFBYSxTQUFVM0csRUFBT3JCLEtBQUt1SSxnQkFFL0N2SSxLQUFLdUksY0FBZ0J4SSxFQUFZbUQsbUJBQy9CaEMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQSxFQUNBRyxHQUdGeEIsS0FBS3VJLGNBQWM1SyxLQUFPLGVBRTFCOEssRUFBTXpDLElBQUloRyxLQUFLdUksZ0JBR2pCLE1BRUYsSUFBSyw0QkFDd0IsT0FBdkJ2SSxLQUFLdUksY0FDUHhJLEVBQVlpSSxhQUFhLFNBQVUzRyxFQUFPckIsS0FBS3VJLGdCQUUvQ3ZJLEtBQUt1SSxjQUFnQnhJLEVBQVlzRCxrQkFDL0JuQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBLEVBQ0FHLEdBR0Z4QixLQUFLdUksY0FBYzVLLEtBQU8sY0FFMUI4SyxFQUFNekMsSUFBSWhHLEtBQUt1SSxnQkFHakIsTUFFRixJQUFLLDJCQUN3QixPQUF2QnZJLEtBQUt1SSxjQUNQeEksRUFBWWlJLGFBQWEsU0FBVTNHLEVBQU9yQixLQUFLdUksZ0JBRS9DdkksS0FBS3VJLGNBQWdCeEksRUFBWXdELGlCQUMvQnJDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0EsRUFDQUcsR0FHRnhCLEtBQUt1SSxjQUFjNUssS0FBTyxhQUUxQjhLLEVBQU16QyxJQUFJaEcsS0FBS3VJLGdCQUdqQixNQUVGLElBQUssc0JBQ3dCLE9BQXZCdkksS0FBS3VJLGVBQ1B4SSxFQUFZaUksYUFBYSxTQUFVM0csRUFBT3JCLEtBQUt1SSxlQUMvQ3hJLEVBQVlpSSxhQUFhLE9BQVEzRyxFQUFRLEVBQUdyQixLQUFLdUksaUJBRWpEdkksS0FBS3VJLGNBQWdCeEksRUFBWTBELFlBQy9CdkMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUEsRUFBUSxHQUNSLEVBQ0EsR0FDQUcsR0FHRnhCLEtBQUt1SSxjQUFjNUssS0FBTyxRQUUxQjhLLEVBQU16QyxJQUFJaEcsS0FBS3VJLGdCQUdqQixNQUVGLElBQUssNEJBQ3dCLE9BQXZCdkksS0FBS3VJLGNBQ1B4SSxFQUFZaUksYUFBYSxTQUFVM0csRUFBT3JCLEtBQUt1SSxnQkFFL0N2SSxLQUFLdUksY0FBZ0J4SSxFQUFZK0Qsa0JBQy9CNUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQSxFQUNBRyxHQUdGeEIsS0FBS3VJLGNBQWM1SyxLQUFPLGNBRTFCOEssRUFBTXpDLElBQUloRyxLQUFLdUksa0JBV3ZCdkksS0FBS3NKLGFBQWUsV0FDbEJ0SixLQUFLdUksY0FBY2dCLFNBQVcsQ0FBRUMsZUFBZSxFQUFNQyxZQUFZLEdBSWpFekosS0FBS3FJLG9CQUFzQixLQUMzQnJJLEtBQUtzSSxxQkFBdUIsS0FDNUJ0SSxLQUFLdUksY0FBZ0IsTyxnREFLZm1CLEdBQ1YsR0FBSUEsRUFBUzNELGlCQUFpQmxILE9BQVEsQ0FDcEMsSUFBSThLLEVBQWlCRCxFQUFTM0QsaUJBQWlCbEgsT0FBT1UsR0FDdERTLEtBQUs4Ryw4QkFBOEI0QyxFQUFTM0QsaUJBQWlCbEgsUUFFN0QsSUFFSStLLEVBRmVGLEVBQVNqQixNQUFNb0IsY0FBY0YsR0FFbkJkLE9BQU0sR0FFbkNhLEVBQVNJLGtCQUFrQjFOLEtBQUt3TixHQUVoQ0YsRUFBU2pCLE1BQU16QyxJQUFJNEQsR0FFbkI1SixLQUFLNkYsYUFDSDZELEVBQVMzRCxpQkFBaUJsSCxPQUMxQjZLLEVBQVMzRCxrQkFJYixHQUFJMkQsRUFBUzNELGlCQUFpQmdFLGVBQWUvQyxTQUFTbEwsT0FBUyxFQU83RCxJQU5BLElBQUlrTyxFQUNGTixFQUFTM0QsaUJBQWlCZ0UsZUFBZS9DLFNBQVNsTCxPQUVoRG1PLEVBQ0ZQLEVBQVMzRCxpQkFBaUJnRSxlQUFlL0MsU0FFbENwTCxFQUFJb08sRUFBYyxFQUFHcE8sR0FBSyxFQUFHQSxJQUFLLENBQ3pDb0UsS0FBSzhHLDhCQUE4Qm1ELEVBQW9Cck8sSUFFdkQsSUFBSTJELEVBQUswSyxFQUFvQnJPLEdBQUcyRCxHQUM1QjJLLEVBQWVSLEVBQVNqQixNQUFNb0IsY0FBY3RLLEdBRWhEbUssRUFBU2pCLE1BQU0wQixPQUFPRixFQUFvQnJPLElBRTFDLElBQUlnTyxFQUFZTSxFQUFhckIsUUFFN0JhLEVBQVNqQixNQUFNekMsSUFBSTRELEdBRW5CRixFQUFTSSxrQkFBa0IxTixLQUFLd04sR0FFaENGLEVBQVMzRCxpQkFBaUJnRSxlQUFlSSxPQUFPRCxHQUVoREEsRUFBYWxFLElBQUloRyxLQUFLaUcsa0JBQWtCaUUsUyxLQzN3QnpDLFNBQVNFLEVBQWlCQyxHQUMvQkEsRUFBUUMsc0JBQXdCLFlBRTVCRCxFQUFRdEUsaUJBQWlCbEgsUUFDM0J3TCxFQUFRRSxrQkFBa0JKLE9BQU9FLEVBQVF0RSxpQkFBaUJsSCxRQUV4RHdMLEVBQVF0RSxpQkFBaUJnRSxlQUFlL0MsU0FBU2xMLE9BQVMsR0FDNUR1TyxFQUFRRSxrQkFBa0JKLE9BQU9FLEVBQVF0RSxpQkFBaUJnRSxnQkFFNURNLEVBQVFFLGtCQUFrQkMsUUFBUUgsRUFBUUMsdUJBRTFDRCxFQUFRL0wsS0FBS21NLE9BQVMsU0FDdEJKLEVBQVFLLGNBQWNDLGNBQWUsRUFHaEMsU0FBU0MsRUFBcUJQLEdBQ25DQSxFQUFRQyxzQkFBd0IsU0FDNUJELEVBQVF0RSxpQkFBaUJsSCxRQUMzQndMLEVBQVFFLGtCQUFrQkosT0FBT0UsRUFBUXRFLGlCQUFpQmxILFFBRXhEd0wsRUFBUXRFLGlCQUFpQmdFLGVBQWUvQyxTQUFTbEwsT0FBUyxHQUM1RHVPLEVBQVFFLGtCQUFrQkosT0FBT0UsRUFBUXRFLGlCQUFpQmdFLGdCQUU1RE0sRUFBUUUsa0JBQWtCQyxRQUFRSCxFQUFRQyx1QkFFMUNELEVBQVEvTCxLQUFLbU0sT0FBUyxTQUN0QkosRUFBUUssY0FBY0MsY0FBZSxFQUdoQyxTQUFTRSxFQUFrQlIsR0FDNUJBLEVBQVF0RSxpQkFBaUJsSCxRQUMzQndMLEVBQVFFLGtCQUFrQkosT0FBT0UsRUFBUXRFLGlCQUFpQmxILFFBRXhEd0wsRUFBUXRFLGlCQUFpQmdFLGVBQWUvQyxTQUFTbEwsT0FBUyxHQUM1RHVPLEVBQVFFLGtCQUFrQkosT0FBT0UsRUFBUXRFLGlCQUFpQmdFLGdCQUc1RE0sRUFBUUMsc0JBQXdCLFFBQ2hDRCxFQUFRRSxrQkFBa0JDLFFBQVFILEVBQVFDLHVCQUUxQ0QsRUFBUS9MLEtBQUttTSxPQUFTLFNBQ3RCSixFQUFRSyxjQUFjQyxjQUFlLEVBV2hDLFNBQVNHLEVBQWVDLEVBQVNWLEdBQ3RDLElBQUlXLEVBQWEsSUFBSWxMLEVBQ2pCbUwsRUFBUSxJQUFJL0UsRUFFWjZFLEdBR0VWLEVBQVF0RSxpQkFBaUJsSCxTQUd2QndMLEVBQVF0RSxpQkFBaUJsSCxPQUd6QndMLEVBQVF0RSxpQkFBaUJnRSxlQUFlL0MsU0FBU2xMLE9BS3JEa1AsRUFBV2xFLDhCQUE4QnVELEVBQVF0RSxpQkFBaUJsSCxTQUlwRXdMLEVBQVEvTCxLQUFLbU0sT0FBUyxHQUN0QkosRUFBUWEsYUFBYUMsV0FLckJGLEVBQU1HLFNBQVNDLGFBQWFDLEtBQUtDLFFBQ2pDTixFQUFNRyxTQUFTQyxhQUFhbkcsTUFBTXNHLFFBQVUsT0FDNUNuQixFQUFRL0wsS0FBS21NLE9BQVMsU0FDdEJKLEVBQVEvTCxLQUFLbUosT0FBUyxPQUVsQjRDLEVBQVF0RSxpQkFBaUJsSCxRQUMzQm1NLEVBQVduRixhQUNUd0UsRUFBUXRFLGlCQUFpQmxILE9BQ3pCd0wsRUFBUXRFLGtCQUdac0UsRUFBUWEsYUFBYU8sYUFDckJDLGNBQWN4RyxNQUFNeUcsT0FBUyxRQ2xHbEIsVUFBMEIsdUNDQTFCLE1BQTBCLHVDQ0FwQkMsRSxXQUNuQixhQUVFLEdBRlksWUFFUkEsRUFBYUMsTUFDZixPQUFPRCxFQUFhRSxTQUV0QkYsRUFBYUUsU0FBVzlMLEtBQ3hCNEwsRUFBYUMsT0FBUSxFQUdyQjdMLEtBQUsrTCxRQUFVLEcsNENBR1RwTyxFQUFNcU8sR0FDUGhNLEtBQUsrTCxRQUFRcE8sS0FDaEJxQyxLQUFLK0wsUUFBUXBPLEdBQVEsSUFHdkJxQyxLQUFLK0wsUUFBUXBPLEdBQU12QixLQUFLNFAsSyxxQ0FHWHJPLEVBQU1zTyxHQUNuQixJQUFLak0sS0FBSytMLFFBQVFwTyxHQUNoQixNQUFNLElBQUkrQixNQUFKLDJDQUE2Qy9CLEVBQTdDLG1CQUdScUMsS0FBSytMLFFBQVFwTyxHQUFRcUMsS0FBSytMLFFBQVFwTyxHQUFNc0osUUFDdEMsU0FBQytFLEdBQUQsT0FBY0EsR0FBWUMsTyxnQ0FJcEJ0TyxFQUFNckMsR0FDVDBFLEtBQUsrTCxRQUFRcE8sSUFJaEJxQyxLQUFLK0wsUUFBUXBPLEdBQU13SixTQUFRLFNBQUMrRSxHQUFELE9BQWNBLEVBQVM1USxVLEtDOUJsRDZRLEUsV0FDSixhQUVFLEdBRlksWUFFUkEsRUFBU04sTUFDWCxPQUFPTSxFQUFTTCxTQUVsQkssRUFBU0wsU0FBVzlMLEtBQ3BCbU0sRUFBU04sT0FBUSxFQUlqQjdMLEtBQUtvTSxhQUFlLElBQUlSLEVBQ3hCNUwsS0FBS3FNLE1BQVEsR0FDYnJNLEtBQUtzTSxRQUFVLENBQ2JoTyxLQUFNLEdBQ05pTyxVQUFVLEVBQ1Y5QixPQUFRLFNBQ1JoRCxPQUFRLE1BR1Z6SCxLQUFLd00sY0FBZ0IsQ0FDbkJsTyxLQUFNLEdBQ05nTSxzQkFBdUIsSUFHekJ0SyxLQUFLeU0sYUFBZSxHLG1EQUdQbk8sRUFBTStOLEdBQ25Cck0sS0FBSzBNLGFBQWFwTyxFQUFNK04sR0FDeEJyTSxLQUFLb00sYUFBYU8sVUFBVXJPLEVBQU0rTixLLG1DQUd2Qi9OLEVBQU0rTixHQUNqQnJNLEtBQUtxTSxNQUFNL04sR0FBUStOLEVBQ25Cck0sS0FBS29NLGFBQWFPLFVBQVUsa0JBQW1Cck8sRUFBTyxJQUFNK04sTyx5QkMxQjVETyxFQUFlLFNBQVVDLEVBQVVDLEVBQVNDLEdBQzlDLElBQUlDLEVBQVMsSUFBSUMsUUFDYkMsRUFBYSxJQUFJQyxZQUVqQkMsRUFBUyxJQUFJQyxVQUNiQyxFQUFVLElBQUlDLFVBQ2RDLEVBQWdCLElBQUlELFVBQ3BCRSxFQUFpQixJQUFJRixVQUNyQkcsRUFBaUIsSUFBSUMsVUFDckJDLEVBQWlCLEdBRWpCQyxFQUFZLEtBQ2RDLEVBQVcsS0FJVDFGLEVBQVFwSSxLQUVaLFNBQVNtTCxJQUNQNEIsRUFBWWdCLGlCQUFpQixZQUFhQyxHQUFxQixHQUMvRGpCLEVBQVlnQixpQkFBaUIsWUFBYUUsR0FBcUIsR0FDL0RsQixFQUFZZ0IsaUJBQWlCLFVBQVdHLEdBQXVCLEdBQy9EbkIsRUFBWWdCLGlCQUFpQixhQUFjRyxHQUF1QixHQUNsRW5CLEVBQVlnQixpQkFBaUIsWUFBYUksR0FBcUIsR0FDL0RwQixFQUFZZ0IsaUJBQWlCLGFBQWNLLEdBQXNCLEdBQ2pFckIsRUFBWWdCLGlCQUFpQixXQUFZTSxHQUFvQixHQUcvRCxTQUFTNUMsSUFDUHNCLEVBQVl1QixvQkFBb0IsWUFBYU4sR0FBcUIsR0FDbEVqQixFQUFZdUIsb0JBQW9CLFlBQWFMLEdBQXFCLEdBQ2xFbEIsRUFBWXVCLG9CQUFvQixVQUFXSixHQUF1QixHQUNsRW5CLEVBQVl1QixvQkFBb0IsYUFBY0osR0FBdUIsR0FDckVuQixFQUFZdUIsb0JBQW9CLFlBQWFILEdBQXFCLEdBQ2xFcEIsRUFBWXVCLG9CQUFvQixhQUFjRixHQUFzQixHQUNwRXJCLEVBQVl1QixvQkFBb0IsV0FBWUQsR0FBb0IsR0FXbEUsU0FBU0wsRUFBb0J0RixHQUMzQkEsRUFBTTZGLGlCQUVOLElBQUlDLEVBQU96QixFQUFZMEIsd0JBT3ZCLEdBTEFyQixFQUFPbE0sR0FBTXdILEVBQU1nRyxRQUFVRixFQUFLRyxNQUFRSCxFQUFLbk4sTUFBUyxFQUFJLEVBQzVEK0wsRUFBT2pNLElBQU91SCxFQUFNa0csUUFBVUosRUFBS0ssS0FBT0wsRUFBS2xOLE9BQVUsRUFBSSxFQUU3RDRMLEVBQVc0QixjQUFjMUIsRUFBUU4sR0FFN0JlLEdBQWF6RixFQUFNMkcsUUFTckIsT0FSSTdCLEVBQVc4QixJQUFJQyxlQUFlakMsRUFBUVEsSUFDeENLLEVBQVVoTSxTQUFTcU4sS0FDakIxQixFQUFjMkIsSUFBSTdCLEdBQVM4QixhQUFhMUIsU0FJNUN0RixFQUFNaUgsY0FBYyxDQUFFekgsS0FBTSxPQUFRL0ksT0FBUWdQLElBVTlDLEdBTEFELEVBQWU5UixPQUFTLEVBRXhCb1IsRUFBVzRCLGNBQWMxQixFQUFRTixHQUNqQ0ksRUFBV29DLGlCQUFpQnpDLEdBQVUsRUFBTWUsR0FFeENBLEVBQWU5UixPQUFTLEVBQUcsQ0FDN0JpUixFQUFZN0gsTUFBTXlHLE9BQVMsVUFFM0IsSUFBSTlNLEVBQVMrTyxFQUFlLEdBQUcvTyxPQUUvQm1PLEVBQU91Qyw4QkFDTHpDLEVBQVEwQyxrQkFBa0J4QyxFQUFPeUMsUUFDakNoQyxFQUFlaUMsc0JBQXNCN1EsRUFBTzhRLGNBRzFDN0IsSUFBYWpQLElBQ2Z1SixFQUFNaUgsY0FBYyxDQUFFekgsS0FBTSxVQUFXL0ksT0FBUUEsSUFHL0NpUCxFQUFXalAsUUFHSSxPQUFiaVAsSUFDRjFGLEVBQU1pSCxjQUFjLENBQUV6SCxLQUFNLFdBQVkvSSxPQUFRaVAsSUFFaERmLEVBQVk3SCxNQUFNeUcsT0FBUyxPQUMzQm1DLEVBQVcsTUFLakIsU0FBU0csRUFBb0J2RixHQUMzQkEsRUFBTTZGLGlCQUVOWCxFQUFlOVIsT0FBUyxFQUV4Qm9SLEVBQVc0QixjQUFjMUIsRUFBUU4sR0FDakNJLEVBQVdvQyxpQkFBaUJ6QyxHQUFVLEVBQU1lLEdBRXhDQSxFQUFlOVIsT0FBUyxJQUMxQitSLEdBQzJCLElBQXpCekYsRUFBTXdILGVBQTBCL0MsRUFBUyxHQUFLZSxFQUFlLEdBQUcvTyxPQUU5RHFPLEVBQVc4QixJQUFJQyxlQUFlakMsRUFBUVEsS0FDeENFLEVBQWVtQyxXQUFXaEMsRUFBVWlDLE9BQU9ILGFBQzNDckMsRUFDRzRCLEtBQUsxQixHQUNMMkIsSUFBSTFCLEVBQWVpQyxzQkFBc0I3QixFQUFVOEIsZUFHeEQ1QyxFQUFZN0gsTUFBTXlHLE9BQVMsT0FFM0J2RCxFQUFNaUgsY0FBYyxDQUFFekgsS0FBTSxZQUFhL0ksT0FBUWdQLEtBSXJELFNBQVNLLEVBQXNCeEYsR0FDN0JBLEVBQU02RixpQkFFRlYsSUFDRnpGLEVBQU1pSCxjQUFjLENBQUV6SCxLQUFNLFVBQVcvSSxPQUFRZ1AsSUFFL0NBLEVBQVksTUFHZGQsRUFBWTdILE1BQU15RyxPQUFTbUMsRUFBVyxVQUFZLE9BR3BELFNBQVNLLEVBQW9CekYsR0FDM0JBLEVBQU02RixpQkFDTjdGLEVBQVFBLEVBQU1xSCxlQUFlLEdBRTdCLElBQUl2QixFQUFPekIsRUFBWTBCLHdCQU92QixHQUxBckIsRUFBT2xNLEdBQU13SCxFQUFNZ0csUUFBVUYsRUFBS0csTUFBUUgsRUFBS25OLE1BQVMsRUFBSSxFQUM1RCtMLEVBQU9qTSxJQUFPdUgsRUFBTWtHLFFBQVVKLEVBQUtLLEtBQU9MLEVBQUtsTixPQUFVLEVBQUksRUFFN0Q0TCxFQUFXNEIsY0FBYzFCLEVBQVFOLEdBRTdCZSxHQUFhekYsRUFBTTJHLFFBU3JCLE9BUkk3QixFQUFXOEIsSUFBSUMsZUFBZWpDLEVBQVFRLElBQ3hDSyxFQUFVaE0sU0FBU3FOLEtBQ2pCMUIsRUFBYzJCLElBQUk3QixHQUFTOEIsYUFBYTFCLFNBSTVDdEYsRUFBTWlILGNBQWMsQ0FBRXpILEtBQU0sT0FBUS9JLE9BQVFnUCxJQU1oRCxTQUFTTyxFQUFxQjFGLEdBQzVCQSxFQUFNNkYsaUJBQ043RixFQUFRQSxFQUFNcUgsZUFBZSxHQUU3QixJQUFJdkIsRUFBT3pCLEVBQVkwQix3QkFFdkJyQixFQUFPbE0sR0FBTXdILEVBQU1nRyxRQUFVRixFQUFLRyxNQUFRSCxFQUFLbk4sTUFBUyxFQUFJLEVBQzVEK0wsRUFBT2pNLElBQU91SCxFQUFNa0csUUFBVUosRUFBS0ssS0FBT0wsRUFBS2xOLE9BQVUsRUFBSSxFQUU3RHNNLEVBQWU5UixPQUFTLEVBRXhCb1IsRUFBVzRCLGNBQWMxQixFQUFRTixHQUNqQ0ksRUFBV29DLGlCQUFpQnpDLEdBQVUsRUFBTWUsR0FFeENBLEVBQWU5UixPQUFTLElBQzFCK1IsR0FDMkIsSUFBekJ6RixFQUFNd0gsZUFBMEIvQyxFQUFTLEdBQUtlLEVBQWUsR0FBRy9PLE9BRWxFbU8sRUFBT3VDLDhCQUNMekMsRUFBUTBDLGtCQUFrQnhDLEVBQU95QyxRQUNqQ2hDLEVBQWVpQyxzQkFBc0I3QixFQUFVOEIsY0FHN0N6QyxFQUFXOEIsSUFBSUMsZUFBZWpDLEVBQVFRLEtBQ3hDRSxFQUFlbUMsV0FBV2hDLEVBQVVpQyxPQUFPSCxhQUMzQ3JDLEVBQ0c0QixLQUFLMUIsR0FDTDJCLElBQUkxQixFQUFlaUMsc0JBQXNCN0IsRUFBVThCLGVBR3hENUMsRUFBWTdILE1BQU15RyxPQUFTLE9BRTNCdkQsRUFBTWlILGNBQWMsQ0FBRXpILEtBQU0sWUFBYS9JLE9BQVFnUCxLQUlyRCxTQUFTUSxFQUFtQjNGLEdBQzFCQSxFQUFNNkYsaUJBRUZWLElBQ0Z6RixFQUFNaUgsY0FBYyxDQUFFekgsS0FBTSxVQUFXL0ksT0FBUWdQLElBRS9DQSxFQUFZLE1BR2RkLEVBQVk3SCxNQUFNeUcsT0FBUyxPQUc3QlIsSUFJQW5MLEtBQUsrTyxTQUFVLEVBQ2YvTyxLQUFLNFAsZ0JBQWlCLEVBRXRCNVAsS0FBS21MLFNBQVdBLEVBQ2hCbkwsS0FBS3lMLFdBQWFBLEVBQ2xCekwsS0FBSzZILFFBbkxMLFdBQ0U0RCxLQW1MRnpMLEtBQUtnUSxXQWhMTCxXQUNFLE9BQU9uRCxLQWtMWEQsRUFBYTVRLFVBQVlELE9BQU8wQyxPQUFPd1Isa0JBQWdCalUsWUFDaENrVSxZQUFjdEQsRSxJQ3BPL0J1RCxFLFdBQ0osYUFBYyxZQUNablEsS0FBS29RLGFBQWUsSUFBSUMsZUFBYSxJQUFJQyxRQUFNLFNBQVUsSUFFekR0USxLQUFLdVEsVUFBWSxJQUFJQyxZQUFVLElBQUlGLFFBQU0sU0FDekN0USxLQUFLdVEsVUFBVTFPLFNBQVN5RCxLQUFLLEVBQUcsRUFBRyxHQUduQ3RGLEtBQUt1USxVQUFVRSxZQUFhLEVBQzVCelEsS0FBS3VRLFVBQVVHLE9BQU9DLFFBQVF0UCxNQUFRLEtBQ3RDckIsS0FBS3VRLFVBQVVHLE9BQU9DLFFBQVFyUCxPQUFTLEtBQ3ZDdEIsS0FBS3VRLFVBQVVHLE9BQU8zSCxPQUFPNkgsS0FBTyxJQUNwQzVRLEtBQUt1USxVQUFVRyxPQUFPM0gsT0FBTzhILElBQU0sSUFDbkM3USxLQUFLdVEsVUFBVUcsT0FBTzNILE9BQU8rSCxJQUFNLEcscURBR3BCckksR0FDVkEsR0FBVUEsRUFBTXNJLFFBT3JCdEksRUFBTXpDLElBQUloRyxLQUFLb1EsY0FOYnRQLFFBQVFDLEtBQ04sZ0Usb0NBUVEwSCxHQUNQQSxHQUFVQSxFQUFNc0ksUUFPckJ0SSxFQUFNekMsSUFBSWhHLEtBQUt1USxXQU5ielAsUUFBUUMsS0FDTixnRSw4QkFRRTBILEdBQ0RBLEdBQVVBLEVBQU1zSSxTQU9yQnRJLEVBQU16QyxJQUFJaEcsS0FBS3VRLFdBQ2Y5SCxFQUFNekMsSUFBSWhHLEtBQUtvUSxlQVBidFAsUUFBUUMsS0FDTixnRSxnQ0FTSTBILEdBQ0hBLEdBQVVBLEVBQU1zSSxTQU9yQnRJLEVBQU1wQixPQUFPckgsS0FBS3VRLFdBQ2xCOUgsRUFBTXBCLE9BQU9ySCxLQUFLb1EsZUFQaEJ0UCxRQUFRQyxLQUNOLGtFLEtDL0NKaVEsRUFBYSxXQUNmaFIsS0FBS2lSLGNBQWdCLFdBQ25CalIsS0FBS2tSLG9CQUFzQixTQUFVQyxFQUFZMUksR0FDL0MsR0FBSTBJLEVBQVdyVixPQUFTLEVBQUcsQ0FDekIsSUFJSXNWLEVBQU9DLEVBQU9DLEVBQ2RDLEVBQVFDLEVBQVFDLEVBTGhCdlEsRUFBSWlRLEVBQVcsR0FBR08sTUFBTXhRLEVBQ3hCQyxFQUFJZ1EsRUFBVyxHQUFHTyxNQUFNdlEsRUFDeEJDLEVBQUkrUCxFQUFXLEdBQUdPLE1BQU10USxFQUt4QjRKLEVBQWEsSUFBSWxMLEVBRWpCNlIsRUFBZTNHLEVBQVdyRyxZQUFZekQsRUFBR0MsRUFBR0MsRUFBRyxJQUluRCxPQUhBdVEsRUFBYWhVLEtBQU8sZUFDcEI4SyxFQUFNekMsSUFBSTJMLEdBRUZSLEVBQVcsR0FBR3RTLE9BQU9sQixNQUMzQixJQUFLLGNBQ0hnVSxFQUFhdkssUUFBUXdLLFVBQ25CLE9BQ0F6UCxLQUFLMFAsTUFBVSxJQUFKelEsR0FBVyxJQUN0QixXQUNBZSxLQUFLMFAsTUFBVSxJQUFKMVEsR0FBVyxLQUV4QnNRLEVBQVN6RyxFQUFXckcsWUFBWSxFQUFHLEVBQUd2RCxFQUFHLEtBQ2xDekQsS0FBTyxlQUNkOFQsRUFBT3JLLFFBQVF3SyxVQUFZLE9BQVN6UCxLQUFLMFAsTUFBVSxJQUFKelEsR0FBVyxJQUMxRHFILEVBQU16QyxJQUFJeUwsSUFFVkQsRUFBU3hHLEVBQVdyRyxZQUFZLEVBQUd4RCxFQUFHLEVBQUcsS0FDbEN4RCxLQUFPLGVBQ2Q2VCxFQUFPcEssUUFBUXdLLFVBQVksT0FBU3pQLEtBQUswUCxNQUFVLElBQUoxUSxHQUFXLElBQzFEc0gsRUFBTXpDLElBQUl3TCxJQUVWRixFQUFRdEcsRUFBV2hILFdBQVc5QyxFQUFHQyxFQUFHQyxFQUFHRixFQUFHLEVBQUdFLEVBQUcsTUFBTyxXQUNqRHpELEtBQU8sZUFDYjhLLEVBQU16QyxJQUFJc0wsSUFFVkQsRUFBUXJHLEVBQVdoSCxXQUFXOUMsRUFBR0MsRUFBR0MsRUFBR0YsRUFBR0MsRUFBRyxFQUFHLE1BQU8sV0FDakR4RCxLQUFPLGVBQ2I4SyxFQUFNekMsSUFBSXFMLEdBRVYsTUFFRixJQUFLLGNBQ0hNLEVBQWF2SyxRQUFRd0ssVUFDbkIsUUFDQXpQLEtBQUswUCxNQUFVLElBQUozUSxHQUFXLElBQ3RCLFdBQ0FpQixLQUFLMFAsTUFBVSxJQUFKMVEsR0FBVyxLQUV4Qm9RLEVBQVN2RyxFQUFXckcsWUFBWXpELEVBQUcsRUFBRyxFQUFHLEtBQ2xDdkQsS0FBTyxlQUNkNFQsRUFBT25LLFFBQVF3SyxVQUFZLE9BQVN6UCxLQUFLMFAsTUFBVSxJQUFKM1EsR0FBVyxJQUMxRHVILEVBQU16QyxJQUFJdUwsSUFFVkMsRUFBU3hHLEVBQVdyRyxZQUFZLEVBQUd4RCxFQUFHLEVBQUcsS0FDbEN4RCxLQUFPLGVBQ2Q2VCxFQUFPcEssUUFBUXdLLFVBQVksT0FBU3pQLEtBQUswUCxNQUFVLElBQUoxUSxHQUFXLElBQzFEc0gsRUFBTXpDLElBQUl3TCxJQUVWSixFQUFRcEcsRUFBV2hILFdBQVc5QyxFQUFHQyxFQUFHQyxFQUFHRixFQUFHLEVBQUdFLEVBQUcsTUFBTyxXQUNqRHpELEtBQU8sZUFDYjhLLEVBQU16QyxJQUFJb0wsSUFFVkMsRUFBUXJHLEVBQVdoSCxXQUFXOUMsRUFBR0MsRUFBR0MsRUFBRyxFQUFHRCxFQUFHQyxFQUFHLE1BQU8sV0FDakR6RCxLQUFPLGVBQ2I4SyxFQUFNekMsSUFBSXFMLEdBRVYsTUFFRixJQUFLLGNBQ0hNLEVBQWF2SyxRQUFRd0ssVUFDbkIsT0FDQXpQLEtBQUswUCxNQUFVLElBQUozUSxHQUFXLElBQ3RCLFdBQ0FpQixLQUFLMFAsTUFBVSxJQUFKelEsR0FBVyxLQUV4Qm1RLEVBQVN2RyxFQUFXckcsWUFBWXpELEVBQUcsRUFBRyxFQUFHLEtBQ2xDdkQsS0FBTyxlQUNkNFQsRUFBT25LLFFBQVF3SyxVQUFZLE9BQVN6UCxLQUFLMFAsTUFBVSxJQUFKM1EsR0FBVyxJQUMxRHVILEVBQU16QyxJQUFJdUwsSUFFVkUsRUFBU3pHLEVBQVdyRyxZQUFZLEVBQUcsRUFBR3ZELEVBQUcsS0FDbEN6RCxLQUFPLGVBQ2Q4VCxFQUFPckssUUFBUXdLLFVBQVksT0FBU3pQLEtBQUswUCxNQUFVLElBQUp6USxHQUFXLElBQzFEcUgsRUFBTXpDLElBQUl5TCxJQUVWTCxFQUFRcEcsRUFBV2hILFdBQVc5QyxFQUFHQyxFQUFHQyxFQUFHRixFQUFHQyxFQUFHLEVBQUcsTUFBTyxXQUNqRHhELEtBQU8sZUFDYjhLLEVBQU16QyxJQUFJb0wsSUFFVkUsRUFBUXRHLEVBQVdoSCxXQUFXOUMsRUFBR0MsRUFBR0MsRUFBRyxFQUFHRCxFQUFHQyxFQUFHLE1BQU8sV0FDakR6RCxLQUFPLGVBQ2I4SyxFQUFNekMsSUFBSXNMLE1BVWxCdFIsS0FBSzhSLG9CQUFzQixTQUFVckosR0FDaEJBLEVBQU16QixTQUFTQyxRQUNoQyxTQUFDQyxHQUFELE1BQXdCLGlCQUFkQSxFQUFLdkosUUFFSndKLFNBQVEsU0FBQ0MsR0FDcEJxQixFQUFNcEIsT0FBT0QsUUFLbkJwSCxLQUFLK1IsV0FBYSxTQUFVdEosR0FFMUJ6SSxLQUFLZ1MsZ0JBQWtCLElBQUlDLGFBQ3pCLElBQ0EsSUFDQSxJQUFJM0IsUUFBTSxRQUNWLElBQUlBLFFBQU0sY0FFWnRRLEtBQUtnUyxnQkFBZ0JuUSxTQUFTVixFQUFJLEVBQ2xDbkIsS0FBS2dTLGdCQUFnQm5RLFNBQVNYLEVBQUksRUFHbENsQixLQUFLa1MsY0FBZ0IsSUFBSUQsYUFBVyxJQUFLLEdBQUksSUFBVSxJQUFJM0IsUUFBTSxTQUNqRXRRLEtBQUtrUyxjQUFjclEsU0FBU1YsRUFBSSxFQUNoQ25CLEtBQUtrUyxjQUFjclEsU0FBU1gsRUFBSSxFQUdoQ2xCLEtBQUttUyxnQkFBa0IsR0FFdkIsSUFBSUMsRUFBZ0IsSUFBSUMsc0JBQW9CLElBQUssS0FDN0NDLEVBQW9CLElBQUlDLG9CQUFrQixDQUM1Q25PLE1BQU8sSUFBSWtNLFFBQU0sYUFDakI1SyxhQUFhLEVBQ2JDLFFBQVMsRUFDVDZNLFVBQVcsR0FDWDVNLEtBQU02TSxlQUdKQyxFQUFjLElBQUlDLE9BQUtQLEVBQWVFLEdBRTFDSSxFQUFZL1UsS0FBTyxjQUNuQjhLLEVBQU16QyxJQUFJME0sR0FDVjFTLEtBQUttUyxnQkFBZ0IvVixLQUFLc1csR0FFMUIsSUFBSUUsRUFBYyxJQUFJRCxPQUFLUCxFQUFlRSxHQUMxQ00sRUFBWUMsU0FBUzFSLEVBQUssR0FBS2dCLEtBQUtDLEdBQU0sSUFDMUN3USxFQUFZalYsS0FBTyxjQUNuQjhLLEVBQU16QyxJQUFJNE0sR0FDVjVTLEtBQUttUyxnQkFBZ0IvVixLQUFLd1csR0FFMUIsSUFBSUUsRUFBYyxJQUFJSCxPQUFLUCxFQUFlRSxHQUMxQ1EsRUFBWUQsU0FBUzNSLEVBQUssR0FBS2lCLEtBQUtDLEdBQU0sSUFDMUMwUSxFQUFZblYsS0FBTyxjQUNuQjhLLEVBQU16QyxJQUFJOE0sR0FDVjlTLEtBQUttUyxnQkFBZ0IvVixLQUFLMFcsR0FFMUIsSUFDSUMsR0FEYSxJQUFJalQsR0FDTWtFLFdBQ3pCLEdBQ0MsSUFDRCxFQUNBLEVBQ0EsSUFDQSxFQUNBLE9BQ0EsU0FFRitPLEVBQVVwVixLQUFPLFFBQ2pCOEssRUFBTXpDLElBQUkrTSxHQUVWL1MsS0FBS2dULGNBQWdCLFNBQVV2SyxHQUN4QkEsR0FBVUEsRUFBTXNJLFFBT3JCdEksRUFBTXpDLElBQUloRyxLQUFLZ1MsaUJBTmJsUixRQUFRQyxLQUNOLCtEQVFOZixLQUFLaVQsWUFBYyxTQUFVeEssR0FDdEJBLEdBQVVBLEVBQU1zSSxRQU9yQnRJLEVBQU16QyxJQUFJaEcsS0FBS2tTLGVBTmJwUixRQUFRQyxLQUNOLCtEQVFOZixLQUFLa1QsUUFBVSxTQUFVekssR0FDbEJBLEdBQVVBLEVBQU1zSSxTQU9yQnRJLEVBQU16QyxJQUFJaEcsS0FBS2dTLGlCQUNmdkosRUFBTXpDLElBQUloRyxLQUFLa1MsZ0JBUGJwUixRQUFRQyxLQUNOLCtEQVNOZixLQUFLbVQsVUFBWSxTQUFVMUssR0FDcEJBLEdBQVVBLEVBQU1zSSxTQU9yQnRJLEVBQU1wQixPQUFPckgsS0FBS2dTLGlCQUNsQnZKLEVBQU1wQixPQUFPckgsS0FBS2tTLGdCQVBoQnBSLFFBQVFDLEtBQ04sZ0VBVVJmLEtBQUtvVCxnQkFBa0IsU0FBVTNLLEVBQU9NLEdBQ3RDLElBQUlzSyxFQUFTLElBQUlDLGVBQWF2SyxHQUM5Qk4sRUFBTXpDLElBQUlxTixLQ3RPUkUsRSxXQUNKLGFBQWMsWUFDWnZULEtBQUsrSSxPQUFTLElBQUl5SyxvQkFDaEIsR0FDQXZVLE9BQU8rSixXQUFhL0osT0FBT2dLLFlBQzNCLElBQ0EsS0FFRmpKLEtBQUsrSSxPQUFPbEgsU0FBU1QsRUFBSSxHQUN6QnBCLEtBQUsrSSxPQUFPbEgsU0FBU1YsRUFBSSxHQUN6Qm5CLEtBQUsrSSxPQUFPbEgsU0FBU1gsRUFBSSxHQUN6QmxCLEtBQUsrSSxPQUFPMEssT0FBTyxFQUFHLEVBQUcsRyxpREFJekIsT0FBT3pULEtBQUsrSSxTLDJDQUdPQSxFQUFRMkksR0FDM0IsSUFBSWdDLEVBQWtCLElBQUluRyxVQUMxQnhFLEVBQU95RyxrQkFBa0JrRSxHQUN6QixJQUFJQyxFQUFpQixJQUFJcEcsVUFDekJvRyxFQUFpQjVLLEVBQU9sSCxTQUFTZ0gsUUFDakMsSUFBSStLLEVBQVdsQyxFQUFNckksV0FBV3NLLEdBRWhDQSxFQUFlM04sSUFBSTBOLEVBQWdCRyxlQUFlRCxJQUVsRCxJQUFJRSxFQUFRLElBQUlDLFFBQU1oTCxFQUFPbEgsU0FBVThSLEdBRW5DSyxFQUFjLElBQUl6RyxVQUV0QnVHLEVBQU1HLG9CQUFvQnZDLEdBQU8sRUFBTXNDLEdBRXZDSixFQUFXSSxFQUFZM0ssV0FBV04sRUFBT2xILFVBRXpDLElBQUlxUyxFQUFRbkwsRUFBTytILElBQU0sRUFDckJxRCxFQUFjUCxFQUFXelIsS0FBS2lTLElBQUtGLEVBQVEvUixLQUFLQyxHQUFNLEtBQU8sRUFRakUsTUFMaUIsQ0FDZmQsT0FBUTZTLEVBQ1I5UyxNQUpnQjhTLEVBQWNwTCxFQUFPc0wsT0FBUyxPLEtDQXBELFNBQVNDLEVBQWVDLEdBQ3RCLElBQUtDLE1BQU1DLFFBQVFGLEdBQVMsT0FBTyxLQUVuQyxJQUFJRyxFQUFjSCxFQUFPelksT0FLekIsT0FIbUJ5WSxFQUFPSSxRQUFPLFNBQUNDLEVBQUtDLEdBQU4sT0FBa0JELEVBQUk1TyxJQUFJNk8sTUFDN0JDLGFBQWFKLEcsSUNEdkNLLEUsV0FDSixXQUFZOUosR0FFVixHQUZpQixZQUViOEosRUFBU2xKLE1BQ1gsT0FBT2tKLEVBQVNqSixTQUVsQmlKLEVBQVNqSixTQUFXOUwsS0FDcEIrVSxFQUFTbEosT0FBUSxFQUVqQjdMLEtBQUtpTCxNQUFRQSxFQUNiakwsS0FBS3lJLE1BQ0x6SSxLQUFLZ1YsY0FBZ0IsQ0FBRTlULEVBQUcsS0FBTUMsRUFBRyxNQUVuQ25CLEtBQUsxQixLQUFPLENBQ1ZtTSxPQUFRLFNBQ1JoRCxPQUFRLE1BR1Z6SCxLQUFLaVYsU0FBVyxJQUFJOUksRUFDcEJuTSxLQUFLa1YsT0FBUyxJQUFJdEosRUFFbEI1TCxLQUFLbVYsZUFBaUIsR0FFdEJuVixLQUFLOEosa0JBQW9CLEdBQ3pCOUosS0FBS29WLHNCQUF3QixHQUU3QnBWLEtBQUsrRixpQkFBbUIsQ0FDdEJsSCxPQUFRLEtBQ1JrSSxlQUFnQixLQUNoQmdELGVBQWdCLElBQUlzTCxTQUd0QnJWLEtBQUtzSyxzQkFBd0IsR0FFN0J0SyxLQUFLc1YsMEJBQTJCLEVBQ2hDdFYsS0FBS3VWLHNCQUF1QixFLGtEQVE1QixJQUFJbk4sRUFBUXBJLEtBRVJ5SSxFQUFRLElBQUkrTSxRQUNaQyxFQUFXLElBQUlDLGdCQUFjLENBQUVDLFdBQVcsSUFDMUNDLEVBQVksSUFBSUYsZ0JBQ2RHLEVBQVksSUFBSTFJLFlBRWxCeEUsRUFBYyxJQUFJNEssRUFDbEJ1QyxFQUFlLElBQUl2QyxFQUVuQjdILEVBQWdCLElBQUlxSyxJQUNwQkMsRUFBYyxJQUFJbFcsRUFDbEJtVyxFQUFpQixJQUFJRCxFQUFZN04sZUFFL0IrTixFQUFjLElBQUkvRixFQUNwQnBILEVBQVNKLEVBQVl3TixhQUNyQkMsRUFBVU4sRUFBYUssY0FDM0JDLEVBQVUsSUFBSTVDLG9CQUNaLEdBQ0ExTyxTQUFTdVIsZUFBZSxnQkFBZ0JDLFlBQ3RDeFIsU0FBU3VSLGVBQWUsZ0JBQWdCRSxhQUMxQyxJQUNBLE1BRU0xVSxTQUFTVCxFQUFJLEVBQ3JCZ1YsRUFBUXZVLFNBQVNWLEVBQUksSUFDckJpVixFQUFRdlUsU0FBU1gsRUFBSSxFQUNyQmtWLEVBQVEzQyxPQUFPLEVBQUcsRUFBRyxHQUNyQixJQUVNK0MsRUFBWSxLQUZFLElBQUl4RixHQUVVZSxZQUFXdEosR0FFN0NBLEVBQU16QyxJQUFJaEcsS0FBSytGLGlCQUFpQmdFLGdCQUVoQ3RCLEVBQU1nTyxXQUFhLElBQUluRyxRQUFNLFNBQzdCbUYsRUFBU2lCLFFBQVF6WCxPQUFPK0osV0FBWS9KLE9BQU9nSyxhQUMzQzJNLEVBQVVjLFFBQ1I1UixTQUFTdVIsZUFBZSxnQkFBZ0JDLFlBQ3hDeFIsU0FBU3VSLGVBQWUsZ0JBQWdCRSxjQUUxQzdLLEVBQWNnTCxRQUFRelgsT0FBTytKLFdBQVkvSixPQUFPZ0ssYUFDaER5QyxFQUFjaUwsV0FBV3pSLE1BQU1yRCxTQUFXLFdBQzFDNkosRUFBY2lMLFdBQVd6UixNQUFNMkosSUFBTSxFQUNyQ25ELEVBQWNpTCxXQUFXcFgsR0FBSyxnQkFFOUIyVyxFQUFZaEQsUUFBUXpLLEdBQ3BCK04sRUFBVXZELFlBQVl4SyxHQUd0QjNELFNBQVM4UixLQUFLQyxZQUFZcEIsRUFBU2tCLFlBRW5DN1IsU0FBU3VSLGVBQWUsZ0JBQWdCUSxZQUFZakIsRUFBVWUsWUFDOUQ3UixTQUFTOFIsS0FBS0MsWUFBWW5MLEVBQWNpTCxZQUV4QzNXLEtBQUswSyxjQUFnQixJQUFJb00sSUFBYy9OLEVBQVEyQyxFQUFjaUwsWUFDN0QzVyxLQUFLdUssa0JBQW9CLElBQUl3TSxJQUMzQmhPLEVBQ0EyQyxFQUFjaUwsWUFFaEJsTyxFQUFNekMsSUFBSWhHLEtBQUt1SyxtQkFDZnZLLEtBQUt1SyxrQkFBa0J3RCxpQkFBaUIsU0FBVWlKLEdBQ2xEaFgsS0FBS3VLLGtCQUFrQndELGlCQUFpQixVQUFVLGVBRWxEL04sS0FBSzBLLGNBQWNxRCxpQkFBaUIsU0FBUyxlQU03Qy9OLEtBQUswSyxjQUFjcUQsaUJBQWlCLFVBQVUsV0FHNUMzRixFQUFNbU4sc0JBQXVCLEtBUS9CdlYsS0FBS3VLLGtCQUFrQndELGlCQUFpQixhQUFhLFdBQ25EakosU0FBU3dKLG9CQUFvQixRQUFTMkksR0FBc0IsR0FDNUQ3TyxFQUFNa04sMEJBQTJCLEVBRTdCbE4sRUFBTTZNLFNBQVMzSSxRQUFRQyxXQUN6Qm5FLEVBQU0rTSxlQUFlK0IsS0FBSzdQLE9BQ3hCZSxFQUFNK00sZUFBZStCLEtBQUtwUCxnQkFBZ0Isa0JBRzVDTSxFQUFNK00sZUFBZWdDLGtCQUFtQixNQUk1Q25YLEtBQUt1SyxrQkFBa0J3RCxpQkFBaUIsV0FBVyxXQUdqRGpKLFNBQVNpSixpQkFBaUIsUUFBU2tKLEdBQXNCLEdBQ3pEN08sRUFBTWtOLDBCQUEyQixFQUU3QmxOLEVBQU02TSxTQUFTM0ksUUFBUUMsV0FDekJuRSxFQUFNK00sZUFBZWdDLGtCQUFtQixNQUk1Q25YLEtBQUt1SyxrQkFBa0J3RCxpQkFBaUIsZ0JBQWdCLFNBQVVyRixHQUloRSxHQUhBNUQsU0FBU3dKLG9CQUFvQixRQUFTMkksR0FBc0IsR0FHbEMsY0FBdEJ2TyxFQUFNME8sT0FBTzlZLEtBQXNCLENBQ3JDLEdBQUk4SixFQUFNNk0sU0FBUzNJLFFBQVFDLFNBQVUsQ0FDbkMsSUFBSThLLEVBQWEzTyxFQUFNME8sT0FFdkJoUCxFQUFNK00sZUFBZW1DLGNBQWNELEdBT3JDLEdBQWlDLFVBQTdCM08sRUFBTTBPLE9BQU92WSxPQUFPK0ksS0FDdEIsT0FJQWMsRUFBTTBPLE9BQU9HLG1CQUFtQnJXLEVBQU13SCxFQUFNME8sT0FBT0ksY0FBY3RXLEVBTWpFd0gsRUFBTTBPLE9BQU9HLG1CQUFtQnBXLEVBQU11SCxFQUFNME8sT0FBT0ksY0FBY3JXLEVBTWpFdUgsRUFBTTBPLE9BQU9HLG1CQUFtQm5XLEVBQU1zSCxFQUFNME8sT0FBT0ksY0FBY3BXLE1BT3ZFcEIsS0FBS3VLLGtCQUFrQndELGlCQUNyQixvQkFDQSxTQUFVckYsR0FDUk4sRUFBTXNDLGNBQWNxRSxTQUFXckcsRUFBTXRLLFNBSXpDNEIsS0FBS2tMLGFBQWUsSUFBSTBCLEVBQ3RCNU0sS0FBSzhKLGtCQUNMZixFQUNBMkMsRUFBY2lMLFlBRWhCM1csS0FBS2tMLGFBQWFPLGFBR2xCekwsS0FBS2tMLGFBQWE2QyxpQkFBaUIsUUFBUSxXQUl6QzNGLEVBQU1zQyxjQUFjQyxjQUFlLEVBQ25DdkMsRUFBTW1DLGtCQUFrQndFLFNBQVUsS0FFcEMvTyxLQUFLa0wsYUFBYTZDLGlCQUFpQixXQUFXLFdBQzVDM0YsRUFBTXNDLGNBQWNDLGNBQWUsRUFDbkN2QyxFQUFNbUMsa0JBQWtCd0UsU0FBVSxLQUdwQyxJQUFNMEksRUFBVTNTLFNBQVN1UixlQUFlLGlCQTJCeEMsU0FBU3FCLElBQ1AsSUFBSUMsRUFBb0I3UyxTQUFTdVIsZUFBZSxnQkFDN0NDLFlBQ0NzQixFQUFxQjlTLFNBQVN1UixlQUFlLGdCQUM5Q0UsYUFDSEgsRUFBUS9CLE9BQVNzRCxFQUFvQkMsRUFDckN4QixFQUFReUIseUJBQ1JqQyxFQUFVYyxRQUFRaUIsRUFBbUJDLEdBaEN2QzNZLE9BQU84TyxpQkFBaUIsVUFVeEIsV0FDRWhGLEVBQU9zTCxPQUFTcFYsT0FBTytKLFdBQWEvSixPQUFPZ0ssWUFDM0NGLEVBQU84Tyx5QkFDUHpCLEVBQVEvQixPQUNOdlAsU0FBU3VSLGVBQWUsZ0JBQWdCQyxZQUN4Q3hSLFNBQVN1UixlQUFlLGdCQUFnQkUsYUFDMUNILEVBQVF5Qix5QkFDUmpDLEVBQVVjLFFBQ1I1UixTQUFTdVIsZUFBZSxnQkFBZ0JDLFlBQ3hDeFIsU0FBU3VSLGVBQWUsZ0JBQWdCRSxjQUUxQ2QsRUFBU2lCLFFBQVF6WCxPQUFPK0osV0FBWS9KLE9BQU9nSyxhQUMzQ3lDLEVBQWNnTCxRQUFRelgsT0FBTytKLFdBQVkvSixPQUFPZ0ssZ0JBdEJBLEdBQ2xEbkUsU0FBU2lKLGlCQUFpQixRQUFTa0osR0FBc0IsR0FDekRuUyxTQUFTaUosaUJBQWlCLGFBNGIxQixTQUE2QnJGLEdBQzNCQSxFQUFNb1Asa0JBR04sSUFBSUMsRUFBY0MsRUFBZXRQLEdBRWpDTixFQUFNNE0sY0FBYzlULEVBQUk2VyxFQUFZN1csRUFDcENrSCxFQUFNNE0sY0FBYzdULEVBQUk0VyxFQUFZNVcsRUFFcEMwVSxFQUFVL0csY0FBY2lKLEVBQWFoUCxHQUtyQ2tQLEVBSmlCcEMsRUFBVXZHLGlCQUFpQmtILEVBQVVyRSxrQkFNbEQ4RCxFQUFlMU4sZ0JBQ2pCME4sRUFBZXpOLGFBQWFKLEVBQU05SixLQUFNbUssRUFBT0MsRUFBT0MsR0FDdERQLEVBQU02QyxNQUFNaU4scUJBQXFCakMsRUFBZTFOLGdCQUdsRCxHQUNFSCxFQUFNNk0sU0FBUzNJLFFBQVFDLFVBQ08sVUFBOUJuRSxFQUFNK00sZUFBZTdXLE1BRWpCOEosRUFBTStNLGVBQWVnQyxpQkFBa0IsQ0FDekMsSUFBSWdCLEVBQW9CdEMsRUFBVXZHLGlCQUFpQixDQUNqRGxILEVBQU0rTSxlQUFlK0IsT0FHdkI5TyxFQUFNK00sZUFBZWlELGNBQWNELE9BMWRtQixHQUU1RHJULFNBQVNpSixpQkFBaUIsV0F5ZjFCLFNBQTJCckYsR0FHekIsR0FBd0Isa0JBQXBCQSxFQUFNME8sT0FBTzdYLEdBQXdCLE9BQ3pDLEdBQUk2SSxFQUFNNk0sU0FBUzNJLFFBQVFDLFNBQVUsT0FNckMsR0FBSW5FLEVBQU1tTixxQkFHUixZQUZBbk4sRUFBTW1OLHNCQUF1QixHQUtMLFdBQXRCbk4sRUFBTTlKLEtBQUttTSxTQUNSckMsRUFBTWtOLDBCQTVRZixTQUF1QjVNLEdBQ3JCLElBQUlxUCxFQUFjQyxFQUFldFAsR0FFakNtTixFQUFVL0csY0FBY2lKLEVBQWFoUCxHQUVyQyxJQUFJb0ksRUFBYTBFLEVBQVV2RyxpQkFBaUJsSCxFQUFNMEIsbUJBRWxELEdBQUlxSCxFQUFXclYsT0FBUyxFQUFHLENBQ3pCLElBQUlnSyxFQUFpQnFMLEVBQVcsR0FBR3RTLE9BRW5DLEdBQUk2SixFQUFNMlAsUUFBUyxDQUNialEsRUFBTXJDLGlCQUFpQmxILFNBQ3pCbVgsRUFBWWxQLDhCQUNWc0IsRUFBTXJDLGlCQUFpQmxILFFBRXpCdUosRUFBTXJDLGlCQUFpQmdFLGVBQWVJLE9BQ3BDL0IsRUFBTXJDLGlCQUFpQmxILFFBRXpCdUosRUFBTXJDLGlCQUFpQmxILE9BQVMsTUFHbEMsSUFBSXlaLEVBQTBCLElBRTlCQSxFQUEwQkEsRUFBd0JDLE9BQ2hEblEsRUFBTXJDLGlCQUFpQmdFLGVBQWUvQyxXQUdad1IsU0FBUzFTLElBQ25Da1EsRUFBWWxQLDhCQUE4QmhCLEdBRTFDd1MsRUFBd0J0YixPQUN0QnNiLEVBQXdCRyxRQUFRM1MsR0FDaEMsSUFHRndTLEVBQXdCbGMsS0FBSzBKLEdBRy9Cc0MsRUFBTXNRLHVCQUVOLElBQUlDLEVBQWUsR0FFbkJMLEVBQXdCblIsU0FBUSxTQUFDQyxHQUMvQnVSLEVBQWF2YyxLQUFLZ0wsRUFBUXZGLFNBQVNnSCxZQUdyQyxJQUFJK1AsRUFBYXRFLEVBQWVxRSxHQUFjOVAsUUFFOUNULEVBQU1yQyxpQkFBaUJnRSxlQUFlbEksU0FBU3lELElBQzdDc1QsRUFBVzFYLEVBQ1gwWCxFQUFXelgsRUFDWHlYLEVBQVd4WCxHQUdiLElBQUssSUFBSXhGLEVBQUkwYyxFQUF3QnhjLE9BQVMsRUFBR0YsR0FBSyxFQUFHQSxJQUN2RHdNLEVBQU1yQyxpQkFBaUJnRSxlQUFlSSxPQUNwQ21PLEVBQXdCMWMsSUFHMUIwYyxFQUF3QjFjLEdBQUdvSyxJQUN6QmdRLEVBQVkvUCxrQkFBa0JxUyxFQUF3QjFjLEtBSXRCLEtBQWhDd00sRUFBTWtDLHdCQUNSbEMsRUFBTW1DLGtCQUFrQkMsUUFBUXBDLEVBQU1rQyx1QkFDdENsQyxFQUFNbUMsa0JBQWtCSixPQUN0Qi9CLEVBQU1yQyxpQkFBaUJnRSxzQkFJM0IzQixFQUFNc1EsdUJBQ050USxFQUFNeVEsc0JBRUZ6USxFQUFNckMsaUJBQWlCbEgsUUFDekJtWCxFQUFZblAsZ0JBQWdCdUIsRUFBTXJDLGtCQUtwQ3FDLEVBQU1yQyxpQkFBbUJpUSxFQUFZblEsYUFDbkNDLEVBQ0FzQyxFQUFNckMsa0JBUTRCLEtBQWhDcUMsRUFBTWtDLHdCQUNSbEMsRUFBTW1DLGtCQUFrQkMsUUFBUXBDLEVBQU1rQyx1QkFHdENsQyxFQUFNbUMsa0JBQWtCSixPQUFPL0IsRUFBTXJDLGlCQUFpQmxILGNBWXJEdUosRUFBTWtOLDJCQUdUbE4sRUFBTXNRLHVCQUNOdFEsRUFBTXlRLHNCQUdEelEsRUFBTTZNLFNBQVN4SSxlQUFnQnJFLEVBQU1yQyxpQkFBaUJsSCxTQUd6RHVKLEVBQU1tQyxrQkFBa0J1TyxPQUFPMVEsRUFBTXJDLGlCQUFpQmxILFFBQ3REbVgsRUFBWW5QLGdCQUFnQnVCLEVBQU1yQyxrQkFDbENxQyxFQUFNNkMsTUFBTUcsU0FBUzJOLGtCQUFrQjdULE1BQU1zRyxRQUFVLFNBS3pEcEQsRUFBTXJDLGlCQUFpQmxILFFBQ3pCdUosRUFBTTZDLE1BQU05RSxxQkFBcUJpQyxFQUFNckMsaUJBQWlCbEgsUUFDeER1SixFQUFNNkMsTUFBTUcsU0FBUzJOLGtCQUFrQjdULE1BQU1zRyxRQUFVLFVBRXZEcEQsRUFBTTZDLE1BQU0rTix1QkFHVjVRLEVBQU1rTiwyQkFDUmxOLEVBQU1rTiwwQkFBMkIsR0EwSS9CMkQsQ0FBY3ZRLE9BM2dCb0MsR0FDeEQ1RCxTQUFTaUosaUJBQWlCLFdBZ2hCMUIsU0FBbUJyRixHQUVqQixPQUFRQSxFQUFNd1EsU0FDWixLQUFLLEdBRUNqRCxFQUFlMU4sZ0JBQ2pCSCxFQUFNMEIsa0JBQWtCMU4sS0FBSzZaLEVBQWUxTixlQUM1QzBOLEVBQWUzTSxhQUFhbEIsRUFBTTBCLG9CQUdmaEYsU0FBU3VSLGVBQWUscUJBQzlCOUssUUFDSXpHLFNBQVN1UixlQUFlLFVBQzlCblIsTUFBTXNHLFFBQVUsT0FDN0JwRCxFQUFNOUosS0FBTyxDQUNYbU0sT0FBUSxTQUNSaEQsT0FBUSxNQUdWLE1BRUYsS0FBSyxHQVVILEdBUklXLEVBQU1yQyxpQkFBaUJsSCxTQUN6QnVKLEVBQU1rQyxzQkFBd0IsR0FDOUJsQyxFQUFNbUMsa0JBQWtCdU8sT0FBTzFRLEVBQU1yQyxpQkFBaUJsSCxRQUV0RDRKLEVBQU1wQixPQUFPZSxFQUFNckMsaUJBQWlCbEgsUUFDcEN1SixFQUFNckMsaUJBQWlCbEgsT0FBUyxNQUc5QnVKLEVBQU1yQyxpQkFBaUJnRSxlQUFlL0MsU0FBU2xMLE9BQVMsRUFBRyxDQUM3RHNNLEVBQU1tQyxrQkFBa0J1TyxPQUN0QjFRLEVBQU1yQyxpQkFBaUJnRSxnQkFNekIsSUFIQSxJQUdTbk8sRUFGUHdNLEVBQU1yQyxpQkFBaUJnRSxlQUFlL0MsU0FBU2xMLE9BRXRCLEVBQUdGLEdBQUssRUFBR0EsSUFDcEN3TSxFQUFNckMsaUJBQWlCZ0UsZUFBZTFDLE9BQ3BDZSxFQUFNckMsaUJBQWlCZ0UsZUFBZS9DLFNBQVNwTCxJQUluRHdNLEVBQU15USxzQkFHUixNQUdGLEtBQUssR0FDSDdDLEVBQVltRCxZQUFZL1EsR0FFeEIsTUFFRixLQUFLLEdBRUhnUixFQUF5QmhSLEdBQ1J0RCxTQUFTdVIsZUFBZSxRQUM5QnRMLFNBQVUsRUFFckIsTUFHRixLQUFLLEdBRUhxTyxFQUE2QmhSLEdBQ1Z0RCxTQUFTdVIsZUFBZSxVQUM5QnRMLFNBQVUsRUFFdkIsTUFHRixLQUFLLEdBRUhxTyxFQUEwQmhSLEdBQ1J0RCxTQUFTdVIsZUFBZSxTQUM5QnRMLFNBQVUsRUFFdEIsTUFHRixLQUFLLEdBQ0gsSUFBSXNPLEVBQWF2VSxTQUFTdVIsZUFBZSxhQUN6Q2dELEVBQVd0TyxTQUFVc08sRUFBV3RPLFFBRTVCa0wsRUFBZTFOLGdCQUNqQkgsRUFBTTBCLGtCQUFrQjFOLEtBQUs2WixFQUFlMU4sZUFDNUMwTixFQUFlM00sYUFBYWxCLEVBQU0wQixvQkFHcENzUCxFQUF1QkMsRUFBV3RPLFFBQVMzQyxPQTVtQkQsR0FDaER0RCxTQUFTaUosaUJBQWlCLGNBeVoxQixlQXpac0QsR0FDdERqSixTQUFTaUosaUJBQWlCLFlBa2ExQixlQWxha0QsR0FDbERqSixTQUFTaUosaUJBQWlCLGFBb2ExQixXQVdFa0ssRUFKaUJwQyxFQUFVdkcsaUJBQWlCa0gsRUFBVXJFLHFCQTNhSixHQWdFcEQsSUFBSTNRLEVBQVcsSUFBSThYLG9CQUFrQixDQUNuQ2xWLE1BQU8sSUFBSWtNLFFBQU0sU0FDakI1SyxhQUFhLEVBQ2JDLFFBQVMsSUFlUDRULEVBQWUsSUFBSUMsb0JBQWtCLEdBQUksR0FBSSxJQUM3Q3RDLEVBQU8sSUFBSXZFLE9BQUs0RyxFQUFjL1gsR0E2Q2xDLFNBQVN5VixFQUFxQnZPLEdBSzVCLEdBQUlOLEVBQU1tTixxQkFDUm5OLEVBQU1tTixzQkFBdUIsT0FLL0IsR0FDRTdNLEVBQU0wTyxPQUFPcUMsZUFDcUIsaUJBQWxDL1EsRUFBTTBPLE9BQU9xQyxjQUFjbGEsSUFuSC9CLFdBQ0UsSUFBSW1hLEVBQWU1VSxTQUFTdVIsZUFBZSxnQkFDM0MsR0FBaUMsVUFBN0JxRCxFQUFheFUsTUFBTTdELE1BQW1CLENBQ3hDLElBQUlBLEVBQVFwQyxPQUFPK0osV0FBYSxLQUM1QjFILEVBQVNyQyxPQUFPZ0ssWUFBYyxLQUNsQ3lRLEVBQWF4VSxNQUFNN0QsTUFBUUEsRUFDM0JxWSxFQUFheFUsTUFBTTVELE9BQVNBLEVBQzVCb1ksRUFBYXhVLE1BQU15SixLQUFPLE1BQzFCK0ssRUFBYXhVLE1BQU0ySixJQUFNLE1BQ3pCNkssRUFBYXhVLE1BQU03RCxNQUFRQSxFQUMzQnFZLEVBQWF4VSxNQUFNNUQsT0FBU0EsRUFDNUJvVyxRQUNLLENBQ0wsSUFBSWlDLEVBQU8sUUFDWEQsRUFBYXhVLE1BQU15SixLQUFPLEdBQzFCK0ssRUFBYXhVLE1BQU0wVSxNQUFRLE9BQzNCRixFQUFheFUsTUFBTTJKLElBQU0sT0FDekI2SyxFQUFheFUsTUFBTTdELE1BQVFzWSxFQUMzQkQsRUFBYXhVLE1BQU01RCxPQUFTcVksRUFDNUJELEVBQWF4VSxNQUFNN0QsTUFBUXNZLEVBQzNCRCxFQUFheFUsTUFBTTVELE9BQVNxWSxFQUM1QmpDLEtBZ0dBbUMsT0FKRixDQVNBLEdBQXdCLGtCQUFwQm5SLEVBQU0wTyxPQUFPN1gsR0FBd0IsQ0FDdkMsSUFBSXdZLEVBQWNDLEVBQWV0UCxHQUVqQ21OLEVBQVUvRyxjQUFjaUosRUFBYWhQLEdBRXJDLElBQUlvSSxFQUFhMEUsRUFBVXZHLGlCQUFpQmtILEVBQVVyRSxpQkFFdEQsR0FBMEIsbUJBQXRCL0osRUFBTTlKLEtBQUttTSxPQUE2QixDQUkxQyxHQUhBckMsRUFBTXNRLHVCQUNOdFEsRUFBTXlRLHNCQUVGNUMsRUFBZTVOLG9CQWtCakIsT0FqQkEyTixFQUFZblEsYUFDVm9RLEVBQWUxTixjQUNmSCxFQUFNckMsa0JBRVJxQyxFQUFNNkMsTUFBTUcsU0FBUzJOLGtCQUFrQjdULE1BQU1zRyxRQUFVLFFBRW5EeUssRUFBZTFOLGVBQ2pCSCxFQUFNMEIsa0JBQWtCMU4sS0FBSzZaLEVBQWUxTixlQUc5QzBOLEVBQWUzTSxvQkFFcUIsS0FBaENsQixFQUFNa0Msd0JBQ1JsQyxFQUFNbUMsa0JBQWtCQyxRQUFRcEMsRUFBTWtDLHVCQUN0Q2xDLEVBQU1tQyxrQkFBa0JKLE9BQU8vQixFQUFNckMsaUJBQWlCbEgsVUFLdER1SixFQUFNckMsaUJBQWlCbEgsU0FDekJtWCxFQUFZblAsZ0JBQWdCdUIsRUFBTXJDLGtCQUNsQ3FDLEVBQU1yQyxpQkFBaUJsSCxPQUFTLEtBQ2hDdUosRUFBTXJDLGlCQUFpQmdCLGVBQWlCLE1BRzFDa1AsRUFBZTVOLG9CQUFzQjhJLEVBQVcsR0FBR08sTUFDbkR1RSxFQUFlek4sYUFBYUosRUFBTTlKLEtBQU1tSyxFQUFPQyxFQUFPQyxHQUN0RFAsRUFBTTZDLE1BQU05RSxxQkFBcUI4UCxFQUFlMU4sZUFHbEQsR0FBSUgsRUFBTTZNLFNBQVMzSSxRQUFRQyxTQUFVLENBQ25DLElBQUl3TCxFQUFjQyxFQUFldFAsR0FJakMsR0FGQW1OLEVBQVUvRyxjQUFjaUosRUFBYWhQLEdBRUgsVUFBOUJYLEVBQU0rTSxlQUFlN1csS0FBa0IsQ0FDekM4SixFQUFNK00sZUFBZStCLEtBQUs3UCxPQUN4QmUsRUFBTStNLGVBQWUrQixLQUFLcFAsZ0JBQWdCLGtCQUc1QyxJQUFJcUosRUFBYTBFLEVBQVVpRSxnQkFDekIxUixFQUFNK00sZUFBZStCLE1BR3ZCLEdBQUkvRixFQUFXclYsT0FBUyxFQUFHLENBQ0pxVixFQUFXLEdBQUd0UyxPQUVwQndJLE9BQ2I4SixFQUFXLEdBQUd0UyxPQUFPaUosZ0JBQWdCLGtCQUd2Q00sRUFBTStNLGVBQWU0RSxZQUFZNUksR0FFakMsSUFBSTVPLEVBQVM2RixFQUFNK00sZUFBZStCLEtBQUtwUCxnQkFDckMsZUFHRk0sRUFBTWtDLHNCQUF3QixZQUU5QmxDLEVBQU1tQyxrQkFBa0JKLE9BQU81SCxJQUluQyxHQUFrQyxhQUE5QjZGLEVBQU0rTSxlQUFlN1csS0FBcUIsQ0FDNUMsSUFBSTZTLEVBQWEwRSxFQUFVdkcsaUJBQ3pCbEgsRUFBTTBCLG1CQUdSLEdBQUlxSCxFQUFXclYsT0FBUyxFQUFHLENBQ3pCLElBQUlnSyxFQUFpQnFMLEVBQVcsR0FBR3RTLE9BRW5DdUosRUFBTWtDLHNCQUF3QixZQUU5QmxDLEVBQU1tQyxrQkFBa0JKLE9BQU9yRSxNQVF2Q3NDLEVBQU1rTiwwQkFBMkIsR0F3T25DLFNBQVMwQyxFQUFldFAsR0FHdEIsT0FEb0IsSUFBSTJFLFdBQ0wvSCxJQUNoQm9ELEVBQU1nRyxRQUFVelAsT0FBTytKLFdBQWMsRUFBSSxHQUN4Q04sRUFBTWtHLFFBQVUzUCxPQUFPZ0ssWUFBZSxFQUFJLEdBSWhELFNBQVNnUCxFQUFrQjlHLEdBQ3pCLEdBQUlBLEVBQVdyVixPQUFTLEVBQUcsQ0FDekIsSUFBSWtlLEVBQWE3SSxFQUFXLEdBQUd0UyxPQUFPbEIsS0FDbEN1RCxFQUFJaVEsRUFBVyxHQUFHTyxNQUFNeFEsRUFDeEJDLEVBQUlnUSxFQUFXLEdBQUdPLE1BQU12USxFQUN4QkMsRUFBSStQLEVBQVcsR0FBR08sTUFBTXRRLEVBQzVCcVcsRUFBUTdGLFVBQ05vSSxFQUNBLFdBQ0E3WCxLQUFLMFAsTUFBVSxJQUFKM1EsR0FBVyxJQUN0QixPQUNBaUIsS0FBSzBQLE1BQVUsSUFBSjFRLEdBQVcsSUFDdEIsT0FDQWdCLEtBQUswUCxNQUFVLElBQUp6USxHQUFXLFNBRXhCcVcsRUFBUTdGLFVBQVksR0E3WnhCbkosRUFBTXpDLElBQUlrUixHQUNWQSxFQUFLclYsU0FBU3lELElBQUksRUFBRyxFQUFHLEdBQ3hCNFIsRUFBS3ZaLEtBQU8sV0FDWnFDLEtBQUs4SixrQkFBa0IxTixLQUFLOGEsR0EwUzVCbFgsS0FBSzBZLHFCQUF1QixXQUMxQixHQUFJdFEsRUFBTXJDLGlCQUFpQmdFLGVBQWUvQyxTQUFTbEwsT0FBUyxFQUFHLENBRzdELElBRkEsSUFFU0YsRUFGU3dNLEVBQU1yQyxpQkFBaUJnRSxlQUFlL0MsU0FBU2xMLE9BRXRDLEVBQUdGLEdBQUssRUFBR0EsSUFDcENvYSxFQUFZbFAsOEJBQ1ZzQixFQUFNckMsaUJBQWlCZ0UsZUFBZS9DLFNBQVNwTCxJQUdqRDZNLEVBQU0wQixPQUFPL0IsRUFBTXJDLGlCQUFpQmdFLGVBQWUvQyxTQUFTcEwsSUFHOUR3TSxFQUFNbUMsa0JBQWtCdU8sT0FBTzFRLEVBQU1yQyxpQkFBaUJnRSxrQkFHMUQvSixLQUFLNlksb0JBQXNCLFdBQ3pCelEsRUFBTXJDLGlCQUFpQmdFLGVBQWUvQyxTQUFXLEdBQ2pEb0IsRUFBTXJDLGlCQUFpQmdFLGVBQWVsSSxTQUFTeUQsSUFBSSxFQUFHLEVBQUcsR0FDekQ4QyxFQUFNckMsaUJBQWlCZ0UsZUFBZXZELE1BQU1sQixJQUFJLEVBQUcsRUFBRyxHQUN0RDhDLEVBQU1yQyxpQkFBaUJnRSxlQUFlOEksU0FBU3ZOLElBQUksRUFBRyxFQUFHLElBNE4zRHRGLEtBQUtrVixPQUFPK0UsUUFBUSxpQkFFcEIsU0FBd0JDLEdBQ3RCLElBQUs5UixFQUFNckMsaUJBQWlCbEgsT0FBUSxPQUlwQ3VKLEVBQU1yQyxpQkFBaUJsSCxPQUFPMkMsU0FBU3FHLFVBQ3ZDTyxFQUFNckMsaUJBQWlCbEgsT0FBTzJDLFNBQVcsSUFBSTJZLHFCQUM3QyxJQUFJQyxHQUFVLElBQUlDLGlCQUFnQkMsS0FDaEMsMkJBQTZCSixHQUU3QixlQU1GOVIsRUFBTXJDLGlCQUFpQmxILE9BQU8yQyxTQUFTK1ksT0FBU0gsS0FTbEQsSUFBSUksRUFBVSxTQUFWQSxJQUNGQyxzQkFBc0JELEdBQ3RCL1IsRUFBTWlTLG9CQUNOMUQsS0FHRixTQUFTQSxJQUNQdkIsRUFBU3VCLE9BQU92TyxFQUFPTSxHQUN2QjZNLEVBQVVvQixPQUFPdk8sRUFBTzJOLEdBQ3hCMUssRUFBY3NMLE9BQU92TyxFQUFPTSxHQUU5Qi9JLEtBQUsrSSxPQUFTQSxFQUNkL0ksS0FBS3lJLE1BQVFBLEVBQ2J6SSxLQUFLd2EsUUFBVUEsRUFDZkEsTSxtQ0FHVyxhQUNQeEUsRUFBYyxJQUFJbFcsRUFFbEJFLEtBQUsrRixpQkFBaUJsSCxTQUN4Qm1CLEtBQUt1SyxrQkFBa0J1TyxPQUFPOVksS0FBSytGLGlCQUFpQmxILFFBQ3BEbVgsRUFBWW5QLGdCQUFnQjdHLEtBQUsrRixtQkFFbkMvRixLQUFLMFksdUJBQ0wxWSxLQUFLNlksc0JBRUwsSUFBSTdSLEVBQVdoSCxLQUFLeUksTUFBTXpCLFNBRXRCMlQsRUFBbUIsR0FFdkIzVCxFQUFTRyxTQUFRLFNBQUNDLEdBQ1pBLEVBQVFtQyxTQUFTQyxnQkFDbkJtUixFQUFpQnZlLEtBQUtnTCxHQUV0QixFQUFLMEMsa0JBQWtCOU0sT0FBTyxFQUFLOE0sa0JBQWtCMk8sUUFBUXJSLFNBSWpFLEVBQUFwSCxLQUFLeUksT0FBTXBCLE9BQVgsUUFBcUJzVCxLLCtCQTEyQnJCLE9BQU8zYSxLQUFLeUksVSxLQ3BFVm1TLEUsV0FDSixXQUFZMUQsR0FBTSxZQUNoQmxYLEtBQUtrWCxLQUFPQSxFQUNabFgsS0FBS3dFLFNBQ0x4RSxLQUFLdVUsT0FDTHZVLEtBQUsxQixLQUFPLFdBRVowQixLQUFLaUwsTUFBUSxJQUFJL0UsRUFDakJsRyxLQUFLZ1csWUFBYyxJQUFJbFcsRUFDdkJFLEtBQUs2YSxTQUFXLElBQUk5RixFQUNwQi9VLEtBQUttWCxrQkFBbUIsRUFFeEJuWCxLQUFLOGEsa0JBQW9CLElBQUl2SSxvQkFBa0IsQ0FDN0NuTyxNQUFPLElBQUlrTSxRQUFNLFVBQ2pCNUssYUFBYSxFQUNiQyxRQUFTLEtBS1gzRixLQUFLK2Esd0JBQTBCQyxFQUM3QixDQUFDLElBQUl6TixVQUFRLEVBQUcsRUFBRyxHQUFJLElBQUlBLFVBQVEsRUFBRyxFQUFHLEdBQUksSUFBSUEsVUFBUSxFQUFHLEVBQUcsSUFFL0R2TixLQUFLOGEsbUIsa0RBSUszQyxHQUFtQixXQUMvQixHQUFJQSxFQUFrQnJjLE9BQVMsRUFBRyxDQUNoQyxJQUFJb2IsRUFBT2lCLEVBQWtCLEdBQUd0WixPQUM1Qm9jLEVBQU85QyxFQUFrQixHQUFHOEMsS0FFNUIxRyxFQUFTMkcsRUFBVWhFLEdBRW5CMVMsRUFBVyxDQUFDK1AsRUFBTzBHLEVBQUtFLEdBQUk1RyxFQUFPMEcsRUFBS0csR0FBSTdHLEVBQU8wRyxFQUFLeGQsSUFFeEQ0ZCxFQUFNLEdBQ1Y3VyxFQUFTcEYsS0FBSSxTQUFDOEgsR0FDWm1VLEVBQUlqZixLQUFLOEssRUFBS2hHLEdBQ2RtYSxFQUFJamYsS0FBSzhLLEVBQUsvRixHQUNka2EsRUFBSWpmLEtBQUs4SyxFQUFLOUYsTUFFaEJpYSxFQUFJamMsS0FDRixTQUFDOEgsRUFBTW9VLEdBQVAsT0FDRyxFQUFLUCx3QkFBd0IzYSxTQUFTbWIsV0FBVzFaLFNBQVMyWixNQUN6REYsR0FDRXBVLEtBRVJsSCxLQUFLK2Esd0JBQXdCM2EsU0FBU21iLFdBQVcxWixTQUFTNFosYUFBYyxFQUN4RXpiLEtBQUsrYSx3QkFBd0JwZCxLQUFPLGdCQUVwQ3VaLEVBQUtsUixJQUFJaEcsS0FBSythLDRCLDBDQTZRcEIsSUFBcUJ4RyxFQUNmL1AsRUF6UUZ4RSxLQUFLdVUsT0FBUzJHLEVBQVVsYixLQUFLa1gsTUFDN0JsWCxLQUFLd0UsVUF1UVkrUCxFQXZRV3ZVLEtBQUt1VSxPQXdRL0IvUCxFQUFXLEdBRWYrUCxFQUFPcE4sU0FBUSxTQUFDdVUsR0FDZCxJQUFJQyxHQUFRLEVBRVpuWCxFQUFTMkMsU0FBUSxTQUFDeVUsR0FDWkYsRUFBWUcsT0FBT0QsS0FDckJELEdBQVEsTUFLUEEsR0FDSG5YLEVBQVNwSSxLQUFLc2YsTUFJWGxYLEdBclJhLGFBQWR4RSxLQUFLMUIsTUFDUDBCLEtBQUs4YixxQkFBcUI5YixLQUFLa1gsS0FBTWxYLEtBQUt3RSxVQUV4Q3hFLEtBQUsxQixPLDBDQU1UMEIsS0FBS2dXLFlBQVlsUCw4QkFBOEI5RyxLQUFLa1gsTUFFcERsWCxLQUFLa1gsS0FBSzdQLE9BQU9ySCxLQUFLa1gsS0FBS3BQLGdCQUFnQix1QkFDM0M5SCxLQUFLa1gsS0FBSzdQLE9BQU9ySCxLQUFLa1gsS0FBS3BQLGdCQUFnQixzQixvQ0FHL0J1UCxHQVFaLEdBUGtCLGFBQWRyWCxLQUFLMUIsTUFDUDBCLEtBQUsrYixXQUNIMUUsRUFBV3hZLE9BQU8wSyxTQUFTeVMsYUFDM0IzRSxFQUFXeFksT0FBT2dELFVBSUosVUFBZDdCLEtBQUsxQixLQUFrQixDQUN6QixJQUFJMmQsRUFBYTVFLEVBQVd4WSxPQUFPbEIsS0FFL0JzZCxFQUFPNUQsRUFBV3hZLE9BQU9pUixPQUFPaEksZ0JBQ2xDdVAsRUFBV3hZLE9BQU9sQixLQUFLdWUsUUFBUSxTQUFVLEtBR3ZDM1osRUFBUzhVLEVBQVd4WSxPQUVwQnRDLEVBQVFnRyxFQUFPVixTQUFTZ0gsUUFFNUJ0TSxFQUFNNGYsV0FBVzVaLEVBQU9WLFNBQVVvWixFQUFLMVIsU0FBU3FQLFlBRWhEcUMsRUFBS3BaLFNBQVN5RCxJQUFJL0ksRUFBTTJFLEVBQUczRSxFQUFNNEUsRUFBRzVFLEVBQU02RSxHQU8xQyxJQUhBLElBQUlnYixFQUFZbkIsRUFBSzdhLFNBQVNtYixXQUFXMVosU0FBUzJaLE1BQzlDaFgsRUFBVyxHQUVONUksRUFBSSxFQUFHQSxFQUFJd2dCLEVBQVV0Z0IsT0FBUUYsR0FBSyxFQUN6QzRJLEVBQVNwSSxLQUNQLElBQUltUixVQUFRNk8sRUFBVXhnQixHQUFJd2dCLEVBQVV4Z0IsRUFBSSxHQUFJd2dCLEVBQVV4Z0IsRUFBSSxLQU05RCxJQUZBLElBQUl5Z0IsRUFBa0JwQixFQUFLMVIsU0FBUzhTLGdCQUUzQnpnQixFQUFJLEVBQUdBLEVBQUl5Z0IsRUFBZ0J2Z0IsT0FBUUYsSUFBSyxDQUMvQyxJQUFJMGdCLEVBQWNELEVBQWdCemdCLEdBSTlCMmdCLEVBRlEvWCxFQUFTNUksR0FBR2lOLFFBRUU3QyxJQUFJaVYsRUFBS3BaLFNBQVNnSCxTQUFTQSxRQUVyRDdJLEtBQUsrYixXQUFXTyxFQUFhQyxHQUk3QixJQUFJaGEsRUFBU3ZDLEtBQUs2YSxTQUFTcFMsTUFBTVgsZ0JBQWdCbVUsR0FFakRqYyxLQUFLNmEsU0FBU3RRLGtCQUFrQkosT0FBTzVILEdBRXpDdkMsS0FBS3djLHVCLGlDQUlFUixFQUFjbmEsR0FDdkIsSUFBSWhELEVBQVNtQixLQUFLa1gsS0FFbEJyWSxFQUFPdUIsU0FBU0csV0FBYSxLQUU3QixJQTZNOEJnVSxFQUFRL1AsRUFDcENpWSxFQTlNRUMsR0E2TTBCbkksRUE1TTVCdlUsS0FBS3VVLE9BNE0rQi9QLEVBM01wQ3hFLEtBQUt3RSxTQTRNTGlZLEVBQWUsR0FDbkJqWSxFQUFTcEYsS0FBSSxTQUFDdWQsR0FDWixJQUFJQyxFQUFVLEdBQ2RySSxFQUFPcE4sU0FBUSxTQUFDMFYsRUFBWXZCLEdBQ3RCdUIsRUFBV2hCLE9BQU9jLElBQWFDLEVBQVF4Z0IsS0FBS2tmLE1BRWxEbUIsRUFBYXJnQixLQUFLd2dCLE1BSWJILEdBbk5MemMsS0FBS2dXLFlBQVlsUCw4QkFBOEJqSSxHQUUvQ21CLEtBQUt3RSxVQUFVd1gsR0FBZ0JuYSxFQWdPbkMsU0FBd0NxVixFQUFNM0MsR0FDNUMsSUFBSXVJLEVBQVksR0FFaEJ2SSxFQUFPblYsS0FBSSxTQUFDOEgsR0FDVjRWLEVBQVUxZ0IsS0FBSzhLLEVBQUtoRyxHQUNwQjRiLEVBQVUxZ0IsS0FBSzhLLEVBQUsvRixHQUNwQjJiLEVBQVUxZ0IsS0FBSzhLLEVBQUs5RixNQUdOOFYsRUFBSzlXLFNBQVNtYixXQUFXMVosU0FBUzJaLE1BRXhDcGMsS0FBSSxTQUFDOEgsRUFBTW9VLEdBQ25CcEUsRUFBSzlXLFNBQVNtYixXQUFXMVosU0FBUzJaLE1BQU1GLEdBQVN3QixFQUFVeEIsTUFwTzNEeUIsQ0FBK0JsZSxFQTRNbkMsU0FBOEIyRixFQUFVK1AsRUFBUW1JLEdBUzlDLE9BUkFsWSxFQUFTcEYsS0FBSSxTQUFDdWQsRUFBWXJCLEdBQ0xvQixFQUFzQnBCLEdBRTVCbGMsS0FBSSxTQUFDOEgsR0FBRCxPQUFXcU4sRUFBT3JOLEdBQVF5VixRQUc3Q3BJLEVBQU8sR0FBSy9QLEVBQVMsR0FFZCtQLEVBM05XeUksQ0FDZGhkLEtBQUt3RSxTQUNMeEUsS0FBS3VVLE9BQ0xtSSxJQUlGN2QsRUFBT3VCLFNBQVNtYixXQUFXMVosU0FBUzRaLGFBQWMsRUFHbEQ1YyxFQUFPdUIsU0FBUzZjLHdCQUNoQnBlLEVBQU91QixTQUFTcUcscUJBRWhCNUgsRUFBT21ILElBQUloRyxLQUFLZ1csWUFBWTVQLGdCQUFnQnZILE0sMkNBR3pCcVksRUFBTTFTLEdBQVUsV0FDL0IwWSxFQUFpQixJQUFJQyx1QkFBcUIsR0FBSyxFQUFHLEdBQ2xEM2IsRUFBVyxJQUFJK1Esb0JBQWtCLENBQUVuTyxNQUFPLElBQUlrTSxRQUFNLFNBRXBEOE0sRUFBUSxJQUFJL0gsUUFDaEIrSCxFQUFNemYsS0FBTyxxQkFFYjZHLEVBQVNwRixLQUFJLFNBQUM4SCxFQUFNb1UsR0FDbEIsSUFBSS9ZLEVBQVMsSUFBSW9RLE9BQUt1SyxFQUFnQjFiLEdBQ3RDZSxFQUFPNUUsS0FBTyxvQkFDZDRFLEVBQU9nSCxTQUFTeVMsYUFBaEIsVUFBa0NWLEdBQ2xDOEIsRUFBTXBYLElBQUl6RCxHQUNWQSxFQUFPVixTQUFTeUQsSUFBSTRCLEVBQUtoRyxFQUFHZ0csRUFBSy9GLEVBQUcrRixFQUFLOUYsR0FDekMsRUFBS3laLFNBQVMvUSxrQkFBa0IxTixLQUFLbUcsTUFHdkMyVSxFQUFLbFIsSUFBSW9YLEssa0NBR0NqRixHQUFtQixXQUN6QmlGLEVBQVEsSUFBSS9ILFFBQ2hCK0gsRUFBTXpmLEtBQU8sa0JBRWIsSUFBSXVmLEVBQWlCLElBQUlDLHVCQUFxQixHQUFLLEVBQUcsR0FDbEQzYixFQUFXLElBQUkrUSxvQkFBa0IsQ0FDbkNuTyxNQUFPLElBQUlrTSxRQUFNLGFBQ2pCNUssYUFBYSxFQUNiQyxRQUFTLEtBS1gsR0FBSXdTLEVBQWtCcmMsT0FBUyxFQUFHLENBQ2hDLElBQUlvYixFQUFPaUIsRUFBa0IsR0FBR3RaLE9BQzVCb2MsRUFBTzlDLEVBQWtCLEdBQUc4QyxLQUVoQy9ELEVBQUs3UCxPQUFPNlAsRUFBS3BQLGdCQUFnQixvQkFFakMsSUFBSXlNLEVBQVMyRyxFQUFVaEUsR0FFbkIxUyxFQUFXLENBQUMrUCxFQUFPMEcsRUFBS0UsR0FBSTVHLEVBQU8wRyxFQUFLRyxHQUFJN0csRUFBTzBHLEVBQUt4ZCxJQUV4RDRmLEVBQVdyQyxFQUFleFcsRUFBVWhELEdBQ3hDNmIsRUFBUzFmLEtBQU8sUUFDaEIwZixFQUFTOVQsU0FBUzNCLEtBQU8sb0JBRXpCeVYsRUFBUzlULFNBQVM4UyxnQkFBa0IsR0FFcEM3WCxFQUFTcEYsS0FBSSxTQUFDOEgsR0FDWixFQUFLMUMsU0FBUzJDLFNBQVEsU0FBQ21XLEVBQVVoQyxHQUMzQnBVLEVBQUsyVSxPQUFPeUIsSUFDZEQsRUFBUzlULFNBQVM4UyxnQkFBZ0JqZ0IsS0FBS2tmLFNBUTdDLElBQ0kxQyxFQUFhdEUsRUFESTlQLEVBQVNwRixLQUFJLFNBQUM4SCxHQUFELE9BQVVBLEVBQUsyQixZQUdqRHdVLEVBQVM5VCxTQUFTcVAsV0FBYUEsRUFFL0IsSUFBSXJXLEVBQVMsSUFBSW9RLE9BQUt1SyxFQUFnQjFiLEdBQ3RDZSxFQUFPVixTQUFTeUQsSUFBSXNULEVBQVcxWCxFQUFHMFgsRUFBV3pYLEVBQUd5WCxFQUFXeFgsR0FDM0RtQixFQUFPNUUsS0FBTyxjQUNkNEUsRUFBT2dILFNBQVMzQixLQUFPLG9CQUV2QndWLEVBQU1wWCxJQUFJekQsR0FFVjZhLEVBQU1wWCxJQUFJcVgsR0FDVm5HLEVBQUtsUixJQUFJb1gsTSxtQ0FJQWxHLEVBQU0zQyxHQUFRLFdBQ3JCMkksRUFBaUIsSUFBSUMsdUJBQXFCLEdBQUssRUFBRyxHQUNsRDNiLEVBQVcsSUFBSStRLG9CQUFrQixDQUFFbk8sTUFBTyxJQUFJa00sUUFBTSxlQUVwRGlOLEVBQWlCLEVBTWpCSCxFQUFRLElBQUkvSCxRQUNoQitILEVBQU16ZixLQUFPLG1CQUliLElBRkEsSUFBSTZmLEVBQWF0RyxFQUFLOVcsU0FBU2tiLE1BQU1FLE1BYlosV0FlaEI1ZixHQUNQLElBQUk2aEIsRUFBTyxDQUNUbEosRUFBT2lKLEVBQVc1aEIsSUFDbEIyWSxFQUFPaUosRUFBVzVoQixFQUFJLElBQ3RCMlksRUFBT2lKLEVBQVc1aEIsRUFBSSxLQUdwQnloQixFQUFXckMsRUFBZXlDLEVBQU1qYyxHQUVwQzZiLEVBQVMxZixLQUFPLFFBQVU0ZixFQUUxQkYsRUFBUzlULFNBQVMzQixLQUFPLG9CQUV6QnlWLEVBQVM5VCxTQUFTcVQsUUFBVSxDQUMxQlksRUFBVzVoQixHQUNYNGhCLEVBQVc1aEIsRUFBSSxHQUNmNGhCLEVBQVc1aEIsRUFBSSxJQUdqQnloQixFQUFTOVQsU0FBUzhTLGdCQUFrQixHQUVwQ29CLEVBQUtyZSxLQUFJLFNBQUM4SCxHQUNSLEVBQUsxQyxTQUFTMkMsU0FBUSxTQUFDbVcsRUFBVWhDLEdBQzNCcFUsRUFBSzJVLE9BQU95QixJQUNkRCxFQUFTOVQsU0FBUzhTLGdCQUFnQmpnQixLQUFLa2YsU0FNN0MrQixFQUFTclgsSUFBSSxFQUFLZ1EsWUFBWTVQLGdCQUFnQmlYLElBRTlDLElBQ0l6RSxFQUFhdEUsRUFESW1KLEVBQUtyZSxLQUFJLFNBQUM4SCxHQUFELE9BQVVBLEVBQUsyQixZQUc3Q3dVLEVBQVM5VCxTQUFTcVAsV0FBYUEsRUFFL0IsSUFBSXJXLEVBQVMsSUFBSW9RLE9BQUt1SyxFQUFnQjFiLEdBQ3RDZSxFQUFPVixTQUFTeUQsSUFBSXNULEVBQVcxWCxFQUFHMFgsRUFBV3pYLEVBQUd5WCxFQUFXeFgsR0FDM0RtQixFQUFPNUUsS0FBTyxjQUFnQjRmLEVBQzlCaGIsRUFBT2dILFNBQVMzQixLQUFPLG9CQUV2QndWLEVBQU1wWCxJQUFJekQsR0FFVjZhLEVBQU1wWCxJQUFJcVgsR0FDVm5HLEVBQUtsUixJQUFJb1gsR0FFVCxFQUFLdkMsU0FBUy9RLGtCQUFrQjFOLEtBQUtpaEIsR0FDckNFLEtBaERPM2hCLEVBQUksRUFBR0EsRUFBSTRoQixFQUFXMWhCLE9BQVFGLEdBQUssRUFBRyxFQUF0Q0EsTyxLQXFEYixTQUFTc2YsRUFBVWhFLEdBTWpCLElBTEEsSUFBSXdHLEVBQWN4RyxFQUFLOVcsU0FBU21iLFdBQVcxWixTQUFTMlosTUFDaERtQyxFQUFXekcsRUFBSzlXLFNBQVNtYixXQUFXMVosU0FBUzhiLFNBRTdDcEosRUFBUyxHQUVKM1ksRUFBSSxFQUFHQSxFQUFJOGhCLEVBQVk1aEIsT0FBUUYsR0FBSytoQixFQUMzQ3BKLEVBQU9uWSxLQUNMLElBQUltUixVQUFRbVEsRUFBWTloQixHQUFJOGhCLEVBQVk5aEIsRUFBSSxHQUFJOGhCLEVBQVk5aEIsRUFBSSxLQUlwRSxPQUFPMlksRUFrRVQsU0FBU3lHLEVBQWV4VyxFQUFVaEQsR0FDaEMsR0FBdUIsR0FBbkJnRCxFQUFTMUksT0FBYixDQUtBMEksRUFBUzJDLFNBQVEsU0FBQ0QsR0FDWEEsRUFBSzBXLFdBQ1I5YyxRQUFRRSxNQUFNLDZDQUtsQixJQUFJOGIsRUFBWSxHQUVoQnRZLEVBQVNwRixLQUFJLFNBQUM4SCxHQUNaNFYsRUFBVTFnQixLQUFLOEssRUFBS2hHLEdBQ3BCNGIsRUFBVTFnQixLQUFLOEssRUFBSy9GLEdBQ3BCMmIsRUFBVTFnQixLQUFLOEssRUFBSzlGLE1BR3RCLElBQU1oQixFQUFXLElBQUl5ZCxpQkFXckIsT0FUQXpkLEVBQVMwZCxhQUNQLFdBQ0EsSUFBSUMsa0JBQWdCLElBQUlDLGFBQWFsQixHQUFZLElBR25EMWMsRUFBUzZkLFNBQVMsQ0FBQyxFQUFHLEVBQUcsSUFFWixJQUFJdEwsT0FBS3ZTLEVBQVVvQixHQTVCOUJWLFFBQVFFLE1BQU0sMEMsSUN6WVprRixFLFdBQ0osYUFFRSxHQUZZLFlBRVJBLEVBQU0yRixNQUNSLE9BQU8zRixFQUFNNEYsU0FFZjVGLEVBQU00RixTQUFXOUwsS0FDakJrRyxFQUFNMkYsT0FBUSxFQUVkN0wsS0FBS29MLFNBQVcsRyx5Q0FHYmYsR0FHSCxPQ3BCSixTQUF3QlgsR0FHdEIsR0FBYyxPQUZGNUUsU0FBU3VSLGVBQWUsWUFFcEMsQ0FLQSxJQUFJcEwsRUFBUSxJQUFJL0UsRUFFWmdZLEVBQVdwWixTQUFTQyxjQUFjLE9BQ3RDbVosRUFBU2xaLFVBQVksV0FDckJrWixFQUFTM2UsR0FBSyxXQUVkdUYsU0FBUzhSLEtBQUtDLFlBQVlxSCxHQUtkalQsRUFBTWtULFdBQVdELEVBQVUsSUFBSyxjQUFlLElBQ3JEbFosVUFBWSxRQU9sQixJQUFJb1osRUFBYW5ULEVBQU1rVCxXQUFXRCxFQUFVLFNBQVUsT0FBUSxJQUU5REUsRUFBV3JRLGlCQUFpQixhQUFhLFdBQ3ZDLElBQUlzUSxFQUFpQkgsRUFBU0ksYUFDMUJDLEVBQXFCQyxFQUFlSixHQUV4Q0ssRUFBU3ZaLE1BQU15SixLQUFPNFAsRUFBbUIsR0FBSyxLQUU5Q0UsRUFBU3ZaLE1BQU0ySixJQUFNd1AsRUFBaUIsRUFBSSxLQUMxQ0ksRUFBU3ZaLE1BQU13WixXQUFhLGFBRTlCTixFQUFXclEsaUJBQWlCLFlBQVksU0FBQ3RPLEdBQ2xDQSxFQUFFa2YsZUFBcUQsYUFBcENsZixFQUFFa2YsY0FBY0MsYUFBYXJmLEtBQ25Ea2YsRUFBU3ZaLE1BQU13WixXQUFhLGFBSWhDLElBQUlHLEVBQWE1VCxFQUFNa1QsV0FBV0QsRUFBVSxTQUFVLE9BQVEsSUFFOURXLEVBQVc5USxpQkFBaUIsYUFBYSxXQUN2QyxJQUFJc1EsRUFBaUJILEVBQVNJLGFBRTFCQyxFQUFxQkMsRUFBZUssR0FFeENDLEVBQVM1WixNQUFNeUosS0FBTzRQLEVBQW1CLEdBQUssS0FDOUNPLEVBQVM1WixNQUFNMkosSUFBTXdQLEVBQWlCLEtBRXRDUyxFQUFTNVosTUFBTXdaLFdBQWEsYUFHOUJHLEVBQVc5USxpQkFBaUIsWUFBWSxTQUFDdE8sR0FDbENBLEVBQUVrZixlQUFxRCxhQUFwQ2xmLEVBQUVrZixjQUFjQyxhQUFhcmYsS0FDbkR1ZixFQUFTNVosTUFBTXdaLFdBQWEsYUFJWHpULEVBQU1rVCxXQUFXRCxFQUFVLFNBQVUsV0FBWSxJQUN2RG5RLGlCQUFpQixhQUFhLGVBRTdDLElBQUlnUixFQUFhOVQsRUFBTWtULFdBQVdELEVBQVUsU0FBVSxPQUFRLElBQzlEYSxFQUFXaFIsaUJBQWlCLGFBQWEsV0FDdkMsSUFBSXNRLEVBQWlCSCxFQUFTSSxhQUMxQkMsRUFBcUJDLEVBQWVPLEdBRXhDQyxFQUFTOVosTUFBTXlKLEtBQU80UCxFQUFtQixHQUFLLEtBRTlDUyxFQUFTOVosTUFBTTJKLElBQU13UCxFQUFpQixLQUN0Q1csRUFBUzlaLE1BQU13WixXQUFhLGFBRzlCSyxFQUFXaFIsaUJBQWlCLFlBQVksU0FBQ3RPLEdBQ2xDQSxFQUFFa2YsZUFBcUQsYUFBcENsZixFQUFFa2YsY0FBY0MsYUFBYXJmLEtBQ25EeWYsRUFBUzlaLE1BQU13WixXQUFhLGFBTWhDLElBQUlELEVBQVd4VCxFQUFNZ1UsZ0JBQWdCLFdBQVlmLEdBQ2pETyxFQUFTelosVUFBWSxjQUVyQnlaLEVBQVMxUSxpQkFBaUIsWUFBWSxTQUFVdE8sR0FDekNBLEVBQUVrZixlQUFxRCxhQUFwQ2xmLEVBQUVrZixjQUFjQyxhQUFhcmYsS0FDbkRTLEtBQUtrRixNQUFNd1osV0FBYSxhQUk1QnpULEVBQU1rVCxXQUNKTSxFQUNBLFFBQ0EsY0FDQSxJQTJDRixXQUNNUyxRQUFRLGdEQUNWeFYsRUFBU3lWLGdCQTFDYmxVLEVBQU1rVCxXQUNKTSxFQUNBLFFBQ0EsZUFDQSxJQTJFRixXQUdFLElBQUlXLEVBQWMsSUFBSXRmLEVBRWxCNEosRUFBUzNELGlCQUFpQmxILFFBQzVCdWdCLEVBQVl2WSxnQkFBZ0I2QyxFQUFTM0Qsa0JBR3ZDLElBQUlpQixFQUFXMEMsRUFBU2pCLE1BQU16QixTQUMxQnFZLEVBQWUsR0FFbkJyWSxFQUFTRyxTQUFRLFNBQUNDLEdBQ1pBLEVBQVFtQyxTQUFTQyxnQkFDbkI2VixFQUFhampCLEtBQUtnTCxFQUFRa1ksVUFFdEJsWSxFQUFRbUMsU0FBU0UsWUFDbkJDLEVBQVNJLGtCQUFrQjFOLEtBQUtnTCxPQVN0Q21ZLEVBSlcsSUFBSUMsS0FBSyxDQUFDQyxLQUFLQyxVQUFVTCxFQUFjLEtBQU0sSUFBSyxDQUMzRHpYLEtBQU0sZUFHTyxRQUFTLFdBbEcxQnFELEVBQU1rVCxXQUNKTSxFQUNBLFFBQ0EsY0FDQSxJQWlHRixZQUNxQixJQUFJa0IsS0FFVkMsTUFBTWxXLEVBQVNqQixPQUFPLFNBQVU5TCxHQUMzQyxJQUFJa2pCLEVBQU9KLEtBQUtDLFVBQVUvaUIsRUFBUSxLQUFNLEdBSXhDNGlCLEVBRlcsSUFBSUMsS0FBSyxDQUFDSyxHQUFPLENBQUVqWSxLQUFNLGVBRXJCLFFBQVMsY0FyRzVCcUQsRUFBTTZVLDBCQUNKckIsRUFDQSx3QkFTRixTQUEyQmhmLEdBR3pCaUssRUFBU3lWLGFBRVRZLEVBQVV0Z0IsTUFYWndMLEVBQU02VSwwQkFDSnJCLEVBQ0EsOEJBWUYsU0FBcUJoZixHQUduQnNnQixFQUFVdGdCLE1Bc0daLElBQUlxZixFQUFXN1QsRUFBTWdVLGdCQUFnQixXQUFZZixHQUNqRFksRUFBUzlaLFVBQVksY0FFckJpRyxFQUFNa1QsV0FDSlcsRUFDQSxRQUNBLGVBQ0EsSUFDQSxZQUNvQixJQUFJaGYsR0FDVnFaLFlBQVl6UCxNQUc1Qm9WLEVBQVMvUSxpQkFBaUIsWUFBWSxTQUFVdE8sR0FDekNBLEVBQUVrZixlQUFxRCxhQUFwQ2xmLEVBQUVrZixjQUFjQyxhQUFhcmYsS0FDbkRTLEtBQUtrRixNQUFNd1osV0FBYSxhQU01QixJQUFJTSxFQUFXL1QsRUFBTWdVLGdCQUFnQixXQUFZZixHQStCakQsT0E5QkFjLEVBQVNoYSxVQUFZLGNBRXJCZ2EsRUFBU2pSLGlCQUFpQixZQUFZLFNBQVV0TyxHQUN6Q0EsRUFBRWtmLGVBQXFELGFBQXBDbGYsRUFBRWtmLGNBQWNDLGFBQWFyZixLQUNuRFMsS0FBS2tGLE1BQU13WixXQUFhLGFBSTVCelQsRUFBTWtULFdBQVdhLEVBQVUsUUFBUyxRQUFTLElBRTdDLFdBQ0UvZixPQUFPK2dCLEtBQUssZ0NBaUJkbGYsUUFBUW1mLElBQUksb0JBRUwvQixFQWpKUCxTQUFTNkIsRUFBVXRnQixHQUNqQixJQUFJeWdCLEVBQU96Z0IsRUFBRTBnQixXQUFXQyxNQUFNLEdBRTlCLEdBQUtGLEVBQUt2aUIsS0FBSzBpQixTQUFTLFNBQXhCLENBS0EsSUFBSUMsRUFBUyxJQUFJQyxXQUVqQkQsRUFBT0UsV0FBV04sR0FFbEJJLEVBQU9HLE9BQVMsV0FDZCxJQUFJQyxFQUFTLElBQUlDLGVBRU9sQixLQUFLRyxNQUFNVSxFQUFPM2pCLFFBRXhCd0ssU0FBUSxTQUFDQyxHQUN6QixJQUFJd1osRUFBZUYsRUFBT2QsTUFBTXhZLEdBRWhDc0MsRUFBU2pCLE1BQU16QyxJQUFJNGEsR0FFZkEsRUFBYXJYLFNBQVNFLFlBQ3hCQyxFQUFTSSxrQkFBa0IxTixLQUFLd2tCLE9BS3RDTixFQUFPTyxRQUFVLFdBQ2ZDLE1BQU1SLEVBQU90ZixhQXpCYjhmLE1BQU0sbUNBc0VWLFNBQVN2QixFQUFTd0IsRUFBTXBqQixFQUFNcWpCLEdBQzVCLElBQUlDLEVBQVd0akIsRUFBTyxJQUFNcWpCLEVBRXhCRSxFQUFPcGMsU0FBU0MsY0FBYyxLQUNsQ21jLEVBQUtDLFNBQVdGLEVBRVpoaUIsT0FBT21pQixXQUFhbmlCLE9BQU9taUIsVUFBVUMsaUJBQ3ZDcGlCLE9BQU9taUIsVUFBVUMsaUJBQWlCTixFQUFNRSxJQUV4Q0MsRUFBS0ksS0FBT0MsSUFBSUMsZ0JBQWdCVCxHQUVoQ0csRUFBS08sUUFFTEYsSUFBSUcsZ0JBQWdCUixFQUFLSSxPQTRDN0IsU0FBUzlDLEVBQWVwWCxHQUN0QixJQUFJdWEsRUFBYSxFQUNmQyxFQUFZLEVBRWQsR0FDRUQsR0FBY3ZhLEVBQVF1YSxXQUN0QkMsR0FBYXhhLEVBQVF3YSxnQkFDYnhhLEVBQVVBLEVBQVF3WCxjQUU1QixNQUFPLENBQUMrQyxFQUFZQyxHQTNScEI5Z0IsUUFBUUMsS0FBSyxvQ0RjYjhnQixDQUFleFgsR0VyQm5CLFdBR0UsR0FBYyxPQUZGdkYsU0FBU3VSLGVBQWUsZUFFcEMsQ0FLQSxJQUFJcEwsRUFBUSxJQUFJL0UsRUFFWjRiLEVBQWNoZCxTQUFTQyxjQUFjLE9BRXpDK2MsRUFBWTljLFVBQVksY0FDeEI4YyxFQUFZdmlCLEdBQUssY0FDakJ1RixTQUFTOFIsS0FBS0MsWUFBWWlMLEdBRTFCLElBQUlDLEVBQWFqZCxTQUFTQyxjQUFjLE9BQ3hDZ2QsRUFBVy9jLFVBQVksYUFDdkIrYyxFQUFXeGlCLEdBQUssYUFDaEJ3aUIsRUFBV25RLFVBQVksU0FDdkJrUSxFQUFZNWMsTUFBTXlKLEtBQU8sTUFDekJvVCxFQUFXaFUsaUJBQWlCLFNBQVMsU0FBQ3RPLEdBQ0wsUUFBM0JxaUIsRUFBWTVjLE1BQU15SixLQUNwQjhMLHVCQUFzQixTQUFTdUgsSUFDN0IsSUFBSXBaLEVBQU1rWixFQUFZNWMsTUFBTXlKLEtBQUt1TixRQUFRLEtBQU0sSUFDL0N0VCxHQUFPLEdBQ1BrWixFQUFZNWMsTUFBTXlKLEtBQU8vRixFQUFNLEtBRTNCa1osRUFBWTVjLE1BQU15SixLQUFLdU4sUUFBUSxLQUFNLEtBQU8sTUFDOUM2RixFQUFXblEsVUFBWSxTQUN2QjZJLHNCQUFzQnVILFFBSTFCRixFQUFZNWMsTUFBTXlKLEtBQU8sTUFDekJvVCxFQUFXblEsVUFBWSxhQUczQmtRLEVBQVlqTCxZQUFZa0wsR0FFeEIsSUFBSXRLLEVBQVV4TSxFQUFNZ1UsZ0JBQWdCLE9BQVE2QyxHQUM1QjdXLEVBQU1rVCxXQUFXMUcsRUFBUyxJQUFLLEdBQUksSUFDekNsWSxHQUFLLGdCQUVLMEwsRUFBTWdVLGdCQUFnQixnQkFBaUI2QyxHQUUzRGhoQixRQUFRbWYsSUFBSSw0QkExQ1ZuZixRQUFRQyxLQUFLLHVDRmtCYmtoQixJQUNPLEksc0NBR081WCxHQU1kLE9HOUJKLFNBQWlDQSxHQUcvQixHQUFjLE9BRkZ2RixTQUFTdVIsZUFBZSxxQkFFcEMsQ0FLQSxJQUFJcEwsRUFBUSxJQUFJL0UsRUFFWmdjLEVBQXdCalgsRUFBTWdVLGdCQUNoQyxvQkFDQWtELGVBR0ZsWCxFQUFNRyxTQUFTZ1gsYUFBZW5YLEVBQU1vWCxtQkFDbEMsQ0FDRXZTLE9BQVFvUyxFQUNSdGQsS0FBTSxTQUNOckYsR0FBSSxTQUNKNUIsS0FBTSxrQkFDTlMsTUFBTyxTQUNQa2tCLFFBQVMsU0FDVEMsUUFBUyxJQUVYQyxHQUtGdlgsRUFBTUcsU0FBU3FYLFdBQWF4WCxFQUFNb1gsbUJBQ2hDLENBQ0V2UyxPQUFRb1MsRUFDUnRkLEtBQU0sT0FDTnJGLEdBQUksT0FDSjVCLEtBQU0sa0JBQ05TLE1BQU8sT0FDUGtrQixRQUFTLFVBQ1RDLFFBQVMsSUFFWEMsR0FHRnZYLEVBQU1HLFNBQVNzWCxhQUFlelgsRUFBTW9YLG1CQUNsQyxDQUNFdlMsT0FBUW9TLEVBQ1J0ZCxLQUFNLFNBQ05yRixHQUFJLFNBQ0o1QixLQUFNLGtCQUNOUyxNQUFPLFNBQ1Bra0IsUUFBUyxZQUNUQyxRQUFTLElBRVhDLEdBR0Z2WCxFQUFNRyxTQUFTdVgsWUFBYzFYLEVBQU1vWCxtQkFDakMsQ0FDRXZTLE9BQVFvUyxFQUNSdGQsS0FBTSxRQUNOckYsR0FBSSxRQUNKNUIsS0FBTSxrQkFDTlMsTUFBTyxRQUNQa2tCLFFBQVMsV0FDVEMsUUFBUyxJQUVYQyxHQUdGdlgsRUFBTUcsU0FBU2lPLFdBQWFwTyxFQUFNMlgsd0JBQ2hDLENBQ0U5UyxPQUFRb1MsRUFDUnRkLEtBQU0sT0FDTnJGLEdBQUksWUFDSjVCLEtBQU0sWUFDTlMsTUFBTyxZQUNQa2tCLFFBQVMsTUFDVEMsUUFBUyxLQWtDYixXQUNFbkosRUFBdUJwWixLQUFLK0ssUUFBU1YsTUFHdkN2SixRQUFRbWYsSUFBSSxrQ0EvR1ZuZixRQUFRQyxLQUFLLDZDQThFZixTQUFTeWhCLEVBQVdLLEdBR2xCLE9BRnFCQSxFQUFjekwsT0FBTzdYLElBR3hDLElBQUssVWY1Q0osU0FBNEI4SyxHQUNqQ0EsRUFBUS9MLEtBQUttTSxPQUFTLFNBQ3RCSixFQUFRQyxzQkFBd0IsR0FDaENELEVBQVFFLGtCQUFrQnVPLE9BQU96TyxFQUFRdEUsaUJBQWlCbEgsUUFFMUR3TCxFQUFRSyxjQUFjQyxjQUFlLEVld0MvQnlPLENBQTJCL08sR0FFM0IsTUFFRixJQUFLLE9BQ0grTyxFQUF5Qi9PLEdBRXpCLE1BRUYsSUFBSyxTQUNIK08sRUFBNkIvTyxHQUU3QixNQUVGLElBQUssUUFDSCtPLEVBQTBCL08sS0g3RTlCeVksQ0FBd0J6WSxHSXhCNUIsU0FBaUNBLEdBRy9CLEdBQWMsT0FGRnZGLFNBQVN1UixlQUFlLHFCQUVwQyxDQUtBLElBQUlwTCxFQUFRLElBQUkvRSxFQUNaK08sRUFBVyxJQUFJOUksRUFFZjRXLEVBQXNCOVgsRUFBTWdVLGdCQUFnQixhQUFja0QsZUFDOURZLEVBQW9CeGpCLEdBQUssb0JBRXpCLElBQUl5akIsRUFBUS9YLEVBQU1rVCxXQUNoQjRFLEVBQ0EsSUFDQSxzQkFDQSxJQUVGQyxFQUFNaGUsVUFBWSxjQUVsQmdlLEVBQU1qVixpQkFDSixTQUNBLFdBQ0UsSUFBSWtWLEVBQW9CbmUsU0FBU3VSLGVBQWUscUJBRVIsU0FBcEM0TSxFQUFrQi9kLE1BQU1zRyxTQUMxQnlYLEVBQWtCL2QsTUFBTXNHLFFBQVUsT0FFbEN4TCxLQUFLNFIsVUFBWSx3QkFFakJxUixFQUFrQi9kLE1BQU1zRyxRQUFVLE9BRWxDeEwsS0FBSzRSLFVBQVksMEJBR3JCLEdBR0YsSUFBSXNSLEVBQWFqWSxFQUFNa1QsV0FBVzRFLEVBQXFCLE9BQVEsR0FBSSxJQWdIbkUsT0EvR0FHLEVBQVdsZSxVQUFZLGFBQ3ZCa2UsRUFBVzNqQixHQUFLLG9CQUNoQjJqQixFQUFXaGUsTUFBTXNHLFFBQVUsT0FFSyxDQUM5QixDQUFFNUcsS0FBTSxHQUFJZ0QsS0FBTSxvQkFBcUIyYSxRQUFTWSxFQUFTQyxRQUFRLEdBQ2pFLENBQ0V4ZSxLQUFNLEdBQ05nRCxLQUFNLHVCQUNOMmEsUUFBU2MsRUFDVEQsUUFBUSxHQUVWLENBQUV4ZSxLQUFNLFNBQVVnRCxLQUFNLHVCQUF3QjJhLFFBQVMsR0FBSWEsUUFBUSxHQUNyRSxDQUFFeGUsS0FBTSxPQUFRZ0QsS0FBTSxxQkFBc0IyYSxRQUFTLEdBQUlhLFFBQVEsR0FDakUsQ0FDRXhlLEtBQU0sV0FDTmdELEtBQU0seUJBQ04yYSxRQUFTLEdBQ1RhLFFBQVEsR0FFVixDQUFFeGUsS0FBTSxRQUFTZ0QsS0FBTSxzQkFBdUIyYSxRQUFTLEdBQUlhLFFBQVEsR0FDbkUsQ0FDRXhlLEtBQU0sV0FDTmdELEtBQU0sNEJBQ04yYSxRQUFTLEdBQ1RhLFFBQVEsR0FFVixDQUNFeGUsS0FBTSxXQUNOZ0QsS0FBTSwyQkFDTjJhLFFBQVMsR0FDVGEsUUFBUSxHQUVWLENBQ0V4ZSxLQUFNLFlBQ05nRCxLQUFNLDZCQUNOMmEsUUFBUyxHQUNUYSxRQUFRLEdBRVYsQ0FDRXhlLEtBQU0sWUFDTmdELEtBQU0sNEJBQ04yYSxRQUFTLEdBQ1RhLFFBQVEsR0FFVixDQUFFeGUsS0FBTSxRQUFTZ0QsS0FBTSxzQkFBdUIyYSxRQUFTLEdBQUlhLFFBQVEsR0FDbkUsQ0FBRXhlLEtBQU0sT0FBUWdELEtBQU0scUJBQXNCMmEsUUFBUyxHQUFJYSxRQUFRLEdBQ2pFLENBQUV4ZSxLQUFNLFFBQVNnRCxLQUFNLHNCQUF1QjJhLFFBQVMsSUFDdkQsQ0FBRTNkLEtBQU0sT0FBUWdELEtBQU0scUJBQXNCMmEsUUFBUyxHQUFJYSxRQUFRLEdBQ2pFLENBQ0V4ZSxLQUFNLFlBQ05nRCxLQUFNLDBCQUNOMmEsUUFBUyxHQUNUYSxRQUFRLEdBRVYsQ0FBRXhlLEtBQU0sT0FBUWdELEtBQU0scUJBQXNCMmEsUUFBUyxHQUFJYSxRQUFRLElBR3pDamMsU0FBUSxTQUFDQyxHQUM3QkEsRUFBUWdjLFNBQ1ZuWSxFQUFNRyxTQUFTaEUsRUFBUVEsTUFBUXFELEVBQU1vWCxtQkFDbkMsQ0FDRXZTLE9BQVFvVCxFQUNSdGUsS0FBTXdDLEVBQVF4QyxLQUNkckYsR0FBSTZILEVBQVFRLEtBQ1pqSyxLQUFNLGFBQ05TLE1BQU9nSixFQUFRUSxLQUNmMGEsUUFBU2xiLEVBQVFRLEtBQ2pCMmEsUUFBU25iLEVBQVFtYixVQUVuQixTQUFVTSxHQUNSLElBQUlTLEVBQWlCVCxFQUFjekwsT0FFL0JuQyxFQUFTM0ksUUFBUUMsU0FDbkIrVyxFQUFlaFksS0FBS0MsUUFJbEIrWCxFQUFlL2pCLEtBQU84SyxFQUFRL0wsS0FBS21KLFFBQ3JDNmIsRUFBZWhZLEtBQUtDLFFBQ3BCTixFQUFNRyxTQUFTQyxhQUFhbkcsTUFBTXNHLFFBQVUsT0FDNUNuQixFQUFRL0wsS0FBS21NLE9BQVMsU0FDdEJKLEVBQVEvTCxLQUFLbUosT0FBUyxPQUV0QjRDLEVBQVEvTCxLQUFLbU0sT0FBUyxpQkFDdEJKLEVBQVEvTCxLQUFLbUosT0FBUzZiLEVBQWUvakIsR0FDckMwTCxFQUFNRyxTQUFTQyxhQUFhbkcsTUFBTXNHLFFBQVUsZ0JBT3REUCxFQUFNRyxTQUFTQyxhQUFlSixFQUFNa1QsV0FDbEMrRSxFQUNBLFNBQ0EsU0FDQSxJQUNBLFdBQ0VsakIsS0FBS2tGLE1BQU1zRyxRQUFVLE9BQ3JCbkIsRUFBUS9MLEtBQUttTSxPQUFTLFNBQ3RCSixFQUFRL0wsS0FBS21KLE9BQVMsUUFHMUJ3RCxFQUFNRyxTQUFTQyxhQUFhOUwsR0FBSyxTQUNqQzBMLEVBQU1HLFNBQVNDLGFBQWFyRyxVQUFZLGVBQ3hDaUcsRUFBTUcsU0FBU0MsYUFBYXpELEtBQU8sUUFDbkNxRCxFQUFNRyxTQUFTQyxhQUFhbkcsTUFBTXNHLFFBQVUsT0FFNUMxSyxRQUFRbWYsSUFBSSw2QkFFTDhDLEVBcEpMamlCLFFBQVFDLEtBQUssNkNKcUJid2lCLENBQXdCbFosR0s1QjVCLFdBR0UsR0FBYyxPQUZGdkYsU0FBU3VSLGVBQWUsa0JBRXBDLENBS0EsSUFBSXBMLEVBQVEsSUFBSS9FLEVBRVpzZCxFQUFpQnZZLEVBQU1nVSxnQkFBZ0IsaUJBQWtCa0QsZUFDN0RxQixFQUFleGUsVUFBWSxpQkFFM0IsSUFBSWdlLEVBQVEvWCxFQUFNa1QsV0FDaEJxRixFQUNBLElBQ0EsMkJBQ0EsSUFFRlIsRUFBTWhlLFVBQVksY0FFbEJnZSxFQUFNalYsaUJBQ0osU0FDQSxXQUNFLElBQUlrVixFQUFvQm5lLFNBQVN1UixlQUFlLGFBRVIsVUFBcEM0TSxFQUFrQi9kLE1BQU1zRyxTQUMxQnlYLEVBQWtCL2QsTUFBTXNHLFFBQVUsT0FDbEN4TCxLQUFLNFIsVUFBWSw2QkFFakJxUixFQUFrQi9kLE1BQU1zRyxRQUFVLFFBRWxDeEwsS0FBSzRSLFVBQVksK0JBR3JCLEdBR0YsSUFBSTZSLEVBQVl4WSxFQUFNa1QsV0FBV3FGLEVBQWdCLE1BQU8sR0FBSSxJQUM1REMsRUFBVWxrQixHQUFLLFlBQ2Zra0IsRUFBVXZlLE1BQU1zRyxRQUFVLFFBRTFCLElBQUlrWSxFQUFjelksRUFBTWtULFdBQVdzRixFQUFXLE1BQU8sR0FBSSxJQUN6REMsRUFBWTFlLFVBQVksY0FDeEIwZSxFQUFZbmtCLEdBQUssY0FDakJta0IsRUFBWXhlLE1BQU1zRyxRQUFVLE9BRTVCLElBQUltWSxFQUFjMVksRUFBTWtULFdBQ3RCdUYsRUFDQSxTQUNBLFdBQ0EsSUFDQSxXQUdvQjVlLFNBQVN1UixlQUFlLHNCQUM5Qm5SLE1BQU1zRyxRQUFVLFFBQzVCbVksRUFBWXplLE1BQU0wZSxnQkFBa0IsZ0JBQ2xCOWUsU0FBU3VSLGVBQWUsc0JBQzlCblIsTUFBTXNHLFFBQVUsT0FDNUJxWSxFQUFZM2UsTUFBTTBlLGdCQUFrQixrQkFDbkI5ZSxTQUFTdVIsZUFBZSxxQkFDOUJuUixNQUFNc0csUUFBVSxPQUMzQnNZLEVBQVc1ZSxNQUFNMGUsZ0JBQWtCLHFCQUduQ0MsRUFBYzVZLEVBQU1rVCxXQUN0QnVGLEVBQ0EsU0FDQSxXQUNBLElBQ0EsV0FHb0I1ZSxTQUFTdVIsZUFBZSxzQkFDOUJuUixNQUFNc0csUUFBVSxPQUM1Qm1ZLEVBQVl6ZSxNQUFNMGUsZ0JBQWtCLGtCQUNsQjllLFNBQVN1UixlQUFlLHNCQUM5Qm5SLE1BQU1zRyxRQUFVLFFBQzVCcVksRUFBWTNlLE1BQU0wZSxnQkFBa0IsZ0JBQ25COWUsU0FBU3VSLGVBQWUscUJBQzlCblIsTUFBTXNHLFFBQVUsT0FDM0JzWSxFQUFXNWUsTUFBTTBlLGdCQUFrQixxQkFHbkNFLEVBQWE3WSxFQUFNa1QsV0FDckJ1RixFQUNBLFNBQ0EsVUFDQSxJQUNBLFdBQ29CNWUsU0FBU3VSLGVBQWUsc0JBQzlCblIsTUFBTXNHLFFBQVUsT0FDNUJtWSxFQUFZemUsTUFBTTBlLGdCQUFrQixrQkFDbEI5ZSxTQUFTdVIsZUFBZSxzQkFDOUJuUixNQUFNc0csUUFBVSxPQUM1QnFZLEVBQVkzZSxNQUFNMGUsZ0JBQWtCLGtCQUNuQjllLFNBQVN1UixlQUFlLHFCQUM5Qm5SLE1BQU1zRyxRQUFVLFFBQzNCc1ksRUFBVzVlLE1BQU0wZSxnQkFBa0IsbUJBSW5DRyxFQUFPOVksRUFBTWtULFdBQVdzRixFQUFXLE1BQU8sR0FBSSxJQUNsRE0sRUFBSy9lLFVBQVksT0FDakIrZSxFQUFLeGtCLEdBQUssT0FFVjBMLEVBQU1HLFNBQVM0WSxtQkFBcUIvWSxFQUFNa1QsV0FBVzRGLEVBQU0sTUFBTyxHQUFJLElBQ3RFOVksRUFBTUcsU0FBUzRZLG1CQUFtQmhmLFVBQVkscUJBQzlDaUcsRUFBTUcsU0FBUzRZLG1CQUFtQnprQixHQUFLLHFCQUV2QyxJQUFJMGtCLEVBQXFCaFosRUFBTWtULFdBQVc0RixFQUFNLE1BQU8sR0FBSSxJQUMzREUsRUFBbUJqZixVQUFZLHFCQUMvQmlmLEVBQW1CMWtCLEdBQUsscUJBRXhCLElBQUkya0IsRUFBb0JqWixFQUFNa1QsV0FBVzRGLEVBQU0sTUFBTyxHQUFJLElBQzFERyxFQUFrQmxmLFVBQVksb0JBQzlCa2YsRUFBa0Iza0IsR0FBSyxvQkFFdkJ1QixRQUFRbWYsSUFBSSxrQ0FuSFZuZixRQUFRQyxLQUFLLDBDTHlCYm9qQixHTXhCSixXQUNFLElBQUlsWixFQUFRLElBQUkvRSxFQUNabUUsRUFBVSxJQUFJMEssRUFDZEUsRUFBVyxJQUFJOUksRUFFbkJsQixFQUFNRyxTQUFTMk4sa0JBQW9COU4sRUFBTWdVLGdCQUN2QyxvQkFDQWtELGVBRUZsWCxFQUFNRyxTQUFTZ1osYUFBZW5aLEVBQU1rVCxXQUNsQ3BGLGtCQUNBLE9BQ0EsR0FDQSxJQUVGOU4sRUFBTUcsU0FBU2daLGFBQWE3a0IsR0FBSyxlQUNqQzBMLEVBQU1HLFNBQVNnWixhQUFhcGYsVUFBWSxlQUV4Q2lHLEVBQU1HLFNBQVNpWixlQUFpQnBaLEVBQU0yWCx3QkFDcEMsQ0FDRTlTLE9BQVFzVSxhQUNSeGYsS0FBTSxZQUNOckYsR0FBSSxXQUNKNUIsS0FBTSxXQUNOUyxNQUFPLFdBQ1Bra0IsUUFBUyxjQVFiLFdBQ0UsR0FBSXRpQixLQUFLK0ssUUFBUyxDQUdoQixJQUFJaUwsRUFBYyxJQUFJbFcsRUFFdEJtTCxFQUFNRyxTQUFTQyxhQUFhQyxLQUFLQyxRQUNqQ04sRUFBTUcsU0FBU0MsYUFBYW5HLE1BQU1zRyxRQUFVLE9BQzVDUCxFQUFNRyxTQUFTa1oscUJBQXFCcGYsTUFBTXNHLFFBQVUsT0FHcER5SixFQUFTM0ksUUFBUUMsVUFBVyxFQUU1QixJQUFJZ1ksRUFBc0J6ZixTQUFTMGYsY0FDakMsMENBR0ZuYSxFQUFROEssZUFBaUIsSUFBSXlGLEVBQVN2USxFQUFRdEUsaUJBQWlCbEgsUUFFL0R3TCxFQUFROEssZUFBZTdXLEtBQU9pbUIsRUFBb0JobEIsR0FFbEQwVixFQUFTd1AsZUFBZSxnQkFBaUJGLEVBQW9CaGxCLElBRTdEOEssRUFBUStLLHNCQUF3Qi9LLEVBQVErSyxzQkFBc0JtRCxPQUM1RGxPLEVBQVFQLG1CQUdWTyxFQUFRUCxrQkFBb0IsR0FTNUJPLEVBQVFFLGtCQUFrQnVPLE9BQU96TyxFQUFROEssZUFBZStCLE1BR3hEN00sRUFBUThLLGVBQWUrQixLQUFLbFIsSUFDMUJnUSxFQUFZNVAsZ0JBQWdCaUUsRUFBUThLLGVBQWUrQixPQUVyRDdNLEVBQVE4SyxlQUFlcUgseUJBV3ZCdlIsRUFBTUcsU0FBU2taLHFCQUFxQnBmLE1BQU1zRyxRQUFVLE9BQ3BEbkIsRUFBUUUsa0JBQWtCdU8sT0FBT3pPLEVBQVE4SyxlQUFlK0IsTUFFeEQ3TSxFQUFROEssZUFBZXVQLG9CQUV2QnJhLEVBQVE4SyxlQUFlK0IsS0FBSzdQLE9BQzFCZ0QsRUFBUThLLGVBQWUrQixLQUFLcFAsZ0JBQWdCLGtCQUc5Q3VDLEVBQVE4SyxlQUFlZ0Msa0JBQW1CLEVBRTFDOU0sRUFBUVAsa0JBQW9CLEdBRTVCTyxFQUFRUCxrQkFBb0JPLEVBQVFQLGtCQUFrQnlPLE9BQ3BEbE8sRUFBUStLLHVCQUVWL0ssRUFBUStLLHNCQUF3QixHQUVoQy9LLEVBQVE4SyxlQUFpQixLQUd6QkYsRUFBUzNJLFFBQVFDLFVBQVcsRUFHNUJsQyxFQUFRL0wsS0FBS21KLE9BQVMsS0FFdEJ3TixFQUFTd1AsZUFBZSxnQkFBaUIsT0FuRjdDeFosRUFBTUcsU0FBUzJOLGtCQUFrQjdULE1BQU1zRyxRQUFVLE9BdUZqRFAsRUFBTUcsU0FBU2taLHFCQUF1QnJaLEVBQU1rVCxXQUMxQ3BGLGtCQUNBLE9BQ0EsR0FDQSxJQUVGOU4sRUFBTUcsU0FBU2taLHFCQUFxQi9rQixHQUFLLHVCQUN6QzBMLEVBQU1HLFNBQVNrWixxQkFBcUJ0ZixVQUFZLHVCQUVoRGlHLEVBQU1HLFNBQVN1WixlQUFpQjFaLEVBQU1vWCxtQkFDcEMsQ0FDRXZTLE9BQVF3VSxxQkFDUjFmLEtBQU0sV0FDTnJGLEdBQUksV0FDSjVCLEtBQU0sbUJBQ05TLE1BQU8sV0FDUGtrQixRQUFTLFdBQ1RDLFFBQVMsS0FFWCxXQUNFLElBQUl2TSxFQUFjLElBQUlsVyxFQUV0Qm1WLEVBQVN3UCxlQUFlLGdCQUFpQixZQUV6Q3BhLEVBQVE4SyxlQUFlN1csS0FBTyxXQUM5QitMLEVBQVE4SyxlQUFldVAsb0JBQ3ZCcmEsRUFBUThLLGVBQWUrQixLQUFLN1AsT0FDMUJnRCxFQUFROEssZUFBZStCLEtBQUtwUCxnQkFBZ0Isa0JBRTlDdUMsRUFBUThLLGVBQWVnQyxrQkFBbUIsRUFDMUM5TSxFQUFROEssZUFBZTJHLHFCQUNyQnpSLEVBQVE4SyxlQUFlK0IsS0FDdkI3TSxFQUFROEssZUFBZTNRLFVBRXpCNkYsRUFBUUUsa0JBQWtCdU8sT0FBT3pPLEVBQVFFLGtCQUFrQjFMLFFBQzNEd0wsRUFBUThLLGVBQWUrQixLQUFLbFIsSUFDMUJnUSxFQUFZNVAsZ0JBQWdCaUUsRUFBUThLLGVBQWUrQixVQU16RGpNLEVBQU1HLFNBQVN1WixlQUFlNVosU0FBVSxFQUV4Q0UsRUFBTUcsU0FBU3daLGNBQWdCM1osRUFBTW9YLG1CQUNuQyxDQUNFdlMsT0FBUXdVLHFCQUNSMWYsS0FBTSxRQUNOckYsR0FBSSxRQUNKNUIsS0FBTSxtQkFDTlMsTUFBTyxRQUNQa2tCLFFBQVMsUUFDVEMsUUFBUyxLQUVYLFdBQ0V0TixFQUFTd1AsZUFBZSxnQkFBaUIsU0FFekNwYSxFQUFROEssZUFBZTdXLEtBQU8sV0FJbEMyTSxFQUFNRyxTQUFTeVosY0FBZ0I1WixFQUFNb1gsbUJBQ25DLENBQ0V2UyxPQUFRd1UscUJBQ1IxZixLQUFNLFFBQ05yRixHQUFJLFFBQ0o1QixLQUFNLG1CQUNOUyxNQUFPLFFBQ1Bra0IsUUFBUyxRQUNUQyxRQUFTLEtBRVgsV0FDRSxJQUFJdk0sRUFBYyxJQUFJbFcsRUFFdEJtVixFQUFTd1AsZUFBZSxnQkFBaUIsU0FFekNwYSxFQUFROEssZUFBZTdXLEtBQU8sUUFDOUIrTCxFQUFROEssZUFBZXVQLG9CQUN2QnJhLEVBQVE4SyxlQUFlcUgsb0JBRXZCblMsRUFBUUUsa0JBQWtCdU8sT0FBT3pPLEVBQVFFLGtCQUFrQjFMLFFBQzNEd0wsRUFBUThLLGVBQWUrQixLQUFLbFIsSUFDMUJnUSxFQUFZNVAsZ0JBQWdCaUUsRUFBUThLLGVBQWUrQixVTjdLdkQ0TixJQUVPLEksaUNBR0VoVixFQUFRaVYsRUFBYW5nQixFQUFNMmQsRUFBU3lDLEdBQzdDLElBQUlDLEVBQU1uZ0IsU0FBU0MsY0FBY2dnQixHQUtqQyxHQUpBalYsRUFBTytHLFlBQVlvTyxHQUVuQkEsRUFBSXJULFVBQVloTixFQUVBLEtBQVoyZCxFQUFnQixDQUNsQixJQUFJckksRUFBTXBWLFNBQVNDLGNBQWMsT0FDakNtVixFQUFJZ0wsSUFBTTNDLEVBQ1YwQyxFQUFJcE8sWUFBWXFELEdBT2xCLE1BSm9CLG1CQUFUOEssR0FDVEMsRUFBSWxYLGlCQUFpQixRQUFTaVgsR0FBTSxHQUcvQkMsSSxnREFHaUJuVixHQUFvQyxJQUE1QmxMLEVBQTRCLHVEQUFyQixjQUFlb2dCLEVBQU0sdUNBQ3hERyxFQUFRcmdCLFNBQVNDLGNBQWMsU0FDbkMrSyxFQUFPK0csWUFBWXNPLEdBQ25CQSxFQUFNdlQsVUFBWWhOLEVBRWxCLElBQUl3Z0IsRUFBY3RnQixTQUFTQyxjQUFjLFNBU3pDLE9BUkFxZ0IsRUFBWXhkLEtBQU8sT0FDbkJ3ZCxFQUFZcGdCLFVBQVksYUFDeEJtZ0IsRUFBTXRPLFlBQVl1TyxHQUVFLG1CQUFUSixHQUNURyxFQUFNcFgsaUJBQWlCLFNBQVVpWCxHQUFNLEdBR2xDRyxJLHlDQWVVaGxCLEVBQVE2a0IsR0FDekIsR0FBb0IsbUJBQVRBLEVBQVgsQ0FLQSxJQUFJSyxFQUFRdmdCLFNBQVNDLGNBQWMsU0FDbkNzZ0IsRUFBTXpkLEtBQU8sUUFDYnlkLEVBQU0xbkIsS0FBT3dDLEVBQU94QyxLQUNwQjBuQixFQUFNOWxCLEdBQUtZLEVBQU9aLEdBQ2xCOGxCLEVBQU1qbkIsTUFBUStCLEVBQU8vQixNQUNyQmluQixFQUFNdFgsaUJBQWlCLFFBQVNpWCxHQUNoQzdrQixFQUFPMlAsT0FBTytHLFlBQVl3TyxHQUUxQixJQUFJRixFQUFRcmdCLFNBQVNDLGNBQWMsU0FNbkMsR0FMQW9nQixFQUFNdlQsVUFBWXpSLEVBQU95RSxLQUN6QnVnQixFQUFNRyxRQUFVRCxFQUFNOWxCLEdBQ3RCNGxCLEVBQU1uQyxNQUFRN2lCLEVBQU9taUIsUUFDckJuaUIsRUFBTzJQLE9BQU8rRyxZQUFZc08sR0FFdEJobEIsRUFBT29pQixTQUE4QixLQUFuQnBpQixFQUFPb2lCLFFBQWdCLENBQzNDLElBQUlySSxFQUFNcFYsU0FBU0MsY0FBYyxPQUNqQ21WLEVBQUlnTCxJQUFNL2tCLEVBQU9vaUIsUUFDakI0QyxFQUFNdE8sWUFBWXFELEdBR3BCLE9BQU9tTCxFQXhCTHZrQixRQUFRRSxNQUFNZ2tCLEVBQU8sd0IsOENBd0NEN2tCLEVBQVE2a0IsR0FDOUIsR0FBb0IsbUJBQVRBLEVBQVgsQ0FLQSxJQUFJTyxFQUFXemdCLFNBQVNDLGNBQWMsU0FDdEN3Z0IsRUFBUzNkLEtBQU8sV0FDaEIyZCxFQUFTNW5CLEtBQU93QyxFQUFPeEMsS0FDdkI0bkIsRUFBU2htQixHQUFLWSxFQUFPWixHQUNyQmdtQixFQUFTbm5CLE1BQVErQixFQUFPL0IsTUFDeEJtbkIsRUFBU3hYLGlCQUFpQixRQUFTaVgsR0FDbkM3a0IsRUFBTzJQLE9BQU8rRyxZQUFZME8sR0FFMUIsSUFBSUosRUFBUXJnQixTQUFTQyxjQUFjLFNBTW5DLEdBTEFvZ0IsRUFBTXZULFVBQVl6UixFQUFPeUUsS0FDekJ1Z0IsRUFBTUcsUUFBVUMsRUFBU2htQixHQUN6QjRsQixFQUFNbkMsTUFBUTdpQixFQUFPbWlCLFFBQ3JCbmlCLEVBQU8yUCxPQUFPK0csWUFBWXNPLEdBRXRCaGxCLEVBQU9vaUIsU0FBOEIsS0FBbkJwaUIsRUFBT29pQixRQUFnQixDQUMzQyxJQUFJckksRUFBTXBWLFNBQVNDLGNBQWMsT0FDakNtVixFQUFJZ0wsSUFBTS9rQixFQUFPb2lCLFFBQ2pCNEMsRUFBTXRPLFlBQVlxRCxHQUdwQixPQUFPcUwsRUF4Qkx6a0IsUUFBUUUsTUFBTWdrQixFQUFPLHdCLHNDQTJCVFEsRUFBZS9MLEdBQzdCLElBQUl3TCxFQUFNbmdCLFNBQVNDLGNBQWMsT0FJakMsT0FIQWtnQixFQUFJamdCLFVBQVl3Z0IsRUFDaEJQLEVBQUkxbEIsR0FBS2ltQixFQUNUL0wsRUFBYzVDLFlBQVlvTyxHQUNuQkEsSSwyQ0FHWXhkLEdBU25CekgsS0FBS2daLHVCQUVhbFUsU0FBU3VSLGVBQWUsZUFDOUJuUixNQUFNc0csUUFBVSxPQUV4Qi9ELEVBQU9ySCxTQUFTRyxZTzlLeEIsU0FBbUNrSCxHQUNyQixJQUFJdkIsRUFBaEIsSUFDSStPLEVBQVcsSUFBSTlJLEVBRWZzWixFQUFjM2dCLFNBQVN1UixlQUFlLHNCQUN0Q3FQLEVBQU81Z0IsU0FBU0MsY0FBYyxPQUNsQzJnQixFQUFLbm1CLEdBQUsseUJBQ1ZrbUIsRUFBWTVPLFlBQVk2TyxHQUl4QixJQUZBLElBQUlDLEVBQWtCNXBCLE9BQU82cEIsUUFBUW5lLEVBQU9ySCxTQUFTRyxZQVRaLFdBV2hDM0UsR0FDUCxJQUFJaXFCLEVBQVMvZ0IsU0FBU0MsY0FBYyxPQUNwQzJnQixFQUFLN08sWUFBWWdQLEdBQ2pCQSxFQUFPN2dCLFVBQVksZ0JBRW5CLElBQUlKLEVBQU9FLFNBQVNDLGNBQWMsS0FDbEM4Z0IsRUFBT2hQLFlBQVlqUyxHQUNuQkEsRUFBS2dOLFVBQVkrVCxFQUFnQi9wQixHQUFHLEdBRXBDLElBQUlrcUIsT0FBSyxFQUNMMUcsRUFBYyxJQUFJdGYsRUFFdEIsR0FBcUMsa0JBQTFCNmxCLEVBQWdCL3BCLEdBQUcsR0FBa0IsRUFDOUNrcUIsRUFBUWhoQixTQUFTQyxjQUFjLFdBQ3pCeEYsR0FBS29tQixFQUFnQi9wQixHQUFHLEdBRTlCLElBQUltcUIsRUFBU2poQixTQUFTQyxjQUFjLFVBQ3BDZ2hCLEVBQU9uaEIsS0FBTyxPQUNkbWhCLEVBQU8zbkIsTUFBUSxPQUNmMG5CLEVBQU05ZixJQUFJK2YsSUFDVkEsRUFBU2poQixTQUFTQyxjQUFjLFdBQ3pCSCxLQUFPLFFBQ2RtaEIsRUFBTzNuQixNQUFRLFFBQ2YwbkIsRUFBTTlmLElBQUkrZixHQUVWRCxFQUFNMW5CLE1BQVF1bkIsRUFBZ0IvcEIsR0FBRyxHQUVqQ2txQixFQUFNL1gsaUJBQ0osU0FDQSxXQUNFLElBQUkzUCxFQUFRcWhCLEtBQUtHLE1BQU1rRyxFQUFNMW5CLE9BRTdCZ2hCLEVBQVk5WCxxQkFBcUJ3ZSxFQUFNdm1CLEdBQUluQixFQUFPcUosR0FDbER3TixFQUFTd1AsZUFDUCxzQkFBd0JxQixFQUFNdm1CLEdBQzlCdW1CLEVBQU0xbkIsVUFHVixRQUdGMG5CLEVBQVFoaEIsU0FBU0MsY0FBYyxVQUV6QnhGLEdBQUtvbUIsRUFBZ0IvcEIsR0FBRyxHQUM5QmtxQixFQUFNbmYsSUFBTSxLQUNabWYsRUFBTUUsS0FBTyxHQUViRixFQUFNbGUsS0FBTyxTQUNia2UsRUFBTTFuQixNQUFRK0QsS0FBSzBQLE1BQThCLElBQXhCOFQsRUFBZ0IvcEIsR0FBRyxJQUFhLElBRXpEa3FCLEVBQU0vWCxpQkFDSixTQUNBLFdBQ0VxUixFQUFZOVgscUJBQXFCd2UsRUFBTXZtQixJQUFLdW1CLEVBQU0xbkIsTUFBT3FKLEdBQ3pEd04sRUFBU3dQLGVBQ1Asc0JBQXdCcUIsRUFBTXZtQixHQUM5QnVtQixFQUFNMW5CLFVBR1YsR0FJQXVuQixFQUFnQi9wQixHQUFHLEdBQUdxcUIsY0FBY3pOLFNBQVMsY0FDL0NzTixFQUFNRSxLQUFPLEVBQ2JGLEVBQU1uZixJQUFNLEdBR1ZnZixFQUFnQi9wQixHQUFHLEdBQUdxcUIsY0FBY3pOLFNBQVMsWUFDL0NzTixFQUFNRSxLQUFPLEVBQ2JGLEVBQU1uZixJQUFNLEVBQ1ptZixFQUFNbGYsSUFBTSxHQVlkaWYsRUFBT2hQLFlBQVlpUCxJQW5GWmxxQixFQUFJLEVBQUdBLEVBQUkrcEIsRUFBZ0I3cEIsT0FBUUYsSUFBSyxFQUF4Q0EsR1BvS0xzcUIsQ0FBMEJ6ZSxHUWhMaEMsU0FBbUNBLEdBQ2pDLElBQUl3RCxFQUFRLElBQUkvRSxFQUVaaWdCLEVBQWNyaEIsU0FBU3VSLGVBQWUsc0JBQ3RDK1AsRUFBZXRoQixTQUFTQyxjQUFjLE9BQzFDcWhCLEVBQWE3bUIsR0FBSyx5QkFDbEI0bUIsRUFBWXRQLFlBQVl1UCxHQUl4QixJQUFJQyxFQUFnQixDQUNsQixvQkFDQSxxQkFDQSxvQkFDQSxvQkFDQSxxQkFDQSxzQkFDQSxxQkFDQSxvQkFDQSxtQkFDQSx1QkFDQSx1QkFDQSxvQkFDQSxpQkFDQSxpQkFDQSxrQkFHRVIsRUFBUy9nQixTQUFTQyxjQUFjLE9BQ3BDOGdCLEVBQU83Z0IsVUFBWSxnQkFFbkIsSUFBSUosRUFBT0UsU0FBU0MsY0FBYyxLQUNsQzhnQixFQUFPaFAsWUFBWWpTLEdBQ25CQSxFQUFLZ04sVUFBWSxPQUVqQixJQUFJMFUsRUFBb0J4aEIsU0FBU0MsY0FBYyxVQUMvQ3VoQixFQUFrQi9tQixHQUFLLGVBQ3ZCK21CLEVBQWtCdGhCLFVBQVksaUJBRTlCb2hCLEVBQWF2UCxZQUFZZ1AsR0FFekIsSUFBSyxJQUFJam5CLEVBQUksRUFBR0EsRUFBSXluQixFQUFjdnFCLE9BQVE4QyxJQUFLLENBQzdDLElBQUltbkIsRUFBU2poQixTQUFTQyxjQUFjLFVBQ3BDZ2hCLEVBQU9uaEIsS0FBT3loQixFQUFjem5CLEdBQzVCbW5CLEVBQU8zbkIsTUFBUWlvQixFQUFjem5CLEdBQzdCMG5CLEVBQWtCdGdCLElBQUkrZixHQUd4Qk8sRUFBa0Jsb0IsTUFBUXFKLEVBQU9qRyxTQUFTb0csS0FDMUMwZSxFQUFrQkMsU0FBVyxPQUU3QlYsRUFBT2hQLFlBQVl5UCxHQUluQlQsRUFBUzVhLEVBQU11YixpQkFBaUIsUUFBUyxRQUFTL2UsRUFBT2pHLFNBQVM0QyxPQUNsRWdpQixFQUFhdlAsWUFBWWdQLEdBQ3pCLElBQUlZLEVBQXFCeGIsRUFBTXliLFNBQVNiLEdBQ3hDWSxFQUFtQnpoQixVQUFZLGFBQy9CeWhCLEVBQW1Ccm9CLE1BQVEsSUFBTXFKLEVBQU9qRyxTQUFTNEMsTUFBTXVpQixlQUV2REYsRUFBbUIxWSxpQkFDakIsU0FFQSxXQUNFdEcsRUFBT2pHLFNBQVM0QyxNQUFRLElBQUlrTSxRQUFNdFEsS0FBSzVCLE9BRXZDLElBQUlnRyxFQUFRcUQsRUFBT2pHLFNBQVM0QyxNQUU1QndpQixFQUFrQ3hpQixHQUNsQ3lpQixFQUE0QnppQixNQU1oQzZHLEVBQU1rVCxXQUFXaUksRUFBYyxJQUFLLG1CQUFvQixJQUl4RCxJQUZBLElBQUlVLEVBQXFCL3FCLE9BQU82cEIsUUFBUW5lLEVBQU9qRyxTQUFTNEMsT0E5RWYsV0FnRmhDeEksR0FDUCxJQUFJaXFCLEVBQVMvZ0IsU0FBU0MsY0FBYyxPQUNwQ3FoQixFQUFhdlAsWUFBWWdQLEdBQ3pCQSxFQUFPN2dCLFVBQVkscUJBRW5CLElBQUlKLEVBQU9FLFNBQVNDLGNBQWMsS0FFbEMsT0FEQThnQixFQUFPaFAsWUFBWWpTLEdBQ1hraUIsRUFBbUJsckIsR0FBRyxJQUM1QixJQUFLLElBQ0hnSixFQUFLZ04sVUFBWSxNQUNqQixNQUNGLElBQUssSUFDSGhOLEVBQUtnTixVQUFZLFFBQ2pCLE1BQ0YsSUFBSyxJQUNIaE4sRUFBS2dOLFVBQVksT0FPckIsSUFBSW1WLEVBQWNqaUIsU0FBU0MsY0FBYyxTQUN6Q2dpQixFQUFZeG5CLEdBQUt1bkIsRUFBbUJsckIsR0FBRyxHQUFLLFVBQzVDbXJCLEVBQVluZixLQUFPLFNBQ25CbWYsRUFBWTNvQixNQUFRMG9CLEVBQW1CbHJCLEdBQUcsR0FDMUNtckIsRUFBWWYsS0FBTyxJQUNuQmUsRUFBWXBnQixJQUFNLEVBQ2xCb2dCLEVBQVluZ0IsSUFBTSxFQUNsQm1nQixFQUFZaFosaUJBQ1YsU0FDQSxXQUNFLElBQUlpWixFQUFrQkYsRUFBbUJsckIsR0FBRyxHQUU1QzZMLEVBQU9qRyxTQUFTNEMsTUFBTTRpQixHQUFtQkQsRUFBWTNvQixNQUVyRCxJQUFJZ0csRUFBUXFELEVBQU9qRyxTQUFTNEMsTUFFNUI2aUIsRUFBaUI3aUIsR0FDakJ3aUIsRUFBa0N4aUIsTUFFcEMsR0FHRnloQixFQUFPaFAsWUFBWWtRLEdBRW5CLElBQUlHLEVBQWNwaUIsU0FBU0MsY0FBYyxTQUN6Q21pQixFQUFZM25CLEdBQUt1bkIsRUFBbUJsckIsR0FBRyxHQUN2Q3NyQixFQUFZdGYsS0FBTyxRQUNuQnNmLEVBQVlsaUIsVUFBWSxTQUV4QjZnQixFQUFPaFAsWUFBWXFRLEdBRW5CQSxFQUFZOW9CLE1BQVEwb0IsRUFBbUJsckIsR0FBRyxHQUMxQ3NyQixFQUFZbEIsS0FBTyxLQUNuQmtCLEVBQVl2Z0IsSUFBTSxFQUNsQnVnQixFQUFZdGdCLElBQU0sRUFFbEJzZ0IsRUFBWW5aLGlCQUNWLFNBQ0EsV0FDRSxJQUFJaVosRUFBa0JGLEVBQW1CbHJCLEdBQUcsR0FFNUM2TCxFQUFPakcsU0FBUzRDLE1BQU00aUIsR0FBbUJFLEVBQVk5b0IsTUFJckQ2b0IsRUFGWXhmLEVBQU9qRyxTQUFTNEMsT0FHNUJ5aUIsRUFBNEJwZixFQUFPakcsU0FBUzRDLFVBRTlDLElBdEVLeEksRUFBSSxFQUFHQSxFQUFJa3JCLEVBQW1CaHJCLE9BQVFGLElBQUssRUFBM0NBLEdBMEVULFNBQVNxckIsRUFBaUI3aUIsR0FDUFUsU0FBU3VSLGVBQWUsU0FDOUJqWSxNQUFRLElBQU1nRyxFQUFNdWlCLGVBR2pDLFNBQVNDLEVBQWtDeGlCLEdBQ3RCVSxTQUFTdVIsZUFBZSxLQUM5QmpZLE1BQVFnRyxFQUFNbkcsRUFDTjZHLFNBQVN1UixlQUFlLEtBQzlCalksTUFBUWdHLEVBQU0raUIsRUFDVHJpQixTQUFTdVIsZUFBZSxLQUM5QmpZLE1BQVFnRyxFQUFNZ1gsRUFHOUIsU0FBU3lMLEVBQTRCemlCLEdBQ2hCVSxTQUFTdVIsZUFBZSxZQUM5QmpZLE1BQVErRCxLQUFLMFAsTUFBZ0IsSUFBVnpOLEVBQU1uRyxHQUFZLElBQzdCNkcsU0FBU3VSLGVBQWUsWUFDOUJqWSxNQUFRK0QsS0FBSzBQLE1BQWdCLElBQVZ6TixFQUFNK2lCLEdBQVksSUFDaENyaUIsU0FBU3VSLGVBQWUsWUFDOUJqWSxNQUFRK0QsS0FBSzBQLE1BQWdCLElBQVZ6TixFQUFNZ1gsR0FBWSxLUktuRGdNLENBQTBCM2YsR1NuTDlCLFNBQWtDQSxHQUNoQyxJQUFJd0QsRUFBUSxJQUFJL0UsRUFDWitPLEVBQVcsSUFBSTlJLEVBRWZrYixFQUFhdmlCLFNBQVN1UixlQUFlLHFCQUNyQ2lSLEVBQWN4aUIsU0FBU0MsY0FBYyxPQUN6Q3VpQixFQUFZL25CLEdBQUssd0JBQ2pCOG5CLEVBQVd4USxZQUFZeVEsR0FFdkIsSUFBSUMsRUFBVXRjLEVBQU11YixpQkFBaUIsS0FBTSxTQUFVL2UsRUFBT2xJLElBQzVEK25CLEVBQVl6USxZQUFZMFEsR0FHeEIsSUFBSTFCLEVBQVM1YSxFQUFNdWIsaUJBQWlCLE9BQVEsU0FBVS9lLEVBQU85SixNQUM3RDJwQixFQUFZelEsWUFBWWdQLEdBQ3hCLElBQUlDLEVBQVE3YSxFQUFNeWIsU0FBU2IsR0FDM0JDLEVBQU0vWCxpQkFDSixTQUNBLFdBQ0V0RyxFQUFPOUosS0FBT21vQixFQUFNMW5CLFNBRXRCLEdBR1k2TSxFQUFNdWIsaUJBQWlCLEtBQU0sU0FBVS9lLEVBQU9sSSxJQUNwRGduQixVQUFXLEVBRW5CdGIsRUFBTWtULFdBQVdtSixFQUFhLElBQUssV0FBWSxJQUkvQyxJQUZBLElBQUlFLEVBQW9CenJCLE9BQU82cEIsUUFBUW5lLEVBQU81RixVQTdCTixXQStCL0JqRyxHQUNQLElBQUlvckIsRUFBa0JRLEVBQWtCNXJCLEdBQUcsR0FDdkM2ckIsRUFBbUJ0bEIsS0FBSzBQLE1BQWdDLElBQTFCMlYsRUFBa0I1ckIsR0FBRyxJQUFhLElBRWhFaXFCLEVBQVM1YSxFQUFNdWIsaUJBQ2pCLFlBQWNRLEVBQ2QsU0FDQVMsR0FFRkgsRUFBWXpRLFlBQVlnUCxHQUN4QixJQUFJQyxFQUFRN2EsRUFBTXliLFNBQVNiLEdBQzNCQyxFQUFNRSxLQUFPLEdBRWJGLEVBQU0vWCxpQkFDSixTQUNBLFdBQ0V0RyxFQUFPNUYsU0FBU21sQixHQUFtQmxCLEVBQU0xbkIsTUFDekM2VyxFQUFTd1AsZUFBZSxxQkFBdUJxQixFQUFNdm1CLEdBQUl1bUIsRUFBTTFuQixVQUVqRSxJQW5CS3hDLEVBQUksRUFBR0EsRUFBSTRyQixFQUFrQjFyQixPQUFRRixJQUFLLEVBQTFDQSxHQXVCVHFQLEVBQU1rVCxXQUFXbUosRUFBYSxJQUFLLFdBQVksSUFFL0NFLEVBQW9CenJCLE9BQU82cEIsUUFBUSxDQUNqQzFrQixFQUFHdUcsRUFBT29MLFNBQVMzUixFQUNuQkMsRUFBR3NHLEVBQU9vTCxTQUFTMVIsRUFDbkJDLEVBQUdxRyxFQUFPb0wsU0FBU3pSLElBR3JCLElBOUR3QyxlQThEL0J4RixHQUNQLElBQUlvckIsRUFBa0JRLEVBQWtCNXJCLEdBQUcsR0FDdkM2ckIsRUFBbUJ0bEIsS0FBSzBQLE1BQWdDLElBQTFCMlYsRUFBa0I1ckIsR0FBRyxJQUFhLElBRWhFaXFCLEVBQVM1YSxFQUFNdWIsaUJBQ2pCLFlBQWNRLEVBQ2QsU0FDQVMsR0FFRkgsRUFBWXpRLFlBQVlnUCxHQUN4QixJQUFJQyxFQUFRN2EsRUFBTXliLFNBQVNiLEdBRTNCQyxFQUFNRSxLQUFPLEdBQ2JGLEVBQU0vWCxpQkFDSixTQUNBLFdBQ0V0RyxFQUFPb0wsU0FBU21VLEdBQW1CbEIsRUFBTTFuQixNQUN6QzZXLEVBQVN3UCxlQUFlLHFCQUF1QnFCLEVBQU12bUIsR0FBSXVtQixFQUFNMW5CLFVBRWpFLElBbkJLeEMsRUFBSSxFQUFHQSxFQUFJNHJCLEVBQWtCMXJCLE9BQVFGLElBQUssRUFBMUNBLEdBdUJUcVAsRUFBTWtULFdBQVdtSixFQUFhLElBQUssUUFBUyxJQUU1Q0UsRUFBb0J6ckIsT0FBTzZwQixRQUFRbmUsRUFBT2pCLE9BRTFDLElBekZ3QyxlQXlGL0I1SyxHQUNQLElBQUlvckIsRUFBa0JRLEVBQWtCNXJCLEdBQUcsR0FBR3NnQixRQUFRLElBQUssSUFDdkR1TCxFQUFtQnRsQixLQUFLMFAsTUFBZ0MsSUFBMUIyVixFQUFrQjVyQixHQUFHLElBQWEsSUFFaEVpcUIsRUFBUzVhLEVBQU11YixpQkFDakIsU0FBV1EsRUFDWCxTQUNBUyxHQUVGSCxFQUFZelEsWUFBWWdQLEdBQ3hCLElBQUlDLEVBQVE3YSxFQUFNeWIsU0FBU2IsR0FFM0JDLEVBQU1FLEtBQU8sR0FDYkYsRUFBTS9YLGlCQUNKLFNBQ0EsV0FDRXRHLEVBQU9qQixNQUFNd2dCLEdBQW1CbEIsRUFBTTFuQixNQUN0QzZXLEVBQVN3UCxlQUFlLHFCQUF1QnFCLEVBQU12bUIsR0FBSXVtQixFQUFNMW5CLFVBRWpFLElBbkJLeEMsRUFBSSxFQUFHQSxFQUFJNHJCLEVBQWtCMXJCLE9BQVFGLElBQUssRUFBMUNBLEdUMkZQOHJCLENBQXlCamdCLEssdUNBR1Z1ZixFQUFpQlcsRUFBV0YsR0FDM0MsSUFBSTVCLEVBQVMvZ0IsU0FBU0MsY0FBYyxPQUVwQzhnQixFQUFPN2dCLFVBQVksZ0JBRW5CLElBQUlKLEVBQU9FLFNBQVNDLGNBQWMsS0FDbEM4Z0IsRUFBT2hQLFlBQVlqUyxHQUNuQkEsRUFBS2dOLFVBQVlvVixFQUVqQixJQUFJbEIsRUFBUWhoQixTQUFTQyxjQUFjLFNBUW5DLE9BUEErZ0IsRUFBTXZtQixHQUFLeW5CLEVBQ1hsQixFQUFNbGUsS0FBTytmLEVBRWI5QixFQUFPaFAsWUFBWWlQLEdBRW5CQSxFQUFNMW5CLE1BQVFxcEIsRUFFUDVCLEksK0JBR0FBLEdBRVAsT0FEWUEsRUFBTytCLHFCQUFxQixTQUMzQixLLDJDQUdNbmdCLEdBQ25CLEdBQUtBLEVBQU9ySCxTQUFTRyxXQVFyQixJQUZBLElBQUlvbEIsRUFBa0I1cEIsT0FBTzZwQixRQUFRbmUsRUFBT3JILFNBQVNHLFlBRTVDM0UsRUFBSSxFQUFHQSxFQUFJK3BCLEVBQWdCN3BCLE9BQVFGLElBQUssQ0FDL0MsSUFBSXFwQixFQUFNbmdCLFNBQVN1UixlQUFlc1AsRUFBZ0IvcEIsR0FBRyxJQUVwQyxXQUFicXBCLEVBQUlyZCxPQUNOcWQsRUFBSTdtQixNQUFRK0QsS0FBSzBQLE1BQThCLElBQXhCOFQsRUFBZ0IvcEIsR0FBRyxJQUFhLFVBWHpEa0YsUUFBUUMsS0FBSyxlLG9EQWlCZixJQUFJOG1CLEVBQU8vaUIsU0FBU3VSLGVBQWUsMEJBQy9Cd1IsR0FBTUEsRUFBS3hnQixXLDZDQUlmckgsS0FBSzhuQiw4QkFFTCxJQUFJRCxFQUFPL2lCLFNBQVN1UixlQUFlLDBCQUMvQndSLEdBQU1BLEVBQUt4Z0IsVUFDZndnQixFQUFPL2lCLFNBQVN1UixlQUFlLDJCQUNyQndSLEVBQUt4Z0IsU0FFZnFjLFlBQVl4ZSxNQUFNc0csUUFBVSxXLHFGVWxQaEMsU0FBU3VjLEVBQVQsR0FBb0MsSUFBbEJwcUIsRUFBa0IsRUFBbEJBLEtBQU1xcUIsRUFBWSxFQUFaQSxTQUl0QixPQUNFLDRCQUFRaGpCLFVBQVUsbUJBQW1CaWpCLFFBSnZDLFdBQ0VELEVBQVNycUIsS0FJTkEsR0FLUG9xQixFQUFPRyxVQUFZLENBQ2pCdnFCLEtBQU13cUIsSUFBVUMsT0FDaEJKLFNBQVVHLElBQVVuRCxNQUdQK0MsUUNmWE0sRyxNQUFVLENBQ1pDLFFBQVMsZ0JBQ1RDLFNBQVUsaUJBQ1ZDLE9BQVEsaUJBbUhLQyxNQWhIZixTQUFnQkMsR0FBTyxNQUNrQkMsb0JBQVMsR0FEM0IsV0FDZEMsRUFEYyxLQUNHQyxFQURILE9BRUdGLG1CQUFTLE9BRlosV0FFZEcsRUFGYyxLQUVSQyxFQUZRLE9BR0dKLG1CQUFTLFFBSFosV0FHZEssRUFIYyxLQUdSQyxFQUhRLE9BSVdOLG1CQUFTLE1BSnBCLFdBSWRPLEVBSmMsS0FJSkMsRUFKSSxPQUtlUixtQkFBUyxDQUFFem5CLE9BQUdMLEVBQVdNLE9BQUdOLElBTDNDLFdBS2R1b0IsRUFMYyxLQUtGQyxFQUxFLEtBTWZDLEVBQWVDLHFCQUFXQyxJQUM1QnZVLEVBQVcsSUFBSTlJLEVBNkNuQixTQUFTc2QsSUFnQlQsSUFBZ0JDLEVBQU9DLEVBZG5CamhCLE1BQU1naEIsTUFBUSxJQUNkaGhCLE1BQU1naEIsTUFBUTVrQixTQUFTOGtCLGdCQUFnQnRULFlBQWMsSUFDckQ1TixNQUFNaWhCLE1BQVEsSUFDZGpoQixNQUFNaWhCLE1BQVE3a0IsU0FBUzhrQixnQkFBZ0JyVCxhQUFlLEtBSWxDLElBQWxCN04sTUFBTW1oQixTQU9JSCxFQUhQaGhCLE1BQU1naEIsTUFHUUMsRUFIRGpoQixNQUFNaWhCLE1BSTFCWixFQUFRVyxFQUFRTixFQUFXbG9CLEVBQUlrb0IsRUFBV1UsWUFBWTVvQixFQUFJLE1BQzFEK25CLEVBQVFVLEVBQVFQLEVBQVdqb0IsRUFBSWlvQixFQUFXVSxZQUFZM29CLEVBQUksT0FSeEQwbkIsR0FBWSxJQWVoQixPQXBFQWtCLHFCQUFVLFdBSVIsT0FISW5CLEdBQ0Y5akIsU0FBU2lKLGlCQUFpQixZQUFhMGIsR0FBYSxHQUUvQyxXQUNMM2tCLFNBQVN3SixvQkFBb0IsWUFBYW1iLEdBQWEsTUFFeEQsQ0FBQ2IsSUFFSm1CLHFCQUFVLFdBQ1JaLEVBQVlULEVBQU1RLFlBQ2pCLElBMERELHlCQUNFbGtCLFVBQVUsU0FDVmdsQixVQVBKLFdBQ0VuQixHQUFZLElBT1YzakIsTUFBTyxDQUFFeUosS0FBTW1hLEVBQU1qYSxJQUFLbWEsSUFFMUIseUJBQUtoa0IsVUFBVSxXQUFXaWxCLFlBakQ5QixXQUNFLEdBQXNCLElBQWxCdmhCLE1BQU1taEIsUUFBVixDQUNBLElBQUlLLEVBQWFDLGlCQUFpQnpoQixNQUFNME8sT0FBT2dULFdBQVdBLFlBQ3RETixFQUFjLENBQ2hCNW9CLEVBQUdncEIsRUFBV3ZiLEtBQUt1TixRQUFRLEtBQU0sSUFDakMvYSxFQUFHK29CLEVBQVdyYixJQUFJcU4sUUFBUSxLQUFNLEtBRTlCeEssRUFBUSxDQUNWeFEsRUFBR3dILE1BQU0yaEIsUUFDVGxwQixFQUFHdUgsTUFBTTRoQixRQUNUUixZQUFhQSxHQUVmVCxFQUFjM1gsR0FDZG1YLEdBQVksR0FDWm5nQixNQUFNb1Asa0JBQ05wUCxNQUFNNkYsb0JBbUNEOFosRUFBUUssRUFBTTZCLE9BQ2YsNEJBQVF2bEIsVUFBVSx1QkFBdUJpakIsUUF2RC9DLFdBQ0VTLEVBQU1WLFNBQVMsTUFzRFgsTUFJRix5QkFBS2hqQixVQUFVLGNBQ2IseUJBQUtBLFVBQVUsaUJBQ0ksWUFBaEIwakIsRUFBTTZCLE9BQXVCakIsRUFBYXBQLElBQ3pDLHlCQUFLbFYsVUFBVSxrQkFBa0JrZ0IsSUFBS29FLEVBQWFwUCxNQUVuRCxJQUdKLHlCQUFLbFYsVUFBVSxxQkFDYix5Q0FFRSwyQkFBTzRDLEtBQUssV0FBV2pLLEtBQUssV0FBVzZzQixTQTFFakQsU0FBd0IvcUIsR0FDdEJxQixRQUFRbWYsSUFBSSxpQkFBa0J4Z0IsRUFBRTJYLE9BQU9yTSxhQTJFakMsNEJBQVEvRixVQUFVLG1CQUFtQmlqQixRQWhGN0MsV0FDRWhULEVBQVN3UCxlQUFlLGdCQUFpQjZFLEVBQWFwRSxPQStFaEQsU0FLYSxZQUFoQndELEVBQU02QixPQUF1QnJCLElDakhwQyxTQUFTdUIsRUFBUy9CLEdBQ2hCLElBRHVCLEVBR0dDLG1CQUFTLElBSFosV0FHaEI0QixFQUhnQixLQUdUdkMsRUFIUyxPQUlTVyxtQkFBUyxNQUpsQixXQUloQk8sRUFKZ0IsS0FJTkMsRUFKTSxLQVV2QixPQUpBWSxxQkFBVSxXQUNSWixFQUFZVCxFQUFNUSxZQUNqQixJQUdELHlCQUFLbGtCLFVBQVUsUUFWRCxDQUFDLFVBQVcsV0FBWSxVQVczQjVGLEtBQUksU0FBQ3NyQixHQUFELE9BQ1gsa0JBQUMsRUFBRCxDQUFRL3NCLEtBQU0rc0IsRUFBS2hzQixJQUFLZ3NCLEVBQUsxQyxTQUFVQSxPQUV4Q3VDLEdBQ0Msa0JBQUMsRUFBRCxDQUFRdkMsU0FBVUEsRUFBVXVDLE1BQU9BLEVBQU9yQixTQUFVQSxLQU81RHVCLEVBQVN2QyxVQUFZLENBQ25CZ0IsU0FBVWYsSUFBVS9nQixTQUdQcWpCLFNDaEJBRSxPQWJmLFNBQW9CakMsR0FLbEIsT0FDRSwyQkFBTzFqQixVQUFVLGFBQWFpakIsUUFMWixTQUFDeG9CLEdBQ25CaXBCLEVBQU1rQyxTQUFTbEMsRUFBTXRxQixTQUtuQiwyQkFBT3dKLEtBQUssUUFBUXhKLE1BQU9zcUIsRUFBTXRxQixNQUFNVCxLQUFNQSxLQUFLLGVBQ2xELHlCQUFLcUgsVUFBVSxVQUFVa2dCLElBQUt3RCxFQUFNdHFCLE1BQU04YixRQ041QzlOLEksTUFBZSxJQUFJUixHQUNuQnFKLEdBQVcsSUFBSTlJLEVBRUosU0FBUzBlLEdBQWVuQyxHQUFPLE1BQ2xCQyxtQkFBUyxJQURTLFdBQ3JDdGMsRUFEcUMsS0FDOUJ5ZSxFQUQ4QixPQUVWbkMsbUJBQVMsSUFGQyxXQUVyQ29DLEVBRnFDLEtBRTFCQyxFQUYwQixLQTBCNUMsT0F0QkFqQixxQkFBVSxXQUNSLElBQU1rQixFQUFlLEdBQ3JCLElBQUssSUFBTXZzQixLQUFPdVcsR0FBUzVJLE1BQ3JCNEksR0FBUzVJLE1BQU1wUSxlQUFleUMsSUFDaEN1c0IsRUFBYTd1QixLQUNYLHVCQUFHc0MsSUFBS0EsR0FDTEEsRUFESCxPQUNZd3NCLE9BQU9qVyxHQUFTNUksTUFBTTNOLE1BS3hDc3NCLEVBQWFDLEtBQ1osQ0FBQzVlLElBSUpELEdBQWE2TixRQUFRLG1CQUVyQixTQUFnQjNiLEdBQ2R3c0IsRUFBU3hzQixNQUlULHlCQUFLMEcsVUFBVSxrQkFDYiw0Q0FDQSx1QkFBR0EsVUFBVSxtQkFBYixvQkFDQSwyQkFBSXFILEdBQ0osNkJBRUMwZSxHQ25DQSxJQUFNdkIsR0FBZ0IyQixJQUFNQyxnQkFFcEIsU0FBU0MsR0FBVzNDLEdBQ2pDLElBQU00QyxFQUFjNUMsRUFBTTZDLGFBQWFDLFNBQVNwc0IsS0FBSSxTQUFDcXNCLEdBQUQsT0FDbEQsa0JBQUMsR0FBRCxDQUFZL3NCLElBQUsrc0IsRUFBSzl0QixLQUFLK3RCLFdBQVl0dEIsTUFBT3F0QixFQUFNYixTQUFVQSxPQUcxRDFCLEVBQVcseUJBQUtsa0IsVUFBVSxnQkFBZ0JzbUIsR0FFNUNyVyxFQUFXLElBQUk5SSxFQVBxQixFQVFBd2MsbUJBQVMsSUFSVCxXQVFqQ1csRUFSaUMsS0FRbkJxQyxFQVJtQixLQWN4QyxTQUFTZixFQUFTMVEsR0FDaEJ5UixFQUFnQnpSLEdBR2xCLE9BUkE2UCxxQkFBVSxXQUNSOVUsRUFBU3dQLGVBQWUsZ0JBQWlCNkUsRUFBYXBFLE9BQ3JELENBQUNvRSxJQU9GLGtCQUFDRSxHQUFjb0MsU0FBZixDQUF3Qnh0QixNQUFPa3JCLEdBQzdCLGtCQUFDLEdBQUQsQ0FBVUosU0FBVUEsSUFDcEIsa0JBQUMsR0FBRCxPLDREQzdCUyxJLE1BQUEsSUFBMEIsd0NDQW5DMkMsRyxXQUNKLFdBQVk1VyxHQUFVLFlBQ3BCalYsS0FBS2lWLFNBQVdBLEUsd0tBS2RqVixLQUFLaVYsU0FBU3dQLGVBQWUsYUFBYSxHLFNBRW5CcUgsTUFBTSx1QkFBd0IsQ0FDbkRDLE9BQVEsUyxVQUVjLE9BSGxCQyxFLFFBR09DLE8saUNBQ1FELEVBQVNFLE8sY0FBeEJDLEUsUUFDR0MsTUFBTyxFQUNkcHNCLEtBQUtpVixTQUFTd1AsZUFBZSxXQUFZMEgsRUFBT0UsVUFDaERyc0IsS0FBS2lWLFNBQVN3UCxlQUFlLFNBQVUwSCxFQUFPRyxRQUM5Q3RzQixLQUFLaVYsU0FBU3dQLGVBQWUsT0FBUTBILEVBQU9DLE1BQzVDcHNCLEtBQUtpVixTQUFTd1AsZUFBZSxhQUFhLEcsa0JBQ25DMEgsRyxlQUVQbnNCLEtBQUtpVixTQUFTd1AsZUFBZSxnQkFBWTVqQixHQUN6Q2IsS0FBS2lWLFNBQVN3UCxlQUFlLGNBQVU1akIsR0FDdkNiLEtBQUtpVixTQUFTd1AsZUFBZSxRQUFRLEdBQ3JDemtCLEtBQUtpVixTQUFTd1AsZUFBZSxhQUFhLEcsa0JBQ25DLENBQ0w0SCxjQUFVeHJCLEVBQ1Z5ckIsWUFBUXpyQixFQUNSdXJCLE1BQU0sSSwwREFJVnBzQixLQUFLaVYsU0FBU3dQLGVBQWUsYUFBYSxHLHlKQUkvQm5wQixHLHlGQUVYMEUsS0FBS2lWLFNBQVN3UCxlQUFlLGFBQWEsRyxTQUNuQnFILE1BQU0scUJBQXNCLENBQ2pEQyxPQUFRLE9BQ1IxRCxRQUFTLENBQ1AsZUFBZ0Isb0JBRWxCelIsS0FBTTZJLEtBQUtDLFVBQVVwa0IsSyxVQUVDLE9BUGxCMHdCLEUsUUFPT0MsTyx3QkFDWGpzQixLQUFLaVYsU0FBU3dQLGVBQWUsYUFBYSxHLGtCQUNuQyxLLHlCQUVZdUgsRUFBU0UsTyxlQUF4QkMsRSxPQUNKbnNCLEtBQUtpVixTQUFTd1AsZUFBZSxhQUFhLEcsa0JBQ25DMEgsRUFBT0ksUywwREFHaEJ2c0IsS0FBS2lWLFNBQVN3UCxlQUFlLGFBQWEsRyx1SkFJbENucEIsRyx5RkFFUjBFLEtBQUtpVixTQUFTd1AsZUFBZSxhQUFhLEcsU0FDbkJxSCxNQUFNLGtCQUFtQixDQUM5Q0MsT0FBUSxPQUNSMUQsUUFBUyxDQUNQLGVBQWdCLG9CQUVsQm1FLFlBQWEsY0FDYjVWLEtBQU02SSxLQUFLQyxVQUFVcGtCLEssY0FOakIwd0IsRSxnQkFRYUEsRUFBU0UsTyxjQUF4QkMsRSxRQUNPRSxXQUNUcnNCLEtBQUtpVixTQUFTd1AsZUFBZSxXQUFZMEgsRUFBT0UsVUFDaERyc0IsS0FBS2lWLFNBQVN3UCxlQUFlLFNBQVUwSCxFQUFPRyxRQUM5Q3RzQixLQUFLaVYsU0FBU3dQLGVBQWUsUUFBUSxJQUV2Q3prQixLQUFLaVYsU0FBU3dQLGVBQWUsYUFBYSxHLGtCQUNuQzBILEcsa0NBRVBuc0IsS0FBS2lWLFNBQVN3UCxlQUFlLGFBQWEsRyxpUEFNMUN6a0IsS0FBS2lWLFNBQVN3UCxlQUFlLGFBQWEsRyxTQUN4QnFILE1BQU0sbUJBQW9CLENBQzFDQyxPQUFRLFMsY0FESlUsRSxPQUdOenNCLEtBQUtpVixTQUFTd1AsZUFBZSxnQkFBWTVqQixHQUN6Q2IsS0FBS2lWLFNBQVN3UCxlQUFlLGNBQVU1akIsR0FDdkNiLEtBQUtpVixTQUFTd1AsZUFBZSxRQUFRLEdBQ3JDemtCLEtBQUtpVixTQUFTd1AsZUFBZSxhQUFhLEcsa0JBQ25DZ0ksRUFBSVIsUSxrQ0FFWGpzQixLQUFLaVYsU0FBU3dQLGVBQWUsYUFBYSxHLG9yQkN6RmhELElBQ01pSSxHQUFPLElBQUliLEdBREYsSUFBSTFmLEdBR0osU0FBU3dnQixHQUFULEdBQXlDLElBQWpCQyxFQUFpQixFQUFqQkEsUUFBU0MsRUFBUSxFQUFSQSxLQUN4Q0MsRUFBY0MsbUJBQ2RDLEVBQXFCRCxtQkFGMkIsRUFJOUJwRSxtQkFBUyxDQUMvQmhyQixLQUFNLEdBQ05zdkIsTUFBTyxHQUNQQyxTQUFVLEdBQ1ZDLGdCQUFpQixLQVJtQyxXQUkvQzdoQixFQUorQyxLQUl6QzhoQixFQUp5QyxPQVdkekUsbUJBQVMsSUFYSyxXQVcvQzBFLEVBWCtDLEtBV2pDQyxFQVhpQyxPQVlSM0Usb0JBQVMsR0FaRCxXQVkvQzRFLEVBWitDLEtBWTlCQyxFQVo4QixLQWN0RHpELHFCQUFVLFdBSVIsT0FIQThDLEdBQUssR0FDTC9uQixTQUFTaUosaUJBQWlCLFVBQVcwZixHQUU5QixrQkFBTTNvQixTQUFTd0osb0JBQW9CLFVBQVdtZixNQUNwRCxJQUVILElBQU1BLEVBQWdCLFNBQUNodUIsR0FDUCxXQUFWQSxFQUFFZixLQUNKZ3ZCLEtBSUVBLEVBQWMsU0FBQ2p1QixHQUNRLHFCQUF2QkEsRUFBRTJYLE9BQU9wUyxZQUNYNm5CLEdBQUssR0FDTEQsRUFBUXh3QixLQUFLLE9BSVh1eEIsRUFBZ0IsU0FBQ2x1QixHQUNyQjZ0QixFQUFnQixJQUNoQkYsRUFBUSxHQUFELE1BQU05aEIsR0FBTixXQUFhN0wsRUFBRTJYLE9BQU96WixLQUFPOEIsRUFBRTJYLE9BQU9oWixVQUd6Q3d2QixFQUFRLCtCQUFHLFdBQU9udUIsR0FBUCxlQUFBMGIsRUFBQSx5REFDZjFiLEVBQUU4TyxpQkFDRWpELEVBQUs0aEIsV0FBYTVoQixFQUFLNmhCLGdCQUZaLHVCQUdiSCxFQUFtQm5ZLFFBQVF6VyxNQUFRLEdBQ25Da3ZCLEVBQWdCLGdDQUpILDBDQU9NWixHQUFLbUIsU0FBTCxNQUFtQnZpQixJQVB6QixPQU9UNmdCLEVBUFMsT0FRZlcsRUFBWWpZLFFBQVF6VyxNQUFRLEdBQzVCNHVCLEVBQW1CblksUUFBUXpXLE1BQVEsR0FDcEIsTUFBWCt0QixFQUNGcUIsR0FBbUIsR0FFbkJGLEVBQWdCbkIsR0FiSCw0Q0FBSCxzREFpQlIyQixFQUFVLFdBQ2RsQixFQUFReHdCLEtBQUssV0FHZixPQUNFLHlCQUFLNEksVUFBVSxtQkFBbUJpakIsUUFBU3lGLEdBQ3hDSCxFQUNDLHlCQUFLdm9CLFVBQVUsNkJBQ2IseUJBQUtBLFVBQVUsZ0JBQWYsb0JBQ21CLDZCQURuQiw4Q0FJQSw0QkFBUUEsVUFBVSw2QkFBNkJpakIsUUFBUzZGLEdBQXhELE9BS0YseUJBQUs5b0IsVUFBVSxxQkFDYix5QkFBS0EsVUFBVSw0QkFDYix5QkFBS2tnQixJQUFLNkksR0FBTUMsSUFBSSxTQUNwQix5QkFBS2hwQixVQUFVLDJCQUNiLDRDQUNDcW9CLEdBQ0MsdUJBQUdyb0IsVUFBVSwyQkFBYixVQUErQ3FvQixJQUduRCw0QkFBUXJvQixVQUFVLHFCQUFxQmlqQixRQUFTeUYsR0FBaEQsTUFJRiwwQkFBTTFvQixVQUFVLDRCQUNkLDJCQUNFaXBCLFlBQVksT0FDWnR3QixLQUFLLE9BQ0w2c0IsU0FBVW1ELElBRVosMkJBQ0VNLFlBQVksUUFDWnR3QixLQUFLLFFBQ0w2c0IsU0FBVW1ELElBRVosMkJBQ0VPLElBQUtwQixFQUNMbUIsWUFBWSw4QkFDWnR3QixLQUFLLFdBQ0xpSyxLQUFLLFdBQ0w0aUIsU0FBVW1ELElBRVosMkJBQ0VPLElBQUtsQixFQUNMaUIsWUFBWSxtQkFDWnR3QixLQUFLLGtCQUNMaUssS0FBSyxXQUNMNGlCLFNBQVVtRCxJQUdaLHlCQUFLM29CLFVBQVUsNkJBQ2IsNEJBQ0VBLFVBQVUsK0JBQ1ZpakIsUUFBUzZGLEdBRlgsZ0JBTUEsNEJBQ0U5b0IsVUFBVSw2QkFDVjRDLEtBQUssU0FDTHFnQixRQUFTMkYsR0FIWCxnQiw0a0JDMUhkLElBQ01sQixHQUFPLElBQUliLEdBREYsSUFBSTFmLEdBR0osU0FBU2dpQixHQUFULEdBQWtDLElBQWpCdkIsRUFBaUIsRUFBakJBLFFBQVNDLEVBQVEsRUFBUkEsS0FDakNDLEVBQWNDLG1CQUQyQixFQUd2QnBFLG1CQUFTLENBQy9Cc0UsTUFBTyxHQUNQQyxTQUFVLEtBTG1DLFdBR3hDNWhCLEVBSHdDLEtBR2xDOGhCLEVBSGtDLE9BUVB6RSxtQkFBUyxJQVJGLFdBUXhDMEUsRUFSd0MsS0FRMUJDLEVBUjBCLEtBVS9DdkQscUJBQVUsV0FJUixPQUhBOEMsR0FBSyxHQUNML25CLFNBQVNpSixpQkFBaUIsVUFBVzBmLEdBRTlCLGtCQUFNM29CLFNBQVN3SixvQkFBb0IsVUFBV21mLE1BQ3BELElBRUgsSUFBTUUsRUFBZ0IsU0FBQ2x1QixHQUNyQjJ0QixFQUFRLFNBQUs5aEIsR0FBTixXQUFhN0wsRUFBRTJYLE9BQU96WixLQUFPOEIsRUFBRTJYLE9BQU9oWixVQUd6Q3F2QixFQUFnQixTQUFDaHVCLEdBQ1AsV0FBVkEsRUFBRWYsS0FDSmd2QixLQUlFVSxFQUFXLFdBQ2Z2QixHQUFLLEdBQ0xELEVBQVF4d0IsS0FBSyxNQUdUc3hCLEVBQWMsU0FBQ2p1QixHQUNJLGNBQXZCQSxFQUFFMlgsT0FBT3BTLFdBQTZCb3BCLEtBT2xDTixFQUFPLCtCQUFHLFdBQU9ydUIsR0FBUCxlQUFBMGIsRUFBQSw2REFDZDFiLEVBQUU4TyxpQkFDRitlLEVBQWdCLElBRkYsU0FJT1osR0FBSzJCLE1BQUwsTUFBZ0IvaUIsSUFKdkIsT0FJUjZnQixFQUpRLE9BS2RXLEVBQVlqWSxRQUFRelcsTUFBUSxHQUN4Qit0QixHQUFVQSxFQUFPRSxTQUNuQitCLElBRUFkLEVBQWdCLGlCQVRKLDJDQUFILHNEQWFiLE9BQ0UseUJBQUt0b0IsVUFBVSxZQUFZaWpCLFFBQVN5RixHQUNsQyx5QkFBSzFvQixVQUFVLHFCQUNiLHlCQUFLQSxVQUFVLDRCQUNiLHlCQUFLa2dCLElBQUs2SSxHQUFNQyxJQUFJLFNBQ3BCLHlCQUFLaHBCLFVBQVUsMkJBQ2IscUNBQ0Nxb0IsR0FDQyx1QkFBR3JvQixVQUFVLDJCQUFiLFVBQStDcW9CLElBR25ELDRCQUFRcm9CLFVBQVUscUJBQXFCaWpCLFFBQVN5RixHQUFoRCxNQUlGLDBCQUFNMW9CLFVBQVUsNEJBQ2QsMkJBQ0VpcEIsWUFBWSxRQUNadHdCLEtBQUssUUFDTDZzQixTQUFVbUQsSUFFWiwyQkFDRU8sSUFBS3BCLEVBQ0xtQixZQUFZLFdBQ1p0d0IsS0FBSyxXQUNMaUssS0FBSyxXQUNMNGlCLFNBQVVtRCxJQUdaLHlCQUFLM29CLFVBQVUsNkJBQ2IsNEJBQ0VBLFVBQVUsK0JBQ1ZpakIsUUFqRE8sU0FBQ3hvQixHQUNsQm10QixFQUFReHdCLEtBQUssbUJBOENMLG1CQU1BLDRCQUNFNEksVUFBVSw2QkFDVjRDLEtBQUssU0FDTHFnQixRQUFTNkYsR0FIWCxhQzVGRyxTQUFTUSxHQUFULEdBQXFDLEVBQVgxQixRQUFXLE1BQ3RCakUsb0JBQVMsR0FEYSxXQUMzQzRGLEVBRDJDLEtBQ25DQyxFQURtQyxLQUU1QzNCLEVBQU8sU0FBQzRCLEdBQ1pELEVBQVVDLElBR1osT0FDRSx5QkFDRXpwQixVQUFVLHdCQUNWRSxNQUFPcXBCLEVBQVMsQ0FBRWp0QixPQUFRLE9BQVUsQ0FBRUEsT0FBUSxTQUU5QyxrQkFBQyxLQUFELEtBQ0Usa0JBQUMsS0FBRCxDQUNFb3RCLEtBQUssZ0JBQ0wxWCxPQUFRLFNBQUM0VixHQUFELE9BQWEsa0JBQUMsR0FBRCxNQUFjQyxLQUFNQSxHQUFVRCxPQUVyRCxrQkFBQyxLQUFELENBQ0U4QixLQUFLLFNBQ0wxWCxPQUFRLFNBQUM0VixHQUFELE9BQWEsa0JBQUMsR0FBRCxNQUFPQyxLQUFNQSxHQUFVRCxTLGFDbEJoREYsSSxNQUFPLElBQUliLEdBREYsSUFBSTFmLElBR0osU0FBU3dpQixHQUFULEdBQThDLElBQTFCdEMsRUFBMEIsRUFBMUJBLFNBQVV1QyxFQUFnQixFQUFoQkEsYUFDckNDLEVBQVU5QixpQkFBTyxNQUV2QixTQUFTK0IsSUFDUEYsSUFHRixJQUFNRyxFQUFNLCtCQUFHLHNCQUFBNVQsRUFBQSxzRUFDUHVSLEdBQUtxQyxTQURFLE9BRWJILElBRmEsMkNBQUgscURBYVosT0FSQTdFLHFCQUFVLFdBR1IsT0FGQThFLEVBQVFoYSxRQUFROUcsaUJBQWlCLGFBQWMrZ0IsR0FFeEMsV0FDTEQsRUFBUWhhLFFBQVF2RyxvQkFBb0IsYUFBY3dnQixNQUVuRCxJQUdELHlCQUFLWixJQUFLVyxFQUFTN3BCLFVBQVUsZ0JBQzNCLDRCQUNHcW5CLEVBQ0QsdUNBQ0Esc0NBQ0Esd0NBSkYsY0FNRSw0QkFDRSwwQkFBTXJuQixVQUFVLGtCQUFrQmlqQixRQUFTOEcsR0FBM0MsYUMvQlYsSUFBSTlaLEdBQVcsSUFBSTlJLEVBRUosU0FBUzZpQixLQUFpQixNQUNYckcsb0JBQVMsR0FERSxXQUNoQ3NHLEVBRGdDLEtBQ3hCQyxFQUR3QixPQUVPdkcsb0JBQVMsR0FGaEIsV0FFaEN3RyxFQUZnQyxLQUVmQyxFQUZlLEtBSXZDckYscUJBQVUsWUFDSyxJQUFJbmUsR0FDVnFPLFFBQVEsUUFBUSxXQUNyQmlWLEVBQVVqYSxHQUFTNUksTUFBTStmLFdBRTFCLElBRUgsSUFBTXdDLEVBQWUsV0FDbkJRLEdBQW9CRCxJQUdoQkUsRUFDSiw2QkFDRSxrQkFBQyxLQUFELENBQVNDLEdBQUcsVUFDViwwQkFBTXRxQixVQUFVLHVCQUFoQixVQUVGLGtCQUFDLEtBQUQsQ0FBU3NxQixHQUFHLGlCQUNWLDBCQUFNdHFCLFVBQVUsdUJBQWhCLGtCQUtGdXFCLEVBQ0YseUJBQUt2cUIsVUFBVSwwQkFBZixXQUVFLDBCQUFNaWpCLFFBQVMyRyxFQUFjNXBCLFVBQVUsdUJBQ3BDaVEsR0FBUzVJLE1BQU1nZ0IsV0FLdEIsT0FDRSx5QkFBS3JuQixVQUFVLG9CQUNaaXFCLEVBQVNNLEVBQVdGLEVBQ3BCSixHQUFVRSxHQUNULGtCQUFDLEdBQUQsQ0FDRTlDLFNBQVVwWCxHQUFTNUksTUFBTWdnQixTQUN6QnVDLGFBQWNBLEssWUNqREhZLEcsV0FDbkIsYUFBYyxZQUNaeHZCLEtBQUt5dkIsVUFBWXp2QixLQUFLMHZCLFVBQ3BCQyxPQUVGM3ZCLEtBQUt3ckIsU0FBV3hyQixLQUFLNHZCLFlBQVk1dkIsS0FBS3l2QixXLDhDQUc5Qnh4QixHQUNSLElBQUk0eEIsRUFBUyxHQUliLE9BSEE1eEIsRUFBRTJCLEtBQUssR0FBR1IsS0FBSSxTQUFDOEgsR0FDYjJvQixFQUFPM29CLEVBQUtnVixRQUFRLEtBQU0sS0FBT2plLEVBQUVpSixNQUU5QjJvQixJLGtDQUdHQSxHQUNWLElBQUlDLEVBQVEsR0FTWixPQVJvQi96QixPQUFPNnBCLFFBQVFpSyxHQUNyQnp3QixLQUFJLFNBQUM4YSxFQUFLb0IsR0FDdEJ3VSxFQUFNMXpCLEtBQUssQ0FDVHVCLEtBQU0sUUFBVTJkLEVBQ2hCcEIsSUFBS0EsRUFBSSxHQUFKLFFBQ0xnTCxJQUFLaEwsRUFBSSxRQUdONFYsTSxLQ3hCTHBQLEksTUFBUyxXQUVYNWIsU0FBUzhSLEtBQUtDLFlBUWxCLFdBQ0UsSUFBSTZKLEVBQVM1YixTQUFTQyxjQUFjLE9BQ3BDMmIsRUFBTzFiLFVBQVksU0FDbkIwYixFQUFPbmhCLEdBQUssU0FFWixJQUFJcUYsRUFBT0UsU0FBU0MsY0FBYyxNQUNsQ0gsRUFBS0ksVUFBWSxjQUNqQkosRUFBS2dOLFVBQVksYUFDakI4TyxFQUFPN0osWUFBWWpTLEdBRW5CLElBQUltckIsRUFBWWpyQixTQUFTQyxjQUFjLE9BQ3ZDZ3JCLEVBQVUvcUIsVUFBWSxZQUN0QitxQixFQUFVeHdCLEdBQUssWUFFZixJQUFJeXdCLEVBQU1sckIsU0FBU0MsY0FBYyxPQUNqQ2lyQixFQUFJaHJCLFVBQVksV0FDaEJnckIsRUFBSXp3QixHQUFLLE1BQ1R3d0IsRUFBVWxaLFlBQVltWixHQUV0QixJQUFJQyxFQUFNbnJCLFNBQVNDLGNBQWMsT0FDakNrckIsRUFBSWpyQixVQUFZLFdBQ2hCaXJCLEVBQUkxd0IsR0FBSyxNQUNUd3dCLEVBQVVsWixZQUFZb1osR0FFdEIsSUFBSUMsRUFBT3ByQixTQUFTQyxjQUFjLE9BQ2xDbXJCLEVBQUtsckIsVUFBWSxZQUNqQmtyQixFQUFLM3dCLEdBQUssT0FDVnd3QixFQUFVbFosWUFBWXFaLEdBRXRCLElBQUlDLEVBQVNyckIsU0FBU0MsY0FBYyxPQU9wQyxPQU5Bb3JCLEVBQU9uckIsVUFBWSxjQUNuQm1yQixFQUFPNXdCLEdBQUssU0FDWnd3QixFQUFVbFosWUFBWXNaLEdBRXRCelAsRUFBTzdKLFlBQVlrWixHQUVaclAsRUE1Q3FCMFAsTUFGeEIxUCxHQUFTLFdBS1gsSUFBSUEsRUFBUzViLFNBQVN1UixlQUFlLFVBQ2pDcUssR0FBUTViLFNBQVM4UixLQUFLeVosWUFBWTNQLElDYzFDLElBQU16TCxHQUFXLElBQUk5SSxFQUNmdWdCLEdBQU8sSUFBSWIsR0FBSzVXLElBQ2xCc1csR0FBZSxJQUFJaUUsR0FDakI1QyxHQUFVMEQsZ0JBRUgsSUFBSTFrQixHQUNWcU8sUUFBUSxhQUFhLFdBQ3RCaEYsR0FBUzVJLE1BQVQsVUFDRnFVLEtBRUFBLFFBSVcsK0JBQUcsc0JBQUF2RixFQUFBLHNFQUNWdVIsR0FBSzZELFlBREssMkNBQUgsb0RBR2ZBLEdBRUFDLElBQVN4WixPQUNQLGtCQUFDLElBQU15WixXQUFQLEtBQ0Usa0JBQUMsS0FBRCxDQUFRN0QsUUFBU0EsSUFDZixrQkFBQyxHQUFELE1BQ0Esa0JBQUNvQyxHQUFELE9BRUYsa0JBQUMzRCxHQUFELENBQVlFLGFBQWNBLE1BRTVCem1CLFNBQVN1UixlQUFlLFdBRzFCLElBQUlwTCxHQUFRLElBQUkvRSxFQUNabUUsR0FBVSxJQUFJMEssRUFBUzlKLElBRTNCQSxHQUFNeWxCLEtBQUtybUIsSUFFWEEsR0FBUXNtQixjQUVKMWxCLEdBQU0ybEIsZ0JBQWdCdm1CLEtBQ3hCdkosUUFBUW1mLElBQUkiLCJmaWxlIjoiVGVydGl1c0F4aXMuMjI1NmE1YTE2ZDJhZmVkZmRhMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFs2OCwxXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi8wQTBBMEFfQTlBOUE5XzUyNTI1Ml83NDc0NzQtNjRweC5wbmdcIjogNjEsXG5cdFwiLi8wQzBDQzNfMDQwNDlGXzA0MDQ4M18wNDA0NUMtNjRweC5wbmdcIjogNjIsXG5cdFwiLi8wQzQzMENfMjU3RDI1XzQzOUE0M18zQzY4M0MtNjRweC5wbmdcIjogNjMsXG5cdFwiLi8wRDBEQkRfMDQwNDk3XzA0MDQ3Ql8wNDA0NTUtNjRweC5wbmdcIjogNjQsXG5cdFwiLi83NzdDNjFfMzMzNzI3X0JBQkZBMV9BNUFDOEMtNjRweC5wbmdcIjogNjUsXG5cdFwiLi83NzdEN0RfQkRDQUQyXzNFM0MyRV9CMUI4QjYtNjRweC5wbmdcIjogNjZcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2MDsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiODQ0NmQ5MTZkMzkzNWJkNGYwNDczOTIzMWY0M2NlMjMucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjQzYmIwMjEzMWRkNWExZGEzMDAzMzRiYmVhZjY3OGQ3LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3YTEyZjY4ZDNiMjg0ZDRjOTMwOTIwNjI0N2ZkMDYzNC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjM3MzYyZDQwODUyOGJiYjVmNzhlZmU1NjEyYzRhNTkucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImU2ZjY1OTUyMmY3ZjVlMmE3YjgzMTY3NTEzOWQxZDFhLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiZTM2MDA4MzRhNmMzN2M0YzJlZjhkM2Y2NmM2OTI0My5wbmdcIjsiLCIvKipcclxuICogQGF1dGhvciBEcmFnb24zREdyYWZmIC8gaHR0cDovL2RyYWdvbjNkZ3JhZmYucnUvXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanNcIjtcclxuXHJcbi8vIGltcG9ydCB7IEJveEJ1ZmZlckdlb21ldHJ5IH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanNcIjtcclxuXHJcbmltcG9ydCB7IENTUzJET2JqZWN0IH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vcmVuZGVyZXJzL0NTUzJEUmVuZGVyZXIuanNcIjtcclxuaW1wb3J0IHsgVEFfVUkgfSBmcm9tIFwiLi4vVUkvVEFfVUkuanNcIjtcclxuXHJcbmNsYXNzIFRBX0VudGl0aWVzIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGxldCBHTE9CQUxTQ09QRSA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5jcmVhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uIChnZW9tZXRyeVR5cGUsIHBhcmFtcykge1xyXG4gICAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgVEhSRUVbZ2VvbWV0cnlUeXBlXSgpO1xyXG5cclxuICAgICAgdGhpcy5jaGVja1BhcmFtcyhwYXJhbXMsIGdlb21ldHJ5LnBhcmFtZXRlcnMpO1xyXG5cclxuICAgICAgbGV0IHBhcmFtc0FycmF5ID0gT2JqZWN0LnZhbHVlcyhwYXJhbXMpO1xyXG5cclxuICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUVbZ2VvbWV0cnlUeXBlXSguLi5wYXJhbXNBcnJheSk7XHJcblxyXG4gICAgICByZXR1cm4gZ2VvbWV0cnk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY2hlY2tQYXJhbXMgPSBmdW5jdGlvbiAocGFyYW1zVG9DaGVjaywgcGFyYW1zVGVtcGxhdGUpIHtcclxuICAgICAgaWYgKCEocGFyYW1zVG9DaGVjayBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgXCJwYXJhbXNUb0NoZWNrIG11c3QgYmUgYW4gb2JqZWN0LiBOb3cgcGFyYW1zIGFyZSBcIiArIHR5cGVvZiBwYXJhbXNcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCEocGFyYW1zVGVtcGxhdGUgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgIFwicGFyYW1zVGFtcGxhdGUgbXVzdCBiZSBhbiBvYmplY3QuIE5vdyBwYXJhbXMgYXJlIFwiICsgdHlwZW9mIHBhcmFtc1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgZGF0YSA9IHt9O1xyXG4gICAgICBPYmplY3QuYXNzaWduKGRhdGEsIHBhcmFtc1RlbXBsYXRlKTtcclxuXHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcclxuICAgICAgICBpZiAoIXBhcmFtc1RvQ2hlY2suaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKCdQYXJhbWV0ZXIgXCInICsga2V5ICsgJ1wiIGlzIG1pc3NpbmcgJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChwYXJhbXNUb0NoZWNrW2tleV0gPT09IHVuZGVmaW5lZCAmJiBwYXJhbXNUb0NoZWNrW2tleV0gPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdcIicgKyBrZXkgKyAnXCIgbm90IHNldCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUJveCA9IGZ1bmN0aW9uICh4LCB5LCB6LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgbWF0ZXJpYWwpIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgZGVwdGg6IGRlcHRoLFxyXG4gICAgICAgIHdpZHRoU2VnbWVudHM6IDEsXHJcbiAgICAgICAgaGVpZ2h0U2VnbWVudHM6IDEsXHJcbiAgICAgICAgZGVwdGhTZWdtZW50czogMSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJCb3hCdWZmZXJHZW9tZXRyeVwiLCBwYXJhbXMpO1xyXG5cclxuICAgICAgaWYgKCFnZW9tZXRyeSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGdlb21ldHJ5LiBPYmplY3Qgbm90IGNyZWF0ZWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBib3ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuICAgICAgYm94LnBvc2l0aW9uLnggPSB4O1xyXG4gICAgICBib3gucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgIGJveC5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiBib3g7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jcmVhdGVTcGhlcmUgPSBmdW5jdGlvbiAoeCwgeSwgeiwgcmFkaXVzLCBzZWdtZW50cywgbWF0ZXJpYWwpIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICB3aWR0aFNlZ21lbnRzOiBzZWdtZW50cyxcclxuICAgICAgICBoZWlnaHRTZWdtZW50czogc2VnbWVudHMsXHJcbiAgICAgICAgcGhpU3RhcnQ6IDAsXHJcbiAgICAgICAgcGhpTGVuZ3RoOiBNYXRoLlBJICogMixcclxuICAgICAgICB0aGV0YVN0YXJ0OiAwLFxyXG4gICAgICAgIHRoZXRhTGVuZ3RoOiBNYXRoLlBJLFxyXG4gICAgICB9O1xyXG4gICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmNyZWF0ZUdlb21ldHJ5KFwiU3BoZXJlQnVmZmVyR2VvbWV0cnlcIiwgcGFyYW1zKTtcclxuXHJcbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBnZW9tZXRyeS4gT2JqZWN0IG5vdCBjcmVhdGVkXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgc3BoZXJlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgc3BoZXJlLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgICBzcGhlcmUucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgIHNwaGVyZS5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiBzcGhlcmU7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3JlYXRlQ2lyY2xlID0gZnVuY3Rpb24gKHgsIHksIHosIHJhZGl1cywgc2VnbWVudHMsIG1hdGVyaWFsKSB7XHJcbiAgICAgIGxldCBwYXJhbXMgPSB7XHJcbiAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgc2VnbWVudHM6IHNlZ21lbnRzLFxyXG4gICAgICAgIHRoZXRhU3RhcnQ6IDAsXHJcbiAgICAgICAgdGhldGFMZW5ndGg6IDIgKiBNYXRoLlBJLFxyXG4gICAgICB9O1xyXG4gICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmNyZWF0ZUdlb21ldHJ5KFwiQ2lyY2xlQnVmZmVyR2VvbWV0cnlcIiwgcGFyYW1zKTtcclxuXHJcbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBnZW9tZXRyeS4gT2JqZWN0IG5vdCBjcmVhdGVkXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgY2lyY2xlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgY2lyY2xlLnBvc2l0aW9uLnggPSB4O1xyXG4gICAgICBjaXJjbGUucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgIGNpcmNsZS5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiBjaXJjbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3JlYXRlQ29uZSA9IGZ1bmN0aW9uIChcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgeixcclxuICAgICAgcmFkaXVzLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIHJhZGlhbFNlZ21lbnRzLFxyXG4gICAgICBoZWlnaHRTZWdtZW50cyxcclxuICAgICAgbWF0ZXJpYWxcclxuICAgICkge1xyXG4gICAgICBsZXQgcGFyYW1zID0ge1xyXG4gICAgICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgIHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuICAgICAgICBoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXHJcbiAgICAgICAgb3BlbkVuZGVkOiBmYWxzZSxcclxuICAgICAgICB0aGV0YVN0YXJ0OiAwLFxyXG4gICAgICAgIHRoZXRhTGVuZ3RoOiAyICogTWF0aC5QSSxcclxuICAgICAgfTtcclxuICAgICAgbGV0IGdlb21ldHJ5ID0gdGhpcy5jcmVhdGVHZW9tZXRyeShcIkNvbmVCdWZmZXJHZW9tZXRyeVwiLCBwYXJhbXMpO1xyXG5cclxuICAgICAgaWYgKCFnZW9tZXRyeSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGdlb21ldHJ5LiBPYmplY3Qgbm90IGNyZWF0ZWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjb25lID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgY29uZS5wb3NpdGlvbi54ID0geDtcclxuICAgICAgY29uZS5wb3NpdGlvbi55ID0geTtcclxuICAgICAgY29uZS5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiBjb25lO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUN5bGluZGVyID0gZnVuY3Rpb24gKFxyXG4gICAgICB4LFxyXG4gICAgICB5LFxyXG4gICAgICB6LFxyXG4gICAgICByYWRpdXNUb3AsXHJcbiAgICAgIHJhZGl1c0JvdHRvbSxcclxuICAgICAgaGVpZ2h0LFxyXG4gICAgICByYWRpYWxTZWdtZW50cyxcclxuICAgICAgaGVpZ2h0U2VnbWVudHMsXHJcbiAgICAgIG1hdGVyaWFsXHJcbiAgICApIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICByYWRpdXNUb3A6IHJhZGl1c1RvcCxcclxuICAgICAgICByYWRpdXNCb3R0b206IHJhZGl1c0JvdHRvbSxcclxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICByYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcbiAgICAgICAgaGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxyXG4gICAgICAgIG9wZW5FbmRlZDogZmFsc2UsXHJcbiAgICAgICAgdGhldGFTdGFydDogMCxcclxuICAgICAgICB0aGV0YUxlbmd0aDogMiAqIE1hdGguUEksXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5XCIsIHBhcmFtcyk7XHJcblxyXG4gICAgICBpZiAoIWdlb21ldHJ5KSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgZ2VvbWV0cnkuIE9iamVjdCBub3QgY3JlYXRlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGN5bGluZGVyID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgY3lsaW5kZXIucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgIGN5bGluZGVyLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgICBjeWxpbmRlci5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiBjeWxpbmRlcjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGVEb2RlY2FoZWRyb24gPSBmdW5jdGlvbiAoeCwgeSwgeiwgcmFkaXVzLCBkZXRhaWwsIG1hdGVyaWFsKSB7XHJcbiAgICAgIGxldCBwYXJhbXMgPSB7XHJcbiAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgZGV0YWlsOiBkZXRhaWwsXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeVwiLCBwYXJhbXMpO1xyXG5cclxuICAgICAgaWYgKCFnZW9tZXRyeSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGdlb21ldHJ5LiBPYmplY3Qgbm90IGNyZWF0ZWRcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBkb2RlY2FoZWRyb24gPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICBkb2RlY2FoZWRyb24ucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgIGRvZGVjYWhlZHJvbi5wb3NpdGlvbi55ID0geTtcclxuICAgICAgZG9kZWNhaGVkcm9uLnBvc2l0aW9uLnogPSB6O1xyXG5cclxuICAgICAgcmV0dXJuIGRvZGVjYWhlZHJvbjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGVJY29zYWhlZHJvbiA9IGZ1bmN0aW9uICh4LCB5LCB6LCByYWRpdXMsIGRldGFpbCwgbWF0ZXJpYWwpIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICBkZXRhaWw6IGRldGFpbCxcclxuICAgICAgfTtcclxuICAgICAgbGV0IGdlb21ldHJ5ID0gdGhpcy5jcmVhdGVHZW9tZXRyeShcIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIiwgcGFyYW1zKTtcclxuXHJcbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBnZW9tZXRyeS4gT2JqZWN0IG5vdCBjcmVhdGVkXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgaWNvc2FoZWRyb24gPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICBpY29zYWhlZHJvbi5wb3NpdGlvbi54ID0geDtcclxuICAgICAgaWNvc2FoZWRyb24ucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgIGljb3NhaGVkcm9uLnBvc2l0aW9uLnogPSB6O1xyXG5cclxuICAgICAgcmV0dXJuIGljb3NhaGVkcm9uO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZU9jdGFoZWRyb24gPSBmdW5jdGlvbiAoeCwgeSwgeiwgcmFkaXVzLCBkZXRhaWwsIG1hdGVyaWFsKSB7XHJcbiAgICAgIGxldCBwYXJhbXMgPSB7XHJcbiAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgZGV0YWlsOiBkZXRhaWwsXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIiwgcGFyYW1zKTtcclxuXHJcbiAgICAgIGlmICghZ2VvbWV0cnkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBnZW9tZXRyeS4gT2JqZWN0IG5vdCBjcmVhdGVkXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2N0YWhlZHJvbiA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgIG9jdGFoZWRyb24ucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgIG9jdGFoZWRyb24ucG9zaXRpb24ueSA9IHk7XHJcbiAgICAgIG9jdGFoZWRyb24ucG9zaXRpb24ueiA9IHo7XHJcblxyXG4gICAgICByZXR1cm4gb2N0YWhlZHJvbjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGVUb3J1cyA9IGZ1bmN0aW9uIChcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgeixcclxuICAgICAgcmFkaXVzLFxyXG4gICAgICB0dWJlLFxyXG4gICAgICByYWRpYWxTZWdtZW50cyxcclxuICAgICAgdHVidWxhclNlZ21lbnRzLFxyXG4gICAgICBtYXRlcmlhbFxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBwYXJhbXMgPSB7XHJcbiAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgdHViZTogdHViZSxcclxuICAgICAgICByYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcbiAgICAgICAgdHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXHJcbiAgICAgICAgYXJjOiAyICogTWF0aC5QSSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJUb3J1c0J1ZmZlckdlb21ldHJ5XCIsIHBhcmFtcyk7XHJcblxyXG4gICAgICBpZiAoIWdlb21ldHJ5KSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgZ2VvbWV0cnkuIE9iamVjdCBub3QgY3JlYXRlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHRvcnVzID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgdG9ydXMucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgIHRvcnVzLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgICB0b3J1cy5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiB0b3J1cztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jcmVhdGVUZXRyYWhlZHJvbiA9IGZ1bmN0aW9uICh4LCB5LCB6LCByYWRpdXMsIGRldGFpbCwgbWF0ZXJpYWwpIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICBkZXRhaWw6IGRldGFpbCxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoXCJUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCIsIHBhcmFtcyk7XHJcblxyXG4gICAgICBpZiAoIWdlb21ldHJ5KSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgZ2VvbWV0cnkuIE9iamVjdCBub3QgY3JlYXRlZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHRldHJhaGVkcm9uID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgICAgdGV0cmFoZWRyb24ucG9zaXRpb24ueCA9IHg7XHJcbiAgICAgIHRldHJhaGVkcm9uLnBvc2l0aW9uLnkgPSB5O1xyXG4gICAgICB0ZXRyYWhlZHJvbi5wb3NpdGlvbi56ID0gejtcclxuXHJcbiAgICAgIHJldHVybiB0ZXRyYWhlZHJvbjtcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB0aGlzLmNyZWF0ZUxpbmUgPSBmdW5jdGlvbiAoeCwgeSwgeiwgeDEsIHkxLCB6MSwgY29sb3IsIGRhc2hlZCkge1xyXG4gICAgICBsZXQgbWF0ZXJpYWw7XHJcbiAgICAgIHN3aXRjaCAoZGFzaGVkKSB7XHJcbiAgICAgICAgY2FzZSBcImRhc2hlZFwiOlxyXG4gICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZURhc2hlZE1hdGVyaWFsKHtcclxuICAgICAgICAgICAgY29sb3I6IG5ldyBUSFJFRS5Db2xvcihjb2xvciksXHJcbiAgICAgICAgICAgIGRhc2hTaXplOiAwLjksXHJcbiAgICAgICAgICAgIGdhcFNpemU6IDAuNSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInNvbGlkXCI6XHJcbiAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgICAgICAgIGNvbG9yOiBuZXcgVEhSRUUuQ29sb3IoY29sb3IpLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcclxuICAgICAgICAgICAgY29sb3I6IG5ldyBUSFJFRS5Db2xvcihjb2xvciksXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XHJcbiAgICAgIGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoeCwgeSwgeikpO1xyXG4gICAgICBnZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKHgxLCB5MSwgejEpKTtcclxuICAgICAgY29uc3QgbGluZSA9IG5ldyBUSFJFRS5MaW5lKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgIGlmIChkYXNoZWQgPT09IFwiZGFzaGVkXCIpIHtcclxuICAgICAgICBsaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGxpbmU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jcmVhdGVMYWJlbCA9IGZ1bmN0aW9uICh4LCB5LCB6LCB0ZXh0KSB7XHJcbiAgICAgIGxldCBsYWJlbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIGxhYmVsRGl2LmNsYXNzTmFtZSA9IFwibGFiZWxEaXZcIjtcclxuICAgICAgbGFiZWxEaXYudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICBsYWJlbERpdi5zdHlsZS5tYXJnaW5Ub3AgPSBcIi0xZW1cIjtcclxuICAgICAgbGV0IGxhYmVsb2JqZWN0ID0gbmV3IENTUzJET2JqZWN0KGxhYmVsRGl2KTtcclxuICAgICAgbGFiZWxvYmplY3QucG9zaXRpb24uc2V0KHgsIHksIHopO1xyXG4gICAgICByZXR1cm4gbGFiZWxvYmplY3Q7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jcmVhdGVQbGFuZSA9IGZ1bmN0aW9uIChoZWlnaHQsIHdpZHRoKSB7XHJcbiAgICAgIGxldCBwbGFuZUdlb20gPSBuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgbGV0IHBsYW5lTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xyXG4gICAgICAgIGNvbG9yOiBuZXcgVEhSRUUuQ29sb3IoXCJsaWdodGdyZXlcIiksXHJcbiAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxyXG4gICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGxldCBwbGFuZSA9IG5ldyBUSFJFRS5NZXNoKHBsYW5lR2VvbSwgcGxhbmVNYXRlcmlhbCk7XHJcbiAgICAgIHJldHVybiBwbGFuZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zZWxlY3RFbnRpdHkgPSBmdW5jdGlvbiAob2JqZWN0VG9TZWxlY3QsIGN1cnJlbnRTZWxlY3Rpb24pIHtcclxuICAgICAgLy8gY3VycmVudFNlbGVjdGlvbi5vYmplY3RPd25Db2xvciA9IG9iamVjdFRvU2VsZWN0Lm1hdGVyaWFsLmNvbG9yO1xyXG4gICAgICAvLyBvYmplY3RUb1NlbGVjdC5tYXRlcmlhbC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigndG9tYXRvJyk7XHJcbiAgICAgIGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0ID0gb2JqZWN0VG9TZWxlY3Q7XHJcbiAgICAgIC8vIGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0LmFkZCh0aGlzLmNyZWF0ZVdpcmVmcmFtZShjdXJyZW50U2VsZWN0aW9uKSk7XHJcbiAgICAgIGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0LmFkZChcclxuICAgICAgICB0aGlzLmNyZWF0ZUJvdW5kaW5nQm94KGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KVxyXG4gICAgICApO1xyXG4gICAgICBsZXQgdGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuICAgICAgdGFfVUkuY3JlYXRlUGFyYW1ldGVyc01lbnUob2JqZWN0VG9TZWxlY3QpO1xyXG5cclxuICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3Rpb247XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jcmVhdGVXaXJlZnJhbWUgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgIGxldCB3aXJlZnJhbWUgPSBuZXcgVEhSRUUuRWRnZXNHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnkpO1xyXG4gICAgICBsZXQgd2lyZWZyYW1lTGluZXMgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKHdpcmVmcmFtZSk7XHJcbiAgICAgIHdpcmVmcmFtZUxpbmVzLm1hdGVyaWFsLmRlcHRoVGVzdCA9IHRydWU7XHJcbiAgICAgIC8vIHdpcmVmcmFtZUxpbmVzLm1hdGVyaWFsLm9wYWNpdHkgPSAwLjI1O1xyXG4gICAgICAvLyB3aXJlZnJhbWVMaW5lcy5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XHJcbiAgICAgIHdpcmVmcmFtZUxpbmVzLm1hdGVyaWFsLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKFwid2hpdGVcIik7XHJcbiAgICAgIHdpcmVmcmFtZUxpbmVzLm5hbWUgPSBcIndpcmVmcmFtZVwiO1xyXG4gICAgICB3aXJlZnJhbWVMaW5lcy5zY2FsZS5zZXQoMS4wMDEsIDEuMDAxLCAxLjAwMSk7XHJcbiAgICAgIHJldHVybiB3aXJlZnJhbWVMaW5lcztcclxuICAgIH07XHJcbiAgICB0aGlzLmNyZWF0ZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICBvYmplY3QuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcbiAgICAgIGxldCBib3ggPSBuZXcgVEhSRUUuQm94M0hlbHBlcihcclxuICAgICAgICBvYmplY3QuZ2VvbWV0cnkuYm91bmRpbmdCb3gsXHJcbiAgICAgICAgbmV3IFRIUkVFLkNvbG9yKFwicmVkXCIpXHJcbiAgICAgICk7XHJcbiAgICAgIGJveC5uYW1lID0gXCJCb3VuZGluZ0JveFwiO1xyXG5cclxuICAgICAgaWYgKGJveC5ib3gubWluLnogPT09IDApIHtcclxuICAgICAgICBib3guYm94Lm1pbi56ID0gLTAuMDAxO1xyXG4gICAgICAgIGJveC5ib3gubWF4LnogPSAwLjAwMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGJveDtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW1vdmVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoY3VycmVudFNlbGVjdGlvbikge1xyXG4gICAgICB0aGlzLnJlbW92ZVdpcmVmcmFtZUFuZEJvdW5kaW5nQm94KGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICAgICAgLy8gY3VycmVudFNlbGVjdGlvbi5vYmplY3QubWF0ZXJpYWwuY29sb3IgPSBjdXJyZW50U2VsZWN0aW9uLm9iamVjdE93bkNvbG9yO1xyXG4gICAgICBjdXJyZW50U2VsZWN0aW9uLm9iamVjdCA9IG51bGw7XHJcbiAgICAgIGN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0T3duQ29sb3IgPSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlbW92ZVdpcmVmcmFtZUFuZEJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICBsZXQgd2lyZWZyYW1lU2NlbmUgPSBvYmplY3QuY2hpbGRyZW4uZmlsdGVyKFxyXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IFwid2lyZWZyYW1lXCIgfHwgaXRlbS5uYW1lID09PSBcIkJvdW5kaW5nQm94XCJcclxuICAgICAgKTtcclxuICAgICAgd2lyZWZyYW1lU2NlbmUuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgIG9iamVjdC5yZW1vdmUoZWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkT2JqZWN0ID0gZnVuY3Rpb24gKFxyXG4gICAgICBwYXJhbWV0ZXJOYW1lLFxyXG4gICAgICBwYXJhbWV0ZXJWYWx1ZSxcclxuICAgICAgZW50aXR5XHJcbiAgICApIHtcclxuICAgICAgbGV0IGdlb20gPSBlbnRpdHkuZ2VvbWV0cnk7XHJcblxyXG4gICAgICBsZXQgcGFyYW1zID0ge307XHJcbiAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCBnZW9tLnBhcmFtZXRlcnMpO1xyXG4gICAgICBwYXJhbXNbcGFyYW1ldGVyTmFtZV0gPSBwYXJhbWV0ZXJWYWx1ZTtcclxuXHJcbiAgICAgIGxldCBuZXdHZW9tID0gdGhpcy5jcmVhdGVHZW9tZXRyeShlbnRpdHkuZ2VvbWV0cnkudHlwZSwgcGFyYW1zKTtcclxuXHJcbiAgICAgIGVudGl0eS5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICAgIGVudGl0eS5nZW9tZXRyeSA9IG5ld0dlb207XHJcblxyXG4gICAgICAvLyBsZXQgd2lyZWZyYW1lID0gZW50aXR5LmdldE9iamVjdEJ5TmFtZSggJ3dpcmVmcmFtZScgKTtcclxuICAgICAgLy8gbGV0IG5ld1dpcmVmcmFtZUdlb21ldHJ5ID0gbmV3IFRIUkVFLldpcmVmcmFtZUdlb21ldHJ5KCBuZXdHZW9tICk7XHJcbiAgICAgIC8vIHdpcmVmcmFtZS5nZW9tZXRyeSA9IG5ld1dpcmVmcmFtZUdlb21ldHJ5O1xyXG5cclxuICAgICAgbGV0IGJvdW5kaW5nQm94ID0gZW50aXR5LmdldE9iamVjdEJ5TmFtZShcIkJvdW5kaW5nQm94XCIpO1xyXG4gICAgICBlbnRpdHkuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcbiAgICAgIGxldCBib3gzSGVscGVyID0gbmV3IFRIUkVFLkJveDNIZWxwZXIoZW50aXR5Lmdlb21ldHJ5LmJvdW5kaW5nQm94KTtcclxuXHJcbiAgICAgIGlmIChib3gzSGVscGVyLmJveC5taW4ueiA9PT0gMCkge1xyXG4gICAgICAgIGJveDNIZWxwZXIuYm94Lm1pbi56ID0gLTAuMDAxO1xyXG4gICAgICAgIGJveDNIZWxwZXIuYm94Lm1heC56ID0gMC4wMDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJvdW5kaW5nQm94LmJveCA9IGJveDNIZWxwZXIuYm94O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJOYW1lLCBwYXJhbWV0ZXJWYWx1ZSwgZW50aXR5KSB7XHJcbiAgICAgIGxldCBnZW9tID0gZW50aXR5Lmdlb21ldHJ5O1xyXG5cclxuICAgICAgbGV0IHBhcmFtcyA9IHt9O1xyXG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgZ2VvbS5wYXJhbWV0ZXJzKTtcclxuICAgICAgcGFyYW1zW3BhcmFtZXRlck5hbWVdID0gcGFyYW1ldGVyVmFsdWU7XHJcblxyXG4gICAgICBsZXQgbmV3R2VvbSA9IHRoaXMuY3JlYXRlR2VvbWV0cnkoZW50aXR5Lmdlb21ldHJ5LnR5cGUsIHBhcmFtcyk7XHJcblxyXG4gICAgICBlbnRpdHkuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gICAgICBlbnRpdHkuZ2VvbWV0cnkgPSBuZXdHZW9tO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJhbmRvbUNvbG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgcmFuZG9tQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoXHJcbiAgICAgICAgTWF0aC5yYW5kb20oKSxcclxuICAgICAgICBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICAgIE1hdGgucmFuZG9tKClcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiByYW5kb21Db2xvcjtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5DcmVhdGluZ0VudGl0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHNjb3BlID0gdGhpcztcclxuICAgICAgdGhpcy5jZW50ZXJPZk9iamVjdFdvcmxkID0gbnVsbDtcclxuICAgICAgdGhpcy5jZW50ZXJPZk9iamVjdFNjcmVlbiA9IG51bGw7XHJcbiAgICAgIHRoaXMuY3VycmVudEVudGl0eSA9IG51bGw7XHJcbiAgICAgIGxldCBtYXRlcmlhbDtcclxuXHJcbiAgICAgIHRoaXMuY3JlYXRlRW50aXR5ID0gZnVuY3Rpb24gKG1vZGUsIHNjZW5lLCBldmVudCwgc2NlbmVDYW1lcmEpIHtcclxuICAgICAgICBzY29wZS5jZW50ZXJPZk9iamVjdFNjcmVlbiA9IG5ldyBUSFJFRS5WZWN0b3IyKGV2ZW50LngsIGV2ZW50LnkpO1xyXG4gICAgICAgIGxldCB4ID0gdGhpcy5jZW50ZXJPZk9iamVjdFdvcmxkLng7XHJcbiAgICAgICAgbGV0IHkgPSB0aGlzLmNlbnRlck9mT2JqZWN0V29ybGQueTtcclxuICAgICAgICBsZXQgeiA9IHRoaXMuY2VudGVyT2ZPYmplY3RXb3JsZC56O1xyXG4gICAgICAgIGxldCB3aWR0aDtcclxuICAgICAgICBpZiAoc2NvcGUuY3VycmVudEVudGl0eSkge1xyXG4gICAgICAgICAgbGV0IHBvcyA9IHNjb3BlLmN1cnJlbnRFbnRpdHkucG9zaXRpb25cclxuICAgICAgICAgICAgLmNsb25lKClcclxuICAgICAgICAgICAgLnByb2plY3Qoc2NlbmVDYW1lcmEuY2FtZXJhKTtcclxuICAgICAgICAgIHNjb3BlLmNlbnRlck9mT2JqZWN0U2NyZWVuLnggPVxyXG4gICAgICAgICAgICAocG9zLnggKiB3aW5kb3cuaW5uZXJXaWR0aCkgLyAyICsgd2luZG93LmlubmVyV2lkdGggLyAyO1xyXG4gICAgICAgICAgc2NvcGUuY2VudGVyT2ZPYmplY3RTY3JlZW4ueSA9XHJcbiAgICAgICAgICAgIC0oKHBvcy55ICogd2luZG93LmlubmVySGVpZ2h0KSAvIDIpICsgd2luZG93LmlubmVySGVpZ2h0IC8gMjtcclxuICAgICAgICAgIGxldCB3b3JsZFNpemVPZlNjcmVlbiA9IHNjZW5lQ2FtZXJhLmdldFdvcmxkU2l6ZU9mU2NyZWVuKFxyXG4gICAgICAgICAgICBzY2VuZUNhbWVyYS5jYW1lcmEsXHJcbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRFbnRpdHkucG9zaXRpb25cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBsZXQgcmF0aW8gPVxyXG4gICAgICAgICAgICAoMTAwMDAwMDAwMCAqIHdpbmRvdy5pbm5lckhlaWdodCkgL1xyXG4gICAgICAgICAgICAoMTAwMDAwMDAwMCAqIHdvcmxkU2l6ZU9mU2NyZWVuLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgbGV0IGN1cnJlbnRDb29yZHNTY3JlZW4gPSBuZXcgVEhSRUUuVmVjdG9yMihldmVudC54LCBldmVudC55KTtcclxuICAgICAgICAgIGxldCBkaXN0YW5jZSA9IGN1cnJlbnRDb29yZHNTY3JlZW4uZGlzdGFuY2VUbyhcclxuICAgICAgICAgICAgc2NvcGUuY2VudGVyT2ZPYmplY3RTY3JlZW5cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICB3aWR0aCA9ICgxLjAgKiBkaXN0YW5jZSkgLyByYXRpbztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgd2lkdGggPSAwLjAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xyXG4gICAgICAgICAgY29sb3I6IEdMT0JBTFNDT1BFLnJhbmRvbUNvbG9yKCksXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAobW9kZS5lbnRpdHkpIHtcclxuICAgICAgICAgIGNhc2UgXCJCb3hCdWZmZXJHZW9tZXRyeVwiOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RW50aXR5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwid2lkdGhcIiwgd2lkdGgsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwiaGVpZ2h0XCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICAgIEdMT0JBTFNDT1BFLnVwZGF0ZU9iamVjdChcImRlcHRoXCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eSA9IEdMT0JBTFNDT1BFLmNyZWF0ZUJveChcclxuICAgICAgICAgICAgICAgIHgsXHJcbiAgICAgICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICAgICAgeixcclxuICAgICAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFbnRpdHkubmFtZSA9IFwiQ1VCRVwiO1xyXG5cclxuICAgICAgICAgICAgICBzY2VuZS5hZGQodGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSBcIlNwaGVyZUJ1ZmZlckdlb21ldHJ5XCI6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRFbnRpdHkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBHTE9CQUxTQ09QRS51cGRhdGVPYmplY3QoXCJyYWRpdXNcIiwgd2lkdGgsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5ID0gR0xPQkFMU0NPUEUuY3JlYXRlU3BoZXJlKFxyXG4gICAgICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgICAgIHksXHJcbiAgICAgICAgICAgICAgICB6LFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAxMixcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5Lm5hbWUgPSBcIlNQSEVSRVwiO1xyXG5cclxuICAgICAgICAgICAgICBzY2VuZS5hZGQodGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSBcIkNpcmNsZUJ1ZmZlckdlb21ldHJ5XCI6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRFbnRpdHkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBHTE9CQUxTQ09QRS51cGRhdGVPYmplY3QoXCJyYWRpdXNcIiwgd2lkdGgsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5ID0gR0xPQkFMU0NPUEUuY3JlYXRlQ2lyY2xlKFxyXG4gICAgICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgICAgIHksXHJcbiAgICAgICAgICAgICAgICB6LFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICAxMixcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5Lm5hbWUgPSBcIkNpcmNsZVwiO1xyXG5cclxuICAgICAgICAgICAgICBzY2VuZS5hZGQodGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSBcIkNvbmVCdWZmZXJHZW9tZXRyeVwiOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RW50aXR5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwicmFkaXVzXCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICAgIEdMT0JBTFNDT1BFLnVwZGF0ZU9iamVjdChcImhlaWdodFwiLCB3aWR0aCAqIDIsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5ID0gR0xPQkFMU0NPUEUuY3JlYXRlQ29uZShcclxuICAgICAgICAgICAgICAgIHgsXHJcbiAgICAgICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICAgICAgeixcclxuICAgICAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggKiAyLFxyXG4gICAgICAgICAgICAgICAgOCxcclxuICAgICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eS5uYW1lID0gXCJDb25lXCI7XHJcblxyXG4gICAgICAgICAgICAgIHNjZW5lLmFkZCh0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIFwiQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeVwiOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RW50aXR5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwicmFkaXVzVG9wXCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICAgIEdMT0JBTFNDT1BFLnVwZGF0ZU9iamVjdChcclxuICAgICAgICAgICAgICAgIFwicmFkaXVzQm90dG9tXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwiaGVpZ2h0XCIsIHdpZHRoICogMiwgdGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFbnRpdHkgPSBHTE9CQUxTQ09QRS5jcmVhdGVDeWxpbmRlcihcclxuICAgICAgICAgICAgICAgIHgsXHJcbiAgICAgICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICAgICAgeixcclxuICAgICAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCAqIDIsXHJcbiAgICAgICAgICAgICAgICA4LFxyXG4gICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFsXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5Lm5hbWUgPSBcIkN5bGluZGVyXCI7XHJcblxyXG4gICAgICAgICAgICAgIHNjZW5lLmFkZCh0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIFwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjpcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEVudGl0eSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIEdMT0JBTFNDT1BFLnVwZGF0ZU9iamVjdChcInJhZGl1c1wiLCB3aWR0aCwgdGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFbnRpdHkgPSBHTE9CQUxTQ09QRS5jcmVhdGVEb2RlY2FoZWRyb24oXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgICAgIHosXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eS5uYW1lID0gXCJEb2RlY2FoZWRyb25cIjtcclxuXHJcbiAgICAgICAgICAgICAgc2NlbmUuYWRkKHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgXCJJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRFbnRpdHkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBHTE9CQUxTQ09QRS51cGRhdGVPYmplY3QoXCJyYWRpdXNcIiwgd2lkdGgsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5ID0gR0xPQkFMU0NPUEUuY3JlYXRlSWNvc2FoZWRyb24oXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgICAgIHosXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eS5uYW1lID0gXCJJY29zYWhlZHJvblwiO1xyXG5cclxuICAgICAgICAgICAgICBzY2VuZS5hZGQodGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSBcIk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeVwiOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RW50aXR5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwicmFkaXVzXCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eSA9IEdMT0JBTFNDT1BFLmNyZWF0ZU9jdGFoZWRyb24oXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgICAgIHosXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eS5uYW1lID0gXCJPY3RhaGVkcm9uXCI7XHJcblxyXG4gICAgICAgICAgICAgIHNjZW5lLmFkZCh0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIFwiVG9ydXNCdWZmZXJHZW9tZXRyeVwiOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RW50aXR5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgR0xPQkFMU0NPUEUudXBkYXRlT2JqZWN0KFwicmFkaXVzXCIsIHdpZHRoLCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICAgIEdMT0JBTFNDT1BFLnVwZGF0ZU9iamVjdChcInR1YmVcIiwgd2lkdGggLyA1LCB0aGlzLmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eSA9IEdMT0JBTFNDT1BFLmNyZWF0ZVRvcnVzKFxyXG4gICAgICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgICAgIHksXHJcbiAgICAgICAgICAgICAgICB6LFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCAvIDEwLFxyXG4gICAgICAgICAgICAgICAgOCxcclxuICAgICAgICAgICAgICAgIDEyLFxyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxcclxuICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFbnRpdHkubmFtZSA9IFwiVG9ydXNcIjtcclxuXHJcbiAgICAgICAgICAgICAgc2NlbmUuYWRkKHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgXCJUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRFbnRpdHkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICBHTE9CQUxTQ09QRS51cGRhdGVPYmplY3QoXCJyYWRpdXNcIiwgd2lkdGgsIHRoaXMuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RW50aXR5ID0gR0xPQkFMU0NPUEUuY3JlYXRlVGV0cmFoZWRyb24oXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgICAgIHosXHJcbiAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEVudGl0eS5uYW1lID0gXCJUZXRyYWhlZHJvblwiO1xyXG5cclxuICAgICAgICAgICAgICBzY2VuZS5hZGQodGhpcy5jdXJyZW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgLy9Ub3J1c0J1ZmZlckdlb21ldHJ5XHJcblxyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLnN0b3BDcmVhdGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRFbnRpdHkudXNlckRhdGEgPSB7IGNyZWF0ZWRCeVVzZXI6IHRydWUsIHNlbGVjdGFibGU6IHRydWUgfTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coIHRoaXMuY3VycmVudEVudGl0eSApO1xyXG5cclxuICAgICAgICB0aGlzLmNlbnRlck9mT2JqZWN0V29ybGQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2VudGVyT2ZPYmplY3RTY3JlZW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEVudGl0eSA9IG51bGw7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2xvbmVPYmplY3QodGFfc2NlbmUpIHtcclxuICAgIGlmICh0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgICBsZXQgY29waWVkT2JqZWN0SUQgPSB0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdC5pZDtcclxuICAgICAgdGhpcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveCh0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCk7XHJcblxyXG4gICAgICBsZXQgY29waWVkT2JqZWN0ID0gdGFfc2NlbmUuc2NlbmUuZ2V0T2JqZWN0QnlJZChjb3BpZWRPYmplY3RJRCk7XHJcblxyXG4gICAgICBsZXQgbmV3T2JqZWN0ID0gY29waWVkT2JqZWN0LmNsb25lKGZhbHNlKTtcclxuXHJcbiAgICAgIHRhX3NjZW5lLnNlbGVjdGFibGVPYmplY3RzLnB1c2gobmV3T2JqZWN0KTtcclxuXHJcbiAgICAgIHRhX3NjZW5lLnNjZW5lLmFkZChuZXdPYmplY3QpO1xyXG5cclxuICAgICAgdGhpcy5zZWxlY3RFbnRpdHkoXHJcbiAgICAgICAgdGFfc2NlbmUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QsXHJcbiAgICAgICAgdGFfc2NlbmUuY3VycmVudFNlbGVjdGlvblxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgbGV0IGxlbmd0aEFycmF5ID1cclxuICAgICAgICB0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmNoaWxkcmVuLmxlbmd0aDtcclxuXHJcbiAgICAgIGxldCBtdWx0dVNlbGVjdGlvbkFycmF5ID1cclxuICAgICAgICB0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmNoaWxkcmVuO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IGxlbmd0aEFycmF5IC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICB0aGlzLnJlbW92ZVdpcmVmcmFtZUFuZEJvdW5kaW5nQm94KG11bHR1U2VsZWN0aW9uQXJyYXlbaV0pO1xyXG5cclxuICAgICAgICBsZXQgaWQgPSBtdWx0dVNlbGVjdGlvbkFycmF5W2ldLmlkO1xyXG4gICAgICAgIGxldCBjb3BpZWRPYmplY3QgPSB0YV9zY2VuZS5zY2VuZS5nZXRPYmplY3RCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgdGFfc2NlbmUuc2NlbmUuYXR0YWNoKG11bHR1U2VsZWN0aW9uQXJyYXlbaV0pO1xyXG5cclxuICAgICAgICBsZXQgbmV3T2JqZWN0ID0gY29waWVkT2JqZWN0LmNsb25lKCk7XHJcblxyXG4gICAgICAgIHRhX3NjZW5lLnNjZW5lLmFkZChuZXdPYmplY3QpO1xyXG5cclxuICAgICAgICB0YV9zY2VuZS5zZWxlY3RhYmxlT2JqZWN0cy5wdXNoKG5ld09iamVjdCk7XHJcblxyXG4gICAgICAgIHRhX3NjZW5lLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uYXR0YWNoKGNvcGllZE9iamVjdCk7XHJcblxyXG4gICAgICAgIGNvcGllZE9iamVjdC5hZGQodGhpcy5jcmVhdGVCb3VuZGluZ0JveChjb3BpZWRPYmplY3QpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVEFfRW50aXRpZXMgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuaW1wb3J0IHsgVEFfRW50aXRpZXMgfSBmcm9tIFwiLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5pbXBvcnQgeyBUQV9VSSB9IGZyb20gXCIuL1VJL1RBX1VJLmpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoT25Nb3ZlTW9kZSh0YVNjZW5lKSB7XHJcbiAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9sc01vZGUgPSBcInRyYW5zbGF0ZVwiO1xyXG5cclxuICBpZiAodGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2godGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCk7XHJcbiAgfVxyXG4gIGlmICh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2godGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uKTtcclxuICB9XHJcbiAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5zZXRNb2RlKHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHNNb2RlKTtcclxuICAvLyB0YVNjZW5lLmRyYWdDb250cm9scy5kZWFjdGl2YXRlKCk7XHJcbiAgdGFTY2VuZS5tb2RlLmFjdGlvbiA9IFwic2VsZWN0XCI7XHJcbiAgdGFTY2VuZS5vcmJpdENvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzd2l0Y2hPblJvdGF0aW9uTW9kZSh0YVNjZW5lKSB7XHJcbiAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9sc01vZGUgPSBcInJvdGF0ZVwiO1xyXG4gIGlmICh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KSB7XHJcbiAgICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaCh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICB9XHJcbiAgaWYgKHRhU2NlbmUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaCh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24pO1xyXG4gIH1cclxuICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLnNldE1vZGUodGFTY2VuZS50cmFuc2Zvcm1Db250cm9sc01vZGUpO1xyXG4gIC8vIHRhU2NlbmUuZHJhZ0NvbnRyb2xzLmRlYWN0aXZhdGUoKTtcclxuICB0YVNjZW5lLm1vZGUuYWN0aW9uID0gXCJzZWxlY3RcIjtcclxuICB0YVNjZW5lLm9yYml0Q29udHJvbHMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN3aXRjaE9uU2NhbGVNb2RlKHRhU2NlbmUpIHtcclxuICBpZiAodGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2godGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCk7XHJcbiAgfVxyXG4gIGlmICh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2godGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uKTtcclxuICB9XHJcblxyXG4gIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHNNb2RlID0gXCJzY2FsZVwiO1xyXG4gIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuc2V0TW9kZSh0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSk7XHJcbiAgLy8gdGFTY2VuZS5kcmFnQ29udHJvbHMuZGVhY3RpdmF0ZSgpO1xyXG4gIHRhU2NlbmUubW9kZS5hY3Rpb24gPSBcInNlbGVjdFwiO1xyXG4gIHRhU2NlbmUub3JiaXRDb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoT25TZWxlY3RNb2RlKHRhU2NlbmUpIHtcclxuICB0YVNjZW5lLm1vZGUuYWN0aW9uID0gXCJzZWxlY3RcIjtcclxuICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSA9IFwiXCI7XHJcbiAgdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5kZXRhY2godGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCk7XHJcbiAgLy8gdGFTY2VuZS5kcmFnQ29udHJvbHMuZGVhY3RpdmF0ZSgpO1xyXG4gIHRhU2NlbmUub3JiaXRDb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoRHJhZ01vZGUoY2hlY2tlZCwgdGFTY2VuZSkge1xyXG4gIGxldCB0YUVudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcblxyXG4gIGlmIChjaGVja2VkKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyggdGgpXHJcblxyXG4gICAgaWYgKHRhU2NlbmUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpIHtcclxuICAgICAgLy8gdGFfVUkuZGVsZXRlUGFyYW1ldGVyc01lbnUoKTtcclxuXHJcbiAgICAgIGlmICh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KSB7XHJcbiAgICAgICAgLy8gdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5kZXRhY2goIHRhU2NlbmUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QgKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIC8vIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuZGV0YWNoKCB0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmRldGFjaCggdGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCApO1xyXG5cclxuICAgICAgdGFFbnRpdGllcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveCh0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSA9ICcnO1xyXG4gICAgdGFTY2VuZS5tb2RlLmFjdGlvbiA9IFwiXCI7XHJcbiAgICB0YVNjZW5lLmRyYWdDb250cm9scy5hY3RpdmF0ZSgpO1xyXG5cclxuICAgIC8vYnVnIGZpeGluZy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzE5MjkwXHJcbiAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGFiZWxSZW5kZXJlcicpLmRpc3BhdGNoRXZlbnQoIG5ldyBFdmVudCggJ21vdXNlbW92ZScsIHsgY2xpZW50WDogdGFTY2VuZS5tb3VzZVBvc2l0aW9uLngsIGNsaWVudFk6IHRhU2NlbmUubW91c2VQb3NpdGlvbi55IH0gKSApO1xyXG5cclxuICAgIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5mb3JtLnJlc2V0KCk7XHJcbiAgICB0YV9VSS5lbGVtZW50cy5maW5pc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgdGFTY2VuZS5tb2RlLmFjdGlvbiA9IFwic2VsZWN0XCI7XHJcbiAgICB0YVNjZW5lLm1vZGUuZW50aXR5ID0gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKHRhU2NlbmUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpIHtcclxuICAgICAgdGFFbnRpdGllcy5zZWxlY3RFbnRpdHkoXHJcbiAgICAgICAgdGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCxcclxuICAgICAgICB0YVNjZW5lLmN1cnJlbnRTZWxlY3Rpb25cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHRhU2NlbmUuZHJhZ0NvbnRyb2xzLmRlYWN0aXZhdGUoKTtcclxuICAgIGxhYmVsUmVuZGVyZXIuc3R5bGUuY3Vyc29yID0gXCJhdXRvXCI7IC8vYnVnIGZpeGluZy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzE5MjkwXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3dpdGNoRWRpdFZlcnRpY2VzKCkge31cclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImU5ZmM1Nzc4MDEyODRlMTQ2MzBiMTZlMzc3ZDE4ZTk0LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzMmNmNjk2NzE2NTNjMzA2MDlmNDI5OWE5ZWJkYjViZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gc2luZ2xldG9uXHJcbiAgICBpZiAoRXZlbnRFbWl0dGVyLmV4aXN0KSB7XHJcbiAgICAgIHJldHVybiBFdmVudEVtaXR0ZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBFdmVudEVtaXR0ZXIuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgRXZlbnRFbWl0dGVyLmV4aXN0ID0gdHJ1ZTtcclxuICAgIC8vLS0tXHJcblxyXG4gICAgdGhpcy5fZXZlbnRzID0ge307XHJcbiAgfVxyXG5cclxuICBvbkV2ZW50KG5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tuYW1lXSkge1xyXG4gICAgICB0aGlzLl9ldmVudHNbbmFtZV0gPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9ldmVudHNbbmFtZV0ucHVzaChsaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICByZW1vdmVsaXN0ZW5lcihuYW1lLCBsaXN0ZW5lclRvUmVtb3ZlKSB7XHJcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tuYW1lXSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHJlbW92ZSBhIGxpc3RlbmVyLiBFdmVudCBcIiR7bmFtZX0gZG9lc24ndCBleGlzdGApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2V2ZW50c1tuYW1lXSA9IHRoaXMuX2V2ZW50c1tuYW1lXS5maWx0ZXIoXHJcbiAgICAgIChsaXN0ZW5lcikgPT4gbGlzdGVuZXIgIT0gbGlzdGVuZXJUb1JlbW92ZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGVtaXRFdmVudChuYW1lLCBkYXRhKSB7XHJcbiAgICBpZiAoIXRoaXMuX2V2ZW50c1tuYW1lXSkge1xyXG4gICAgICAvLyBjb25zb2xlLmVycm9yKGBObyBhbnkgbGlzdGVuZXJzIG9uIGV2ZW50ICR7bmFtZX1gKVxyXG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGVtaXQgYW4gZXZlbnQuIEV2ZW50ICR7bmFtZX0gZG9lc24ndCBleGlzdGApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZXZlbnRzW25hbWVdLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhkYXRhKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBAYXV0aG9yIERyYWdvbjNER3JhZmYgLyBodHRwOi8vZHJhZ29uM2RncmFmZi5ydS9cclxuICovXHJcblxyXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCIuL0V2ZW50RW1pdHRlclwiO1xyXG5cclxuY2xhc3MgVEFfU3RhdGUge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gc2luZ2xldG9uXHJcbiAgICBpZiAoVEFfU3RhdGUuZXhpc3QpIHtcclxuICAgICAgcmV0dXJuIFRBX1N0YXRlLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgVEFfU3RhdGUuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgVEFfU3RhdGUuZXhpc3QgPSB0cnVlO1xyXG4gICAgLy8tLVxyXG5cclxuICAgIC8vIHRoaXMuc3RhdGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB0aGlzLnN0YXRlID0ge307XHJcbiAgICB0aGlzLmFwcE1vZGUgPSB7XHJcbiAgICAgIG1vZGU6IFwiXCIsXHJcbiAgICAgIG1lc2hFZGl0OiBmYWxzZSxcclxuICAgICAgYWN0aW9uOiBcInNlbGVjdFwiLFxyXG4gICAgICBlbnRpdHk6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudHJhbnNmb3JtTW9kZSA9IHtcclxuICAgICAgbW9kZTogXCJcIixcclxuICAgICAgdHJhbnNmb3JtQ29udHJvbHNNb2RlOiBcIlwiLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1lc2hFZGl0TW9kZSA9IHt9O1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlQXBwU3RhdGUobW9kZSwgc3RhdGUpIHtcclxuICAgIHRoaXMuX3VwZGF0ZVN0YXRlKG1vZGUsIHN0YXRlKTtcclxuICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXRFdmVudChtb2RlLCBzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBfdXBkYXRlU3RhdGUobW9kZSwgc3RhdGUpIHtcclxuICAgIHRoaXMuc3RhdGVbbW9kZV0gPSBzdGF0ZTtcclxuICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXRFdmVudChcImFwcFN0YXRlQ2hhbmdlZFwiLCBtb2RlICsgXCIgXCIgKyBzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBzZXRBcHBNb2RlICggYXBwTW9kZSApIHtcclxuXHJcbiAgLy8gfVxyXG5cclxuICAvLyBzZXRUcmFuc2Zvcm1Nb2RlKHRyYW5zZm9ybU1vZGUpIHt9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFRBX1N0YXRlIH07XHJcbiIsIi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cbiAqIFJ1bm5pbmcgdGhpcyB3aWxsIGFsbG93IHlvdSB0byBkcmFnIHRocmVlLmpzIG9iamVjdHMgYXJvdW5kIHRoZSBzY3JlZW4uXG4gKi9cblxuaW1wb3J0IHtcbiAgRXZlbnREaXNwYXRjaGVyLFxuICBNYXRyaXg0LFxuICBQbGFuZSxcbiAgUmF5Y2FzdGVyLFxuICBWZWN0b3IyLFxuICBWZWN0b3IzLFxufSBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qc1wiO1xuXG52YXIgRHJhZ0NvbnRyb2xzID0gZnVuY3Rpb24gKF9vYmplY3RzLCBfY2FtZXJhLCBfZG9tRWxlbWVudCkge1xuICB2YXIgX3BsYW5lID0gbmV3IFBsYW5lKCk7XG4gIHZhciBfcmF5Y2FzdGVyID0gbmV3IFJheWNhc3RlcigpO1xuXG4gIHZhciBfbW91c2UgPSBuZXcgVmVjdG9yMigpO1xuICB2YXIgX29mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG4gIHZhciBfaW50ZXJzZWN0aW9uID0gbmV3IFZlY3RvcjMoKTtcbiAgdmFyIF93b3JsZFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcbiAgdmFyIF9pbnZlcnNlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbiAgdmFyIF9pbnRlcnNlY3Rpb25zID0gW107XG5cbiAgdmFyIF9zZWxlY3RlZCA9IG51bGwsXG4gICAgX2hvdmVyZWQgPSBudWxsO1xuXG4gIC8vXG5cbiAgdmFyIHNjb3BlID0gdGhpcztcblxuICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uRG9jdW1lbnRNb3VzZU1vdmUsIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG9uRG9jdW1lbnRNb3VzZURvd24sIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbkRvY3VtZW50TW91c2VDYW5jZWwsIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbkRvY3VtZW50TW91c2VDYW5jZWwsIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG9uRG9jdW1lbnRUb3VjaE1vdmUsIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBvbkRvY3VtZW50VG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIF9kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBvbkRvY3VtZW50VG91Y2hFbmQsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbkRvY3VtZW50TW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBvbkRvY3VtZW50TW91c2VEb3duLCBmYWxzZSk7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgb25Eb2N1bWVudE1vdXNlQ2FuY2VsLCBmYWxzZSk7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgb25Eb2N1bWVudE1vdXNlQ2FuY2VsLCBmYWxzZSk7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBvbkRvY3VtZW50VG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgX2RvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgb25Eb2N1bWVudFRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBfZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgb25Eb2N1bWVudFRvdWNoRW5kLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGRlYWN0aXZhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9iamVjdHMoKSB7XG4gICAgcmV0dXJuIF9vYmplY3RzO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZShldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgcmVjdCA9IF9kb21FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgX21vdXNlLnggPSAoKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQpIC8gcmVjdC53aWR0aCkgKiAyIC0gMTtcbiAgICBfbW91c2UueSA9IC0oKGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCkgLyByZWN0LmhlaWdodCkgKiAyICsgMTtcblxuICAgIF9yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShfbW91c2UsIF9jYW1lcmEpO1xuXG4gICAgaWYgKF9zZWxlY3RlZCAmJiBzY29wZS5lbmFibGVkKSB7XG4gICAgICBpZiAoX3JheWNhc3Rlci5yYXkuaW50ZXJzZWN0UGxhbmUoX3BsYW5lLCBfaW50ZXJzZWN0aW9uKSkge1xuICAgICAgICBfc2VsZWN0ZWQucG9zaXRpb24uY29weShcbiAgICAgICAgICBfaW50ZXJzZWN0aW9uLnN1Yihfb2Zmc2V0KS5hcHBseU1hdHJpeDQoX2ludmVyc2VNYXRyaXgpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImRyYWdcIiwgb2JqZWN0OiBfc2VsZWN0ZWQgfSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfaW50ZXJzZWN0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgX3JheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKF9tb3VzZSwgX2NhbWVyYSk7XG4gICAgX3JheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKF9vYmplY3RzLCB0cnVlLCBfaW50ZXJzZWN0aW9ucyk7XG5cbiAgICBpZiAoX2ludGVyc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgX2RvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7IC8vIGFkZGVkXG5cbiAgICAgIHZhciBvYmplY3QgPSBfaW50ZXJzZWN0aW9uc1swXS5vYmplY3Q7XG5cbiAgICAgIF9wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChcbiAgICAgICAgX2NhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihfcGxhbmUubm9ybWFsKSxcbiAgICAgICAgX3dvcmxkUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKG9iamVjdC5tYXRyaXhXb3JsZClcbiAgICAgICk7XG5cbiAgICAgIGlmIChfaG92ZXJlZCAhPT0gb2JqZWN0KSB7XG4gICAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImhvdmVyb25cIiwgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgLy8gX2RvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInOyAvL3JlbW92ZWRcbiAgICAgICAgX2hvdmVyZWQgPSBvYmplY3Q7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChfaG92ZXJlZCAhPT0gbnVsbCkge1xuICAgICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KHsgdHlwZTogXCJob3Zlcm9mZlwiLCBvYmplY3Q6IF9ob3ZlcmVkIH0pO1xuXG4gICAgICAgIF9kb21FbGVtZW50LnN0eWxlLmN1cnNvciA9IFwiYXV0b1wiO1xuICAgICAgICBfaG92ZXJlZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlRG93bihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBfaW50ZXJzZWN0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgX3JheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKF9tb3VzZSwgX2NhbWVyYSk7XG4gICAgX3JheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKF9vYmplY3RzLCB0cnVlLCBfaW50ZXJzZWN0aW9ucyk7XG5cbiAgICBpZiAoX2ludGVyc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgX3NlbGVjdGVkID1cbiAgICAgICAgc2NvcGUudHJhbnNmb3JtR3JvdXAgPT09IHRydWUgPyBfb2JqZWN0c1swXSA6IF9pbnRlcnNlY3Rpb25zWzBdLm9iamVjdDtcblxuICAgICAgaWYgKF9yYXljYXN0ZXIucmF5LmludGVyc2VjdFBsYW5lKF9wbGFuZSwgX2ludGVyc2VjdGlvbikpIHtcbiAgICAgICAgX2ludmVyc2VNYXRyaXguZ2V0SW52ZXJzZShfc2VsZWN0ZWQucGFyZW50Lm1hdHJpeFdvcmxkKTtcbiAgICAgICAgX29mZnNldFxuICAgICAgICAgIC5jb3B5KF9pbnRlcnNlY3Rpb24pXG4gICAgICAgICAgLnN1Yihfd29ybGRQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oX3NlbGVjdGVkLm1hdHJpeFdvcmxkKSk7XG4gICAgICB9XG5cbiAgICAgIF9kb21FbGVtZW50LnN0eWxlLmN1cnNvciA9IFwibW92ZVwiO1xuXG4gICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KHsgdHlwZTogXCJkcmFnc3RhcnRcIiwgb2JqZWN0OiBfc2VsZWN0ZWQgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlQ2FuY2VsKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChfc2VsZWN0ZWQpIHtcbiAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImRyYWdlbmRcIiwgb2JqZWN0OiBfc2VsZWN0ZWQgfSk7XG5cbiAgICAgIF9zZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuXG4gICAgX2RvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gX2hvdmVyZWQgPyBcInBvaW50ZXJcIiA6IFwiYXV0b1wiO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoTW92ZShldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcblxuICAgIHZhciByZWN0ID0gX2RvbUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBfbW91c2UueCA9ICgoZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoKSAqIDIgLSAxO1xuICAgIF9tb3VzZS55ID0gLSgoZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wKSAvIHJlY3QuaGVpZ2h0KSAqIDIgKyAxO1xuXG4gICAgX3JheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKF9tb3VzZSwgX2NhbWVyYSk7XG5cbiAgICBpZiAoX3NlbGVjdGVkICYmIHNjb3BlLmVuYWJsZWQpIHtcbiAgICAgIGlmIChfcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RQbGFuZShfcGxhbmUsIF9pbnRlcnNlY3Rpb24pKSB7XG4gICAgICAgIF9zZWxlY3RlZC5wb3NpdGlvbi5jb3B5KFxuICAgICAgICAgIF9pbnRlcnNlY3Rpb24uc3ViKF9vZmZzZXQpLmFwcGx5TWF0cml4NChfaW52ZXJzZU1hdHJpeClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUuZGlzcGF0Y2hFdmVudCh7IHR5cGU6IFwiZHJhZ1wiLCBvYmplY3Q6IF9zZWxlY3RlZCB9KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuXG4gICAgdmFyIHJlY3QgPSBfZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIF9tb3VzZS54ID0gKChldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0KSAvIHJlY3Qud2lkdGgpICogMiAtIDE7XG4gICAgX21vdXNlLnkgPSAtKChldmVudC5jbGllbnRZIC0gcmVjdC50b3ApIC8gcmVjdC5oZWlnaHQpICogMiArIDE7XG5cbiAgICBfaW50ZXJzZWN0aW9ucy5sZW5ndGggPSAwO1xuXG4gICAgX3JheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKF9tb3VzZSwgX2NhbWVyYSk7XG4gICAgX3JheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKF9vYmplY3RzLCB0cnVlLCBfaW50ZXJzZWN0aW9ucyk7XG5cbiAgICBpZiAoX2ludGVyc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgX3NlbGVjdGVkID1cbiAgICAgICAgc2NvcGUudHJhbnNmb3JtR3JvdXAgPT09IHRydWUgPyBfb2JqZWN0c1swXSA6IF9pbnRlcnNlY3Rpb25zWzBdLm9iamVjdDtcblxuICAgICAgX3BsYW5lLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KFxuICAgICAgICBfY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKF9wbGFuZS5ub3JtYWwpLFxuICAgICAgICBfd29ybGRQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oX3NlbGVjdGVkLm1hdHJpeFdvcmxkKVxuICAgICAgKTtcblxuICAgICAgaWYgKF9yYXljYXN0ZXIucmF5LmludGVyc2VjdFBsYW5lKF9wbGFuZSwgX2ludGVyc2VjdGlvbikpIHtcbiAgICAgICAgX2ludmVyc2VNYXRyaXguZ2V0SW52ZXJzZShfc2VsZWN0ZWQucGFyZW50Lm1hdHJpeFdvcmxkKTtcbiAgICAgICAgX29mZnNldFxuICAgICAgICAgIC5jb3B5KF9pbnRlcnNlY3Rpb24pXG4gICAgICAgICAgLnN1Yihfd29ybGRQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oX3NlbGVjdGVkLm1hdHJpeFdvcmxkKSk7XG4gICAgICB9XG5cbiAgICAgIF9kb21FbGVtZW50LnN0eWxlLmN1cnNvciA9IFwibW92ZVwiO1xuXG4gICAgICBzY29wZS5kaXNwYXRjaEV2ZW50KHsgdHlwZTogXCJkcmFnc3RhcnRcIiwgb2JqZWN0OiBfc2VsZWN0ZWQgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Eb2N1bWVudFRvdWNoRW5kKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChfc2VsZWN0ZWQpIHtcbiAgICAgIHNjb3BlLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcImRyYWdlbmRcIiwgb2JqZWN0OiBfc2VsZWN0ZWQgfSk7XG5cbiAgICAgIF9zZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuXG4gICAgX2RvbUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJhdXRvXCI7XG4gIH1cblxuICBhY3RpdmF0ZSgpO1xuXG4gIC8vIEFQSVxuXG4gIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIHRoaXMudHJhbnNmb3JtR3JvdXAgPSBmYWxzZTtcblxuICB0aGlzLmFjdGl2YXRlID0gYWN0aXZhdGU7XG4gIHRoaXMuZGVhY3RpdmF0ZSA9IGRlYWN0aXZhdGU7XG4gIHRoaXMuZGlzcG9zZSA9IGRpc3Bvc2U7XG4gIHRoaXMuZ2V0T2JqZWN0cyA9IGdldE9iamVjdHM7XG59O1xuXG5EcmFnQ29udHJvbHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudERpc3BhdGNoZXIucHJvdG90eXBlKTtcbkRyYWdDb250cm9scy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEcmFnQ29udHJvbHM7XG5cbmV4cG9ydCB7IERyYWdDb250cm9scyB9O1xuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgQW1iaWVudExpZ2h0LFxyXG4gIFNwb3RMaWdodCxcclxuICBDb2xvcixcclxufSBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qc1wiO1xyXG5jbGFzcyBUQV9TY2VuZUxpZ2h0cyB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBBbWJpZW50TGlnaHQobmV3IENvbG9yKFwid2hpdGVcIiksIDAuNSk7XHJcbiAgICAvLyBzb2Z0IHdoaXRlIGxpZ2h0IDB4NDA0MDQwXHJcbiAgICB0aGlzLnNwb3RMaWdodCA9IG5ldyBTcG90TGlnaHQobmV3IENvbG9yKFwiZ3JleVwiKSk7XHJcbiAgICB0aGlzLnNwb3RMaWdodC5wb3NpdGlvbi5zZXQoLTMsIDAsIDIpO1xyXG4gICAgLy8gbGV0IHBvaW50TGlnaHRIZWxwZXIgPSBuZXcgU3BvdExpZ2h0SGVscGVyKCBzcG90TGlnaHQgKTtcclxuICAgIC8vIHNjZW5lLmFkZCggcG9pbnRMaWdodEhlbHBlciApO1xyXG4gICAgdGhpcy5zcG90TGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XHJcbiAgICB0aGlzLnNwb3RMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IDEwMjQ7XHJcbiAgICB0aGlzLnNwb3RMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAxMDI0O1xyXG4gICAgdGhpcy5zcG90TGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gNTAwO1xyXG4gICAgdGhpcy5zcG90TGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSA0MDAwO1xyXG4gICAgdGhpcy5zcG90TGlnaHQuc2hhZG93LmNhbWVyYS5mb3YgPSAzMDtcclxuICB9XHJcblxyXG4gIGluaXRBbWJpZW50bGlnaHQoc2NlbmUpIHtcclxuICAgIGlmICghc2NlbmUgfHwgIXNjZW5lLmlzU2NlbmUpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgIFwiUGFyYW1ldGVyIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBvYmplY3Qgb2YgVEhSRUUuU2NlbmUoKVwiXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzY2VuZS5hZGQodGhpcy5hbWJpZW50TGlnaHQpO1xyXG4gIH1cclxuXHJcbiAgaW5pdFNwb3RMaWdodChzY2VuZSkge1xyXG4gICAgaWYgKCFzY2VuZSB8fCAhc2NlbmUuaXNTY2VuZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgXCJQYXJhbWV0ZXIgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIG9iamVjdCBvZiBUSFJFRS5TY2VuZSgpXCJcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNjZW5lLmFkZCh0aGlzLnNwb3RMaWdodCk7XHJcbiAgfVxyXG5cclxuICBpbml0QWxsKHNjZW5lKSB7XHJcbiAgICBpZiAoIXNjZW5lIHx8ICFzY2VuZS5pc1NjZW5lKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICBcIlBhcmFtZXRlciBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgb2JqZWN0IG9mIFRIUkVFLlNjZW5lKClcIlxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2NlbmUuYWRkKHRoaXMuc3BvdExpZ2h0KTtcclxuICAgIHNjZW5lLmFkZCh0aGlzLmFtYmllbnRMaWdodCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVBbGwoc2NlbmUpIHtcclxuICAgIGlmICghc2NlbmUgfHwgIXNjZW5lLmlzU2NlbmUpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgIFwiUGFyYW1ldGVyIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBvYmplY3Qgb2YgVEhSRUUuU2NlbmUoKVwiXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzY2VuZS5yZW1vdmUodGhpcy5zcG90TGlnaHQpO1xyXG4gICAgc2NlbmUucmVtb3ZlKHRoaXMuYW1iaWVudExpZ2h0KTtcclxuICB9XHJcbn1cclxuZXhwb3J0IHsgVEFfU2NlbmVMaWdodHMgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgR3JpZEhlbHBlcixcclxuICBDb2xvcixcclxuICBQbGFuZUJ1ZmZlckdlb21ldHJ5LFxyXG4gIE1lc2hCYXNpY01hdGVyaWFsLFxyXG4gIERvdWJsZVNpZGUsXHJcbiAgTWVzaCxcclxuICBDYW1lcmFIZWxwZXIsXHJcbn0gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanNcIjtcclxuaW1wb3J0IHsgVEFfRW50aXRpZXMgfSBmcm9tIFwiLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5cclxubGV0IFRBX0hlbHBlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5jb29yZHNIZWxwZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5jcmVhdGVDb29yZHNIZWxwZXJzID0gZnVuY3Rpb24gKGludGVyc2VjdHMsIHNjZW5lKSB7XHJcbiAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBsZXQgeCA9IGludGVyc2VjdHNbMF0ucG9pbnQueDtcclxuICAgICAgICBsZXQgeSA9IGludGVyc2VjdHNbMF0ucG9pbnQueTtcclxuICAgICAgICBsZXQgeiA9IGludGVyc2VjdHNbMF0ucG9pbnQuejtcclxuXHJcbiAgICAgICAgbGV0IGxpbmVYLCBsaW5lWSwgbGluZVo7XHJcbiAgICAgICAgbGV0IGxhYmVsWCwgbGFiZWxZLCBsYWJlbFo7XHJcblxyXG4gICAgICAgIGxldCB0YUVudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcblxyXG4gICAgICAgIGxldCBsYWJlbEF0UG9pbnQgPSB0YUVudGl0aWVzLmNyZWF0ZUxhYmVsKHgsIHksIHosIFwiXCIpO1xyXG4gICAgICAgIGxhYmVsQXRQb2ludC5uYW1lID0gXCJDb29yZHNIZWxwZXJcIjtcclxuICAgICAgICBzY2VuZS5hZGQobGFiZWxBdFBvaW50KTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChpbnRlcnNlY3RzWzBdLm9iamVjdC5uYW1lKSB7XHJcbiAgICAgICAgICBjYXNlIFwibWFpblBsYW5lWllcIjpcclxuICAgICAgICAgICAgbGFiZWxBdFBvaW50LmVsZW1lbnQuaW5uZXJIVE1MID1cclxuICAgICAgICAgICAgICBcInogPSBcIiArXHJcbiAgICAgICAgICAgICAgTWF0aC5yb3VuZCh6ICogMTAwKSAvIDEwMCArXHJcbiAgICAgICAgICAgICAgXCI8YnI+eSA9IFwiICtcclxuICAgICAgICAgICAgICBNYXRoLnJvdW5kKHkgKiAxMDApIC8gMTAwO1xyXG5cclxuICAgICAgICAgICAgbGFiZWxaID0gdGFFbnRpdGllcy5jcmVhdGVMYWJlbCgwLCAwLCB6LCBcIlwiKTtcclxuICAgICAgICAgICAgbGFiZWxaLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBsYWJlbFouZWxlbWVudC5pbm5lckhUTUwgPSBcInogPSBcIiArIE1hdGgucm91bmQoeiAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsYWJlbFopO1xyXG5cclxuICAgICAgICAgICAgbGFiZWxZID0gdGFFbnRpdGllcy5jcmVhdGVMYWJlbCgwLCB5LCAwLCBcIlwiKTtcclxuICAgICAgICAgICAgbGFiZWxZLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBsYWJlbFkuZWxlbWVudC5pbm5lckhUTUwgPSBcInkgPSBcIiArIE1hdGgucm91bmQoeSAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsYWJlbFkpO1xyXG5cclxuICAgICAgICAgICAgbGluZVogPSB0YUVudGl0aWVzLmNyZWF0ZUxpbmUoeCwgeSwgeiwgeCwgMCwgeiwgXCJyZWRcIiwgXCJkYXNoZWRcIik7XHJcbiAgICAgICAgICAgIGxpbmVaLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBzY2VuZS5hZGQobGluZVopO1xyXG5cclxuICAgICAgICAgICAgbGluZVkgPSB0YUVudGl0aWVzLmNyZWF0ZUxpbmUoeCwgeSwgeiwgeCwgeSwgMCwgXCJyZWRcIiwgXCJkYXNoZWRcIik7XHJcbiAgICAgICAgICAgIGxpbmVZLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBzY2VuZS5hZGQobGluZVkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSBcIm1haW5QbGFuZVhZXCI6XHJcbiAgICAgICAgICAgIGxhYmVsQXRQb2ludC5lbGVtZW50LmlubmVySFRNTCA9XHJcbiAgICAgICAgICAgICAgXCIgeCA9IFwiICtcclxuICAgICAgICAgICAgICBNYXRoLnJvdW5kKHggKiAxMDApIC8gMTAwICtcclxuICAgICAgICAgICAgICBcIjxicj55ID0gXCIgK1xyXG4gICAgICAgICAgICAgIE1hdGgucm91bmQoeSAqIDEwMCkgLyAxMDA7XHJcblxyXG4gICAgICAgICAgICBsYWJlbFggPSB0YUVudGl0aWVzLmNyZWF0ZUxhYmVsKHgsIDAsIDAsIFwiXCIpO1xyXG4gICAgICAgICAgICBsYWJlbFgubmFtZSA9IFwiQ29vcmRzSGVscGVyXCI7XHJcbiAgICAgICAgICAgIGxhYmVsWC5lbGVtZW50LmlubmVySFRNTCA9IFwieCA9IFwiICsgTWF0aC5yb3VuZCh4ICogMTAwKSAvIDEwMDtcclxuICAgICAgICAgICAgc2NlbmUuYWRkKGxhYmVsWCk7XHJcblxyXG4gICAgICAgICAgICBsYWJlbFkgPSB0YUVudGl0aWVzLmNyZWF0ZUxhYmVsKDAsIHksIDAsIFwiXCIpO1xyXG4gICAgICAgICAgICBsYWJlbFkubmFtZSA9IFwiQ29vcmRzSGVscGVyXCI7XHJcbiAgICAgICAgICAgIGxhYmVsWS5lbGVtZW50LmlubmVySFRNTCA9IFwieSA9IFwiICsgTWF0aC5yb3VuZCh5ICogMTAwKSAvIDEwMDtcclxuICAgICAgICAgICAgc2NlbmUuYWRkKGxhYmVsWSk7XHJcblxyXG4gICAgICAgICAgICBsaW5lWCA9IHRhRW50aXRpZXMuY3JlYXRlTGluZSh4LCB5LCB6LCB4LCAwLCB6LCBcInJlZFwiLCBcImRhc2hlZFwiKTtcclxuICAgICAgICAgICAgbGluZVgubmFtZSA9IFwiQ29vcmRzSGVscGVyXCI7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsaW5lWCk7XHJcblxyXG4gICAgICAgICAgICBsaW5lWSA9IHRhRW50aXRpZXMuY3JlYXRlTGluZSh4LCB5LCB6LCAwLCB5LCB6LCBcInJlZFwiLCBcImRhc2hlZFwiKTtcclxuICAgICAgICAgICAgbGluZVkubmFtZSA9IFwiQ29vcmRzSGVscGVyXCI7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsaW5lWSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIFwibWFpblBsYW5lWFpcIjpcclxuICAgICAgICAgICAgbGFiZWxBdFBvaW50LmVsZW1lbnQuaW5uZXJIVE1MID1cclxuICAgICAgICAgICAgICBcInggPSBcIiArXHJcbiAgICAgICAgICAgICAgTWF0aC5yb3VuZCh4ICogMTAwKSAvIDEwMCArXHJcbiAgICAgICAgICAgICAgXCI8YnI+eiA9IFwiICtcclxuICAgICAgICAgICAgICBNYXRoLnJvdW5kKHogKiAxMDApIC8gMTAwO1xyXG5cclxuICAgICAgICAgICAgbGFiZWxYID0gdGFFbnRpdGllcy5jcmVhdGVMYWJlbCh4LCAwLCAwLCBcIlwiKTtcclxuICAgICAgICAgICAgbGFiZWxYLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBsYWJlbFguZWxlbWVudC5pbm5lckhUTUwgPSBcInggPSBcIiArIE1hdGgucm91bmQoeCAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsYWJlbFgpO1xyXG5cclxuICAgICAgICAgICAgbGFiZWxaID0gdGFFbnRpdGllcy5jcmVhdGVMYWJlbCgwLCAwLCB6LCBcIlwiKTtcclxuICAgICAgICAgICAgbGFiZWxaLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBsYWJlbFouZWxlbWVudC5pbm5lckhUTUwgPSBcInogPSBcIiArIE1hdGgucm91bmQoeiAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChsYWJlbFopO1xyXG5cclxuICAgICAgICAgICAgbGluZVggPSB0YUVudGl0aWVzLmNyZWF0ZUxpbmUoeCwgeSwgeiwgeCwgeSwgMCwgXCJyZWRcIiwgXCJkYXNoZWRcIik7XHJcbiAgICAgICAgICAgIGxpbmVYLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBzY2VuZS5hZGQobGluZVgpO1xyXG5cclxuICAgICAgICAgICAgbGluZVogPSB0YUVudGl0aWVzLmNyZWF0ZUxpbmUoeCwgeSwgeiwgMCwgeSwgeiwgXCJyZWRcIiwgXCJkYXNoZWRcIik7XHJcbiAgICAgICAgICAgIGxpbmVaLm5hbWUgPSBcIkNvb3Jkc0hlbHBlclwiO1xyXG4gICAgICAgICAgICBzY2VuZS5hZGQobGluZVopO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVtb3ZlQ29vcmRzSGVscGVycyA9IGZ1bmN0aW9uIChzY2VuZSkge1xyXG4gICAgICBsZXQgbGluZXNpblNjZW5lID0gc2NlbmUuY2hpbGRyZW4uZmlsdGVyKFxyXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IFwiQ29vcmRzSGVscGVyXCJcclxuICAgICAgKTtcclxuICAgICAgbGluZXNpblNjZW5lLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBzY2VuZS5yZW1vdmUoZWxlbWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICB0aGlzLlNjZW5lR3JpZHMgPSBmdW5jdGlvbiAoc2NlbmUpIHtcclxuICAgIC8vU21hbGwgZ3JpZFxyXG4gICAgdGhpcy5ncmlkSGVscGVyU21hbGwgPSBuZXcgR3JpZEhlbHBlcihcclxuICAgICAgMTAwLFxyXG4gICAgICAxMDAsXHJcbiAgICAgIG5ldyBDb2xvcihcImdyZXlcIiksXHJcbiAgICAgIG5ldyBDb2xvcihcImxpZ2h0Z3JleVwiKVxyXG4gICAgKTtcclxuICAgIHRoaXMuZ3JpZEhlbHBlclNtYWxsLnBvc2l0aW9uLnkgPSAwO1xyXG4gICAgdGhpcy5ncmlkSGVscGVyU21hbGwucG9zaXRpb24ueCA9IDA7XHJcblxyXG4gICAgLy9CaWcgZ3JpZFxyXG4gICAgdGhpcy5ncmlkSGVscGVyQmlnID0gbmV3IEdyaWRIZWxwZXIoMTAwLCAyMCwgMHgwMDAwZmYsIG5ldyBDb2xvcihcImdyZXlcIikpO1xyXG4gICAgdGhpcy5ncmlkSGVscGVyQmlnLnBvc2l0aW9uLnkgPSAwO1xyXG4gICAgdGhpcy5ncmlkSGVscGVyQmlnLnBvc2l0aW9uLnggPSAwO1xyXG5cclxuICAgIC8vcGxhbmVzIG9uIGF4aXNlc1xyXG4gICAgdGhpcy5tYWluUGxhbmVzQXJyYXkgPSBbXTtcclxuXHJcbiAgICBsZXQgbWFpblBsYW5lR2VvbSA9IG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KDIwMCwgMjAwKTtcclxuICAgIGxldCBtYWluUGxhbmVNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBuZXcgQ29sb3IoXCJsaWdodGdyZXlcIiksXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBvcGFjaXR5OiAwLjAsXHJcbiAgICAgIGFscGhhVGVzdDogMC4xLFxyXG4gICAgICBzaWRlOiBEb3VibGVTaWRlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IG1haW5QbGFuZVpZID0gbmV3IE1lc2gobWFpblBsYW5lR2VvbSwgbWFpblBsYW5lTWF0ZXJpYWwpO1xyXG5cclxuICAgIG1haW5QbGFuZVpZLm5hbWUgPSBcIm1haW5QbGFuZVhZXCI7XHJcbiAgICBzY2VuZS5hZGQobWFpblBsYW5lWlkpO1xyXG4gICAgdGhpcy5tYWluUGxhbmVzQXJyYXkucHVzaChtYWluUGxhbmVaWSk7XHJcblxyXG4gICAgbGV0IG1haW5QbGFuZVhZID0gbmV3IE1lc2gobWFpblBsYW5lR2VvbSwgbWFpblBsYW5lTWF0ZXJpYWwpO1xyXG4gICAgbWFpblBsYW5lWFkucm90YXRpb24ueSA9ICg5MCAqIE1hdGguUEkpIC8gMTgwO1xyXG4gICAgbWFpblBsYW5lWFkubmFtZSA9IFwibWFpblBsYW5lWllcIjtcclxuICAgIHNjZW5lLmFkZChtYWluUGxhbmVYWSk7XHJcbiAgICB0aGlzLm1haW5QbGFuZXNBcnJheS5wdXNoKG1haW5QbGFuZVhZKTtcclxuXHJcbiAgICBsZXQgbWFpblBsYW5lWFogPSBuZXcgTWVzaChtYWluUGxhbmVHZW9tLCBtYWluUGxhbmVNYXRlcmlhbCk7XHJcbiAgICBtYWluUGxhbmVYWi5yb3RhdGlvbi54ID0gKDkwICogTWF0aC5QSSkgLyAxODA7XHJcbiAgICBtYWluUGxhbmVYWi5uYW1lID0gXCJtYWluUGxhbmVYWlwiO1xyXG4gICAgc2NlbmUuYWRkKG1haW5QbGFuZVhaKTtcclxuICAgIHRoaXMubWFpblBsYW5lc0FycmF5LnB1c2gobWFpblBsYW5lWFopO1xyXG5cclxuICAgIGxldCB0YUVudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcbiAgICBsZXQgbGluZUF4aXhZID0gdGFFbnRpdGllcy5jcmVhdGVMaW5lKFxyXG4gICAgICAwLFxyXG4gICAgICAtMTAwLFxyXG4gICAgICAwLFxyXG4gICAgICAwLFxyXG4gICAgICAxMDAsXHJcbiAgICAgIDAsXHJcbiAgICAgIFwiYmx1ZVwiLFxyXG4gICAgICBcInNvbGlkXCJcclxuICAgICk7XHJcbiAgICBsaW5lQXhpeFkubmFtZSA9IFwiQXhpc1lcIjtcclxuICAgIHNjZW5lLmFkZChsaW5lQXhpeFkpO1xyXG5cclxuICAgIHRoaXMuaW5pdFNtYWxsR3JpZCA9IGZ1bmN0aW9uIChzY2VuZSkge1xyXG4gICAgICBpZiAoIXNjZW5lIHx8ICFzY2VuZS5pc1NjZW5lKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgXCJQYXJhbWV0ZXIgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIG9iamVjdCBvZiBUSFJFRS5TY2VuZSgpXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NlbmUuYWRkKHRoaXMuZ3JpZEhlbHBlclNtYWxsKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pbml0QmlnR3JpZCA9IGZ1bmN0aW9uIChzY2VuZSkge1xyXG4gICAgICBpZiAoIXNjZW5lIHx8ICFzY2VuZS5pc1NjZW5lKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgXCJQYXJhbWV0ZXIgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIG9iamVjdCBvZiBUSFJFRS5TY2VuZSgpXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NlbmUuYWRkKHRoaXMuZ3JpZEhlbHBlckJpZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaW5pdEFsbCA9IGZ1bmN0aW9uIChzY2VuZSkge1xyXG4gICAgICBpZiAoIXNjZW5lIHx8ICFzY2VuZS5pc1NjZW5lKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgXCJQYXJhbWV0ZXIgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIG9iamVjdCBvZiBUSFJFRS5TY2VuZSgpXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NlbmUuYWRkKHRoaXMuZ3JpZEhlbHBlclNtYWxsKTtcclxuICAgICAgc2NlbmUuYWRkKHRoaXMuZ3JpZEhlbHBlckJpZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVtb3ZlQWxsID0gZnVuY3Rpb24gKHNjZW5lKSB7XHJcbiAgICAgIGlmICghc2NlbmUgfHwgIXNjZW5lLmlzU2NlbmUpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICBcIlBhcmFtZXRlciBvZiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgb2JqZWN0IG9mIFRIUkVFLlNjZW5lKClcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzY2VuZS5yZW1vdmUodGhpcy5ncmlkSGVscGVyU21hbGwpO1xyXG4gICAgICBzY2VuZS5yZW1vdmUodGhpcy5ncmlkSGVscGVyQmlnKTtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5hZGRDYW1lcmFIZWxwZXIgPSBmdW5jdGlvbiAoc2NlbmUsIGNhbWVyYSkge1xyXG4gICAgdmFyIGhlbHBlciA9IG5ldyBDYW1lcmFIZWxwZXIoY2FtZXJhKTtcclxuICAgIHNjZW5lLmFkZChoZWxwZXIpO1xyXG4gIH07XHJcbn07XHJcbmV4cG9ydCB7IFRBX0hlbHBlcnMgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuaW1wb3J0IHtcclxuICBQZXJzcGVjdGl2ZUNhbWVyYSxcclxuICBWZWN0b3IzLFxyXG4gIExpbmUzLFxyXG59IGZyb20gXCIuLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzXCI7XHJcblxyXG5jbGFzcyBUQV9TY2VuZUNhbWVyYSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYShcclxuICAgICAgNTAsXHJcbiAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAwLjAxLFxyXG4gICAgICAxMDAwMFxyXG4gICAgKTtcclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogPSA1MDtcclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnkgPSA1MDtcclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggPSA1MDtcclxuICAgIHRoaXMuY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcclxuICB9XHJcblxyXG4gIGluaXRDYW1lcmEoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW1lcmE7XHJcbiAgfVxyXG5cclxuICBnZXRXb3JsZFNpemVPZlNjcmVlbihjYW1lcmEsIHBvaW50KSB7XHJcbiAgICBsZXQgY2FtZXJhRGlyZWN0aW9uID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihjYW1lcmFEaXJlY3Rpb24pO1xyXG4gICAgbGV0IGNhbWVyYVBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcclxuICAgIGNhbWVyYVBvc2l0aW9uID0gY2FtZXJhLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICBsZXQgZGlzdGFuY2UgPSBwb2ludC5kaXN0YW5jZVRvKGNhbWVyYVBvc2l0aW9uKTtcclxuXHJcbiAgICBjYW1lcmFQb3NpdGlvbi5hZGQoY2FtZXJhRGlyZWN0aW9uLm11bHRpcGx5U2NhbGFyKGRpc3RhbmNlKSk7XHJcblxyXG4gICAgbGV0IGxpbmUzID0gbmV3IExpbmUzKGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhUG9zaXRpb24pO1xyXG5cclxuICAgIGxldCBwb2ludE9uTGluZSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG4gICAgbGluZTMuY2xvc2VzdFBvaW50VG9Qb2ludChwb2ludCwgdHJ1ZSwgcG9pbnRPbkxpbmUpO1xyXG5cclxuICAgIGRpc3RhbmNlID0gcG9pbnRPbkxpbmUuZGlzdGFuY2VUbyhjYW1lcmEucG9zaXRpb24pO1xyXG5cclxuICAgIGxldCBhbmdsZSA9IGNhbWVyYS5mb3YgLyAyO1xyXG4gICAgbGV0IHNpemVPZlZpZXdYID0gZGlzdGFuY2UgKiBNYXRoLnRhbigoYW5nbGUgKiBNYXRoLlBJKSAvIDE4MCkgKiAyO1xyXG4gICAgbGV0IHNpemVPZlZpZXdZID0gc2l6ZU9mVmlld1ggKiBjYW1lcmEuYXNwZWN0ICogMjtcclxuXHJcbiAgICBsZXQgc2l6ZU9mVmlldyA9IHtcclxuICAgICAgaGVpZ2h0OiBzaXplT2ZWaWV3WCxcclxuICAgICAgd2lkdGg6IHNpemVPZlZpZXdZLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2l6ZU9mVmlldztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IFRBX1NjZW5lQ2FtZXJhIH07XHJcbiIsImNsYXNzIENhbGMge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Vm9sdW1lKGdlb21ldHJ5KSB7XHJcbiAgaWYgKCFnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIidnZW9tZXRyeScgbXVzdCBiZSBhbiBpbmRleGVkIG9yIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVwiKTtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBsZXQgaXNJbmRleGVkID0gZ2VvbWV0cnkuaW5kZXggIT09IG51bGw7XHJcbiAgbGV0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuICBsZXQgc3VtID0gMDtcclxuICBsZXQgcDEgPSBuZXcgVmVjdG9yMygpLFxyXG4gICAgcDIgPSBuZXcgVmVjdG9yMygpLFxyXG4gICAgcDMgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuICBpZiAoIWlzSW5kZXhlZCkge1xyXG4gICAgbGV0IGZhY2VzID0gcG9zaXRpb24uY291bnQgLyAzO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZXM7IGkrKykge1xyXG4gICAgICBwMS5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpICogMyArIDApO1xyXG4gICAgICBwMi5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpICogMyArIDEpO1xyXG4gICAgICBwMy5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpICogMyArIDIpO1xyXG5cclxuICAgICAgc3VtICs9IHNpZ25lZFZvbHVtZU9mVHJpYW5nbGUocDEsIHAyLCBwMyk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGxldCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xyXG4gICAgbGV0IGZhY2VzID0gaW5kZXguY291bnQgLyAzO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZXM7IGkrKykge1xyXG4gICAgICBwMS5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpbmRleC5hcnJheVtpICogMyArIDBdKTtcclxuICAgICAgcDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbiwgaW5kZXguYXJyYXlbaSAqIDMgKyAxXSk7XHJcbiAgICAgIHAzLmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGluZGV4LmFycmF5W2kgKiAzICsgMl0pO1xyXG5cclxuICAgICAgc3VtICs9IHNpZ25lZFZvbHVtZU9mVHJpYW5nbGUocDEsIHAyLCBwMyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3VtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaWduZWRWb2x1bWVPZlRyaWFuZ2xlKHAxLCBwMiwgcDMpIHtcclxuICByZXR1cm4gcDEuZG90KHAyLmNyb3NzKHAzKSkgLyA2LjA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRCYXJ5Q2VudGVyKHBvaW50cykge1xyXG4gIGlmICghQXJyYXkuaXNBcnJheShwb2ludHMpKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgbGV0IHBvaW50c0NvdW50ID0gcG9pbnRzLmxlbmd0aDtcclxuXHJcbiAgbGV0IHJlc3VsdFZlY3RvciA9IHBvaW50cy5yZWR1Y2UoKHN1bSwgY3VycmVudCkgPT4gc3VtLmFkZChjdXJyZW50KSk7XHJcbiAgbGV0IGJhcnlDZW50ZXIgPSByZXN1bHRWZWN0b3IuZGl2aWRlU2NhbGFyKHBvaW50c0NvdW50KTtcclxuXHJcbiAgcmV0dXJuIGJhcnlDZW50ZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGdldFZvbHVtZSwgZmluZEJhcnlDZW50ZXIgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgU2NlbmUsXHJcbiAgV2ViR0xSZW5kZXJlcixcclxuICBSYXljYXN0ZXIsXHJcbiAgUGVyc3BlY3RpdmVDYW1lcmEsXHJcbiAgR3JvdXAsXHJcbiAgQ29sb3IsXHJcbiAgVmVjdG9yMixcclxuICAvLyBWZWN0b3IzLFxyXG4gIC8vIFNwaGVyZUJ1ZmZlckdlb21ldHJ5LFxyXG4gIC8vIExpbmVDdXJ2ZTMsXHJcbiAgLy8gTGluZSxcclxuICAvLyBCdWZmZXJHZW9tZXRyeSxcclxuICAvLyBMaW5lQmFzaWNNYXRlcmlhbCxcclxuICBNZXNoTWF0Y2FwTWF0ZXJpYWwsXHJcbiAgTWVzaCxcclxuICAvLyBNZXNoQmFzaWNNYXRlcmlhbCxcclxuICBNZXNoUGhvbmdNYXRlcmlhbCxcclxuICBCb3hCdWZmZXJHZW9tZXRyeSxcclxuICAvLyBEb3VibGVTaWRlLFxyXG4gIC8vIEJ1ZmZlckF0dHJpYnV0ZSxcclxuICAvLyBNYXRlcmlhbCxcclxuICAvLyBUZXh0dXJlLFxyXG4gIFRleHR1cmVMb2FkZXIsXHJcbiAgLy8gc1JHQkVuY29kaW5nLFxyXG59IGZyb20gXCIuLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBDU1MyRFJlbmRlcmVyIH0gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vcmVuZGVyZXJzL0NTUzJEUmVuZGVyZXIuanNcIjtcclxuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCIuLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMuanNcIjtcclxuaW1wb3J0IHsgVHJhbnNmb3JtQ29udHJvbHMgfSBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9UcmFuc2Zvcm1Db250cm9scy5qc1wiO1xyXG5cclxuLy9pZiB5b3Ugd2FudCB0byB1c2UgdGhpcyBzZWUgYnVnIGZpeCBpbiBBY3Rpb24uanMgKGZ1bmN0aW9uIHN3aXRjaERyYWdNb2RlKVxyXG4vLyBpbXBvcnQgeyBEcmFnQ29udHJvbHMgfSBmcm9tICcuLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL0RyYWdDb250cm9scy5qcyc7XHJcbmltcG9ydCB7IERyYWdDb250cm9scyB9IGZyb20gXCIuL0RyYWdDb250cm9scy5qc1wiO1xyXG5cclxuaW1wb3J0IHsgVEFfRW50aXRpZXMgfSBmcm9tIFwiLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TY2VuZUxpZ2h0cyB9IGZyb20gXCIuL1RBX1NjZW5lTGlnaHRzLmpzXCI7XHJcbmltcG9ydCB7IFRBX0hlbHBlcnMgfSBmcm9tIFwiLi9UQV9IZWxwZXJzLmpzXCI7XHJcbmltcG9ydCB7IFRBX1NjZW5lQ2FtZXJhIH0gZnJvbSBcIi4vVEFfU2NlbmVDYW1lcmEuanNcIjtcclxuaW1wb3J0ICogYXMgQWN0aW9ucyBmcm9tIFwiLi9BY3Rpb25zLmpzXCI7XHJcbi8vIGltcG9ydCB7IE1lc2hFZGl0IH0gZnJvbSBcIi4vTWVzaEVkaXQuanNcIjtcclxuaW1wb3J0IHsgZmluZEJhcnlDZW50ZXIgfSBmcm9tIFwiLi9DYWxjdWxhdGlvbnMuanNcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi9UQV9TdGF0ZS5qc1wiO1xyXG5cclxuLy8gaW1wb3J0ICogYXMgQ3VzdG9tR2VvbWV0cnkgZnJvbSBcIi4vRW50aXRpZXMvQ3VzdG9tR2VvbWV0cnkuanNcIjtcclxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiLi9FdmVudEVtaXR0ZXIuanNcIjtcclxuXHJcbmNsYXNzIFRBX1NjZW5lIHtcclxuICBjb25zdHJ1Y3Rvcih0YV9VSSkge1xyXG4gICAgLy8gc2luZ2xldG9uXHJcbiAgICBpZiAoVEFfU2NlbmUuZXhpc3QpIHtcclxuICAgICAgcmV0dXJuIFRBX1NjZW5lLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgVEFfU2NlbmUuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgVEFfU2NlbmUuZXhpc3QgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMudGFfVUkgPSB0YV9VSTtcclxuICAgIHRoaXMuc2NlbmU7XHJcbiAgICB0aGlzLm1vdXNlUG9zaXRpb24gPSB7IHg6IG51bGwsIHk6IG51bGwgfTtcclxuXHJcbiAgICB0aGlzLm1vZGUgPSB7XHJcbiAgICAgIGFjdGlvbjogXCJzZWxlY3RcIixcclxuICAgICAgZW50aXR5OiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnRhX1N0YXRlID0gbmV3IFRBX1N0YXRlKCk7XHJcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICB0aGlzLm1lc2hFZGl0T2JqZWN0ID0ge307XHJcblxyXG4gICAgdGhpcy5zZWxlY3RhYmxlT2JqZWN0cyA9IFtdO1xyXG4gICAgdGhpcy50ZW1wU2VsZWN0YWJsZU9iamVjdHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSB7XHJcbiAgICAgIG9iamVjdDogbnVsbCxcclxuICAgICAgb2JqZWN0T3duQ29sb3I6IG51bGwsXHJcbiAgICAgIG11bHRpc2VsZWN0aW9uOiBuZXcgR3JvdXAoKSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1Db250cm9sc01vZGUgPSBcIlwiO1xyXG4gICAgLy8gbGV0IG9iamVjdE93bkNvbG9yO1xyXG4gICAgdGhpcy50cmFuc2Zvcm1Db250cm9sc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgIHRoaXMub3JiaXRDb250cm9sc0NoYW5nZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGdldCBnZXRTY2VuZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnNjZW5lO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlU2NlbmUoKSB7XHJcbiAgICBsZXQgc2NvcGUgPSB0aGlzO1xyXG5cclxuICAgIGxldCBzY2VuZSA9IG5ldyBTY2VuZSgpO1xyXG4gICAgbGV0IHJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XHJcbiAgICBsZXQgcmVuZGVyZXIyID0gbmV3IFdlYkdMUmVuZGVyZXIoKTtcclxuICAgIGNvbnN0IHJheWNhc3RlciA9IG5ldyBSYXljYXN0ZXIoKTtcclxuXHJcbiAgICBsZXQgc2NlbmVDYW1lcmEgPSBuZXcgVEFfU2NlbmVDYW1lcmEoKTtcclxuICAgIGxldCBzY2VuZUNhbWVyYTIgPSBuZXcgVEFfU2NlbmVDYW1lcmEoKTtcclxuXHJcbiAgICBsZXQgbGFiZWxSZW5kZXJlciA9IG5ldyBDU1MyRFJlbmRlcmVyKCk7XHJcbiAgICBsZXQgdGFfRW50aXRpZXMgPSBuZXcgVEFfRW50aXRpZXMoKTtcclxuICAgIGxldCBjcmVhdGluZ0VudGl0eSA9IG5ldyB0YV9FbnRpdGllcy5DcmVhdGluZ0VudGl0eSgpO1xyXG5cclxuICAgIGNvbnN0IHNjZW5lTGlnaHRzID0gbmV3IFRBX1NjZW5lTGlnaHRzKCk7XHJcbiAgICBsZXQgY2FtZXJhID0gc2NlbmVDYW1lcmEuaW5pdENhbWVyYSgpO1xyXG4gICAgbGV0IGNhbWVyYTIgPSBzY2VuZUNhbWVyYTIuaW5pdENhbWVyYSgpO1xyXG4gICAgY2FtZXJhMiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYShcclxuICAgICAgNTAsXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpLmNsaWVudFdpZHRoIC9cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlY29uZENhbnZhc1wiKS5jbGllbnRIZWlnaHQsXHJcbiAgICAgIDAuMDEsXHJcbiAgICAgIDEwMDAwXHJcbiAgICApO1xyXG4gICAgY2FtZXJhMi5wb3NpdGlvbi56ID0gMDtcclxuICAgIGNhbWVyYTIucG9zaXRpb24ueSA9IDQuNjtcclxuICAgIGNhbWVyYTIucG9zaXRpb24ueCA9IDA7XHJcbiAgICBjYW1lcmEyLmxvb2tBdCgwLCAwLCAwKTtcclxuICAgIGNvbnN0IHRhX3NIZWxwZXJzID0gbmV3IFRBX0hlbHBlcnMoKTtcclxuICAgIC8vIGNvbnN0IGNvb3Jkc0hlbHBlcnMgPSBuZXcgdGFfc0hlbHBlcnMuY29vcmRzSGVscGVycygpO1xyXG4gICAgY29uc3Qgc2NlbmVHcmlkID0gbmV3IHRhX3NIZWxwZXJzLlNjZW5lR3JpZHMoc2NlbmUpO1xyXG5cclxuICAgIHNjZW5lLmFkZCh0aGlzLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24pO1xyXG5cclxuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgQ29sb3IoXCJ3aGl0ZVwiKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICByZW5kZXJlcjIuc2V0U2l6ZShcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWNvbmRDYW52YXNcIikuY2xpZW50V2lkdGgsXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpLmNsaWVudEhlaWdodFxyXG4gICAgKTtcclxuICAgIGxhYmVsUmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgIGxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgIGxhYmVsUmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS50b3AgPSAwO1xyXG4gICAgbGFiZWxSZW5kZXJlci5kb21FbGVtZW50LmlkID0gXCJsYWJlbFJlbmRlcmVyXCI7XHJcblxyXG4gICAgc2NlbmVMaWdodHMuaW5pdEFsbChzY2VuZSk7XHJcbiAgICBzY2VuZUdyaWQuaW5pdEJpZ0dyaWQoc2NlbmUpO1xyXG4gICAgLy8gc2NlbmVHcmlkLmluaXRTbWFsbEdyaWQoc2NlbmUpO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWNvbmRDYW52YXNcIikuYXBwZW5kQ2hpbGQocmVuZGVyZXIyLmRvbUVsZW1lbnQpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsYWJlbFJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMub3JiaXRDb250cm9scyA9IG5ldyBPcmJpdENvbnRyb2xzKGNhbWVyYSwgbGFiZWxSZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgIHRoaXMudHJhbnNmb3JtQ29udHJvbHMgPSBuZXcgVHJhbnNmb3JtQ29udHJvbHMoXHJcbiAgICAgIGNhbWVyYSxcclxuICAgICAgbGFiZWxSZW5kZXJlci5kb21FbGVtZW50XHJcbiAgICApO1xyXG4gICAgc2NlbmUuYWRkKHRoaXMudHJhbnNmb3JtQ29udHJvbHMpO1xyXG4gICAgdGhpcy50cmFuc2Zvcm1Db250cm9scy5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHJlbmRlcik7XHJcbiAgICB0aGlzLnRyYW5zZm9ybUNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge30pO1xyXG5cclxuICAgIHRoaXMub3JiaXRDb250cm9scy5hZGRFdmVudExpc3RlbmVyKFwic3RhcnRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkRvY3VtZW50TW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdvcmJpdENvbnRyb2xzIHN0YXJ0Jyk7XHJcbiAgICAgIC8vXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLm9yYml0Q29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdvcmJpdENvbnRyb2xzIGNoYW5nZScpO1xyXG5cclxuICAgICAgc2NvcGUub3JiaXRDb250cm9sc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAvLyBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkRvY3VtZW50TW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyB0aGlzLm9yYml0Q29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcihcImVuZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25Eb2N1bWVudE1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgLy8gfSk7XHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1Db250cm9scy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VEb3duXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uRG9jdW1lbnRNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzQ2hhbmdlZCA9IHRydWU7XHJcblxyXG4gICAgICBpZiAoc2NvcGUudGFfU3RhdGUuYXBwTW9kZS5tZXNoRWRpdCkge1xyXG4gICAgICAgIHNjb3BlLm1lc2hFZGl0T2JqZWN0Lm1lc2gucmVtb3ZlKFxyXG4gICAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QubWVzaC5nZXRPYmplY3RCeU5hbWUoXCJGYWNlSGlnaGxpZ2h0XCIpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QuZmFjZUhpZ2hsaWdodGluZyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRyYW5zZm9ybUNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZVVwXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3RyYW5zZm9ybUNvbnRyb2xzIG1vdXNlVXAnKTtcclxuXHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkRvY3VtZW50TW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9sc0NoYW5nZWQgPSB0cnVlO1xyXG5cclxuICAgICAgaWYgKHNjb3BlLnRhX1N0YXRlLmFwcE1vZGUubWVzaEVkaXQpIHtcclxuICAgICAgICBzY29wZS5tZXNoRWRpdE9iamVjdC5mYWNlSGlnaGxpZ2h0aW5nID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1Db250cm9scy5hZGRFdmVudExpc3RlbmVyKFwib2JqZWN0Q2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb25Eb2N1bWVudE1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgLy8gc2NvcGUudHJhbnNmb3JtQ29udHJvbHNDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmIChldmVudC50YXJnZXQubW9kZSA9PT0gXCJ0cmFuc2xhdGVcIikge1xyXG4gICAgICAgIGlmIChzY29wZS50YV9TdGF0ZS5hcHBNb2RlLm1lc2hFZGl0KSB7XHJcbiAgICAgICAgICBsZXQgZWRpdEhlbHBlciA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICAgICAgICBzY29wZS5tZXNoRWRpdE9iamVjdC50cmFuc2Zvcm1NZXNoKGVkaXRIZWxwZXIpO1xyXG5cclxuICAgICAgICAgIC8vIHNjb3BlLnRhX1VJLmRlbGV0ZUdlb21ldHJ5UGFyYW1ldGVyc1RhYigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g0KHQlNCV0JvQkNCi0Kwg0J7QkdCd0J7QktCb0JXQndCY0JUg0J/QntCb0JXQmSDQn9CQ0KDQkNCc0JXQotCg0J7QklxyXG5cclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm9iamVjdC50eXBlID09PSBcIkdyb3VwXCIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGV2ZW50LnRhcmdldC53b3JsZFBvc2l0aW9uU3RhcnQueCAhPT0gZXZlbnQudGFyZ2V0LndvcmxkUG9zaXRpb24ueFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uX3gnKS52YWx1ZSA9IGV2ZW50LnRhcmdldC5vYmplY3QucG9zaXRpb24ueDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGV2ZW50LnRhcmdldC53b3JsZFBvc2l0aW9uU3RhcnQueSAhPT0gZXZlbnQudGFyZ2V0LndvcmxkUG9zaXRpb24ueVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uX3knKS52YWx1ZSA9IGV2ZW50LnRhcmdldC5vYmplY3QucG9zaXRpb24ueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGV2ZW50LnRhcmdldC53b3JsZFBvc2l0aW9uU3RhcnQueiAhPT0gZXZlbnQudGFyZ2V0LndvcmxkUG9zaXRpb24uelxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uX3onKS52YWx1ZSA9IGV2ZW50LnRhcmdldC5vYmplY3QucG9zaXRpb24uejtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMudHJhbnNmb3JtQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgXCJkcmFnZ2luZy1jaGFuZ2VkXCIsXHJcbiAgICAgIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHNjb3BlLm9yYml0Q29udHJvbHMuZW5hYmxlZCA9ICFldmVudC52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmRyYWdDb250cm9scyA9IG5ldyBEcmFnQ29udHJvbHMoXHJcbiAgICAgIHRoaXMuc2VsZWN0YWJsZU9iamVjdHMsXHJcbiAgICAgIGNhbWVyYSxcclxuICAgICAgbGFiZWxSZW5kZXJlci5kb21FbGVtZW50XHJcbiAgICApO1xyXG4gICAgdGhpcy5kcmFnQ29udHJvbHMuZGVhY3RpdmF0ZSgpO1xyXG4gICAgLy8gdGhpcy5kcmFnQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lciggJ2RyYWcnLCByZW5kZXIgKTtcclxuXHJcbiAgICB0aGlzLmRyYWdDb250cm9scy5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIHNjb3BlLnRhX1VJLmNyZWF0ZVBhcmFtZXRlcnNNZW51KCBldmVudC5vYmplY3QgKTtcclxuICAgICAgLy8gc2NvcGUudHJhbnNmb3JtQ29udHJvbHMuZGV0YWNoKCBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uICk7XHJcblxyXG4gICAgICBzY29wZS5vcmJpdENvbnRyb2xzLmVuYWJsZVJvdGF0ZSA9IGZhbHNlO1xyXG4gICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5lbmFibGVkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZHJhZ0NvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgc2NvcGUub3JiaXRDb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5lbmFibGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGluZm9EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluZm9QYXJhZ3JhcGhcIik7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkRvY3VtZW50TW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbkRvY3VtZW50TW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG9uRG9jdW1lbnRNb3VzZURvd24sIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG9uRG9jdW1lbnRNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBvbktleURvd24sIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uVG91Y2hFbmQsIGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Ub3VjaE1vdmUsIGZhbHNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcclxuICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgICBjYW1lcmEyLmFzcGVjdCA9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWNvbmRDYW52YXNcIikuY2xpZW50V2lkdGggL1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpLmNsaWVudEhlaWdodDtcclxuICAgICAgY2FtZXJhMi51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICAgIHJlbmRlcmVyMi5zZXRTaXplKFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpLmNsaWVudFdpZHRoLFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpLmNsaWVudEhlaWdodFxyXG4gICAgICApO1xyXG4gICAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICBsYWJlbFJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlU21hbGxXaW5kb3coKSB7XHJcbiAgICAgIGxldCBzZWNvbmRDYW52YXNXaWR0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2Vjb25kQ2FudmFzXCIpXHJcbiAgICAgICAgLmNsaWVudFdpZHRoO1xyXG4gICAgICBsZXQgc2Vjb25kQ2FudmFzSGVpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWNvbmRDYW52YXNcIilcclxuICAgICAgICAuY2xpZW50SGVpZ2h0O1xyXG4gICAgICBjYW1lcmEyLmFzcGVjdCA9IHNlY29uZENhbnZhc1dpZHRoIC8gc2Vjb25kQ2FudmFzSGVpZ2h0O1xyXG4gICAgICBjYW1lcmEyLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICAgICAgcmVuZGVyZXIyLnNldFNpemUoc2Vjb25kQ2FudmFzV2lkdGgsIHNlY29uZENhbnZhc0hlaWdodCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNpemVTZWNvbmRDYW52YXMoKSB7XHJcbiAgICAgIGxldCBzZWNvbmRDYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlY29uZENhbnZhc1wiKTtcclxuICAgICAgaWYgKHNlY29uZENhbnZhcy5zdHlsZS53aWR0aCA9PT0gXCIyMDBweFwiKSB7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArIFwicHhcIjtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHNlY29uZENhbnZhcy5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUudG9wID0gXCIwcHhcIjtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aDtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHVwZGF0ZVNtYWxsV2luZG93KCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSBcIjIwMHB4XCI7XHJcbiAgICAgICAgc2Vjb25kQ2FudmFzLnN0eWxlLmxlZnQgPSBcIlwiO1xyXG4gICAgICAgIHNlY29uZENhbnZhcy5zdHlsZS5yaWdodCA9IFwiMzBweFwiO1xyXG4gICAgICAgIHNlY29uZENhbnZhcy5zdHlsZS50b3AgPSBcIjMwcHhcIjtcclxuICAgICAgICBzZWNvbmRDYW52YXMuc3R5bGUud2lkdGggPSBzaXplO1xyXG4gICAgICAgIHNlY29uZENhbnZhcy5zdHlsZS5oZWlnaHQgPSBzaXplO1xyXG4gICAgICAgIHNlY29uZENhbnZhcy5zdHlsZS53aWR0aCA9IHNpemU7XHJcbiAgICAgICAgc2Vjb25kQ2FudmFzLnN0eWxlLmhlaWdodCA9IHNpemU7XHJcbiAgICAgICAgdXBkYXRlU21hbGxXaW5kb3coKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIC0tLS0tLS0tLS1URVNULS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAvLyBsZXQgdGVzdEN5bGluZGVyID0gdGFfRW50aXRpZXMuY3JlYXRlQ3lsaW5kZXIoMCwwLDAsMC4yLDAuMiwzMCwxMCwxKTtcclxuICAgIC8vIHRlc3RDeWxpbmRlci5tYXRlcmlhbC5jb2xvciA9IG5ldyBDb2xvcigncmVkJyk7XHJcbiAgICAvLyB0ZXN0Q3lsaW5kZXIubmFtZSA9ICd0ZXN0Q3lsaW5kZXInO1xyXG4gICAgLy8gc2NlbmUuYWRkKCB0ZXN0Q3lsaW5kZXIgKTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gbGV0IHRlc3RCdWZmZXIgPSBDdXN0b21HZW9tZXRyeS5jcmVhdGVDdXN0b21HZW9tZXRyeSgpO1xyXG4gICAgLy8gc2NlbmUuYWRkKCB0ZXN0QnVmZmVyICk7XHJcbiAgICAvLyB0aGlzLnNlbGVjdGFibGVPYmplY3RzLnB1c2goIHRlc3RCdWZmZXIgKTtcclxuXHJcbiAgICAvLyBsZXQgc3BoZXJlR2VvbWV0cnkgPSBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoMC41LCA0LCA0KTtcclxuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBNZXNoUGhvbmdNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBuZXcgQ29sb3IoXCJncmVlblwiKSxcclxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICB9KTtcclxuICAgIC8vIGxldCB0ZXh0dXJlID0gbmV3IFRleHR1cmVMb2FkZXIoKS5sb2FkKCBcIl9SZXNvdXJjZXMvTWF0Y2Ficy9UZXN0L0ZCQjgyRF9GQkVEQkZfRkJERTdEX0ZCN0UwNS02NHB4LnBuZ1wiICk7XHJcbiAgICAvLyB0ZXh0dXJlLmVuY29kaW5nID0gc1JHQkVuY29kaW5nO1xyXG4gICAgLy8gbGV0IG1hdGVyaWFsID0gIG5ldyBNZXNoTWF0Y2FwTWF0ZXJpYWwoIHsgbWF0Y2FwOiB0ZXh0dXJlIH0pO1xyXG5cclxuICAgIC8vIGxldCBzcGhlcmUgPSBuZXcgTWVzaCggc3BoZXJlR2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIC8vIHNjZW5lLmFkZCggc3BoZXJlICk7XHJcblxyXG4gICAgLy8gbGV0IHNwaGVyZUdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KDIwLCAzMCwgMzAgKTtcclxuICAgIC8vIGxldCB0ZXN0U3BoZXJlID0gbmV3IE1lc2goIHNwaGVyZUdlb21ldHJ5LCBtYXRlcmlhbCApO1xyXG4gICAgLy8gc2NlbmUuYWRkKCB0ZXN0U3BoZXJlICk7XHJcbiAgICAvLyB0aGlzLnNlbGVjdGFibGVPYmplY3RzLnB1c2goIHRlc3RTcGhlcmUgKTtcclxuICAgIC8vIHRlc3RTcGhlcmUucG9zaXRpb24uc2V0KCAyNSwgMCwgMCApO1xyXG5cclxuICAgIGxldCBjdWJlR2VvbWV0cnkgPSBuZXcgQm94QnVmZmVyR2VvbWV0cnkoMTAsIDEwLCAxMCk7XHJcbiAgICBsZXQgbWVzaCA9IG5ldyBNZXNoKGN1YmVHZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgc2NlbmUuYWRkKG1lc2gpO1xyXG4gICAgbWVzaC5wb3NpdGlvbi5zZXQoMCwgMCwgNyk7XHJcbiAgICBtZXNoLm5hbWUgPSBcIlRlc3RDdWJlXCI7XHJcbiAgICB0aGlzLnNlbGVjdGFibGVPYmplY3RzLnB1c2gobWVzaCk7XHJcblxyXG4gICAgLy8gbGV0IGxpbmVNYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogJ3JlZCcgfSApO1xyXG5cclxuICAgIC8vIGxldCB2ZWMwID0gbmV3IFZlY3RvcjMoIDAsIDAsIDAgKTtcclxuXHJcbiAgICAvLyBsZXQgdmVjMSA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxMCApO1xyXG4gICAgLy8gbGV0IHZlYzIgPSBuZXcgVmVjdG9yMyggMCwgMCwgMTAgKTtcclxuICAgIC8vIGxldCB2ZWMzID0gbmV3IFZlY3RvcjMoIDAsIDEwLCAwICk7XHJcblxyXG4gICAgLy8gbGV0IHBvaW50czEgPSBbIHZlYzAsIHZlYzIgXTtcclxuICAgIC8vIGxldCBwb2ludHMyID0gWyB2ZWMwLCB2ZWMxIF07XHJcbiAgICAvLyBsZXQgcG9pbnRzMyA9IFsgdmVjMCwgdmVjMyBdO1xyXG5cclxuICAgIC8vIGxldCBsaW5lR2VvbWV0cnkxID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzMSApO1xyXG4gICAgLy8gbGV0IGxpbmVHZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMyICk7XHJcbiAgICAvLyBsZXQgbGluZUdlb21ldHJ5MyA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50czMgKTtcclxuXHJcbiAgICAvLyBsZXQgbGluZTEgPSBuZXcgTGluZSggbGluZUdlb21ldHJ5MSwgbGluZU1hdGVyaWFsICk7XHJcbiAgICAvLyBsZXQgbGluZTIgPSBuZXcgTGluZSggbGluZUdlb21ldHJ5MiwgbGluZU1hdGVyaWFsICk7XHJcbiAgICAvLyBsZXQgbGluZTMgPSBuZXcgTGluZSggbGluZUdlb21ldHJ5MywgbGluZU1hdGVyaWFsICk7XHJcblxyXG4gICAgLy8gc2NlbmUuYWRkKCBsaW5lMSApO1xyXG4gICAgLy8gc2NlbmUuYWRkKCBsaW5lMiApO1xyXG4gICAgLy8gc2NlbmUuYWRkKCBsaW5lMyApO1xyXG5cclxuICAgIC8vIGxldCBjcm9zcyA9IHZlYzMuY3Jvc3MoIHZlYzIgKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCBjcm9zcyApO1xyXG5cclxuICAgIC8vIGxldCBwb2ludHNDcm9zcyA9IFsgdmVjMCwgY3Jvc3MgXTtcclxuICAgIC8vIGxldCBsaW5lR2VvbWV0cnlDcm9zcyA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50c0Nyb3NzICk7XHJcbiAgICAvLyBsZXQgbGluZUNyb3NzID0gbmV3IExpbmUoIGxpbmVHZW9tZXRyeUNyb3NzLCBsaW5lTWF0ZXJpYWwgKTtcclxuICAgIC8vIHNjZW5lLmFkZCggbGluZUNyb3NzICk7XHJcblxyXG4gICAgLy8gbGV0IGRvdCA9IHZlYzEuZG90KCBjcm9zcyApO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCBgZG90ID0gJHtkb3R9YCApXHJcbiAgICAvLyBjb25zb2xlLmxvZyggYHZvbHVtZSA9ICR7ZG90LzYuMH1gIClcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlQ2xpY2soZXZlbnQpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coc2NvcGUub3JiaXRDb250cm9sc0NoYW5nZWQpO1xyXG4gICAgICAvLyBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgLy8gZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgIGlmIChzY29wZS5vcmJpdENvbnRyb2xzQ2hhbmdlZCkge1xyXG4gICAgICAgIHNjb3BlLm9yYml0Q29udHJvbHNDaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50ICYmXHJcbiAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuaWQgPT09IFwic2Vjb25kQ2FudmFzXCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmVzaXplU2Vjb25kQ2FudmFzKCk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGV2ZW50LnRhcmdldC5pZCA9PT0gXCJsYWJlbFJlbmRlcmVyXCIpIHtcclxuICAgICAgICBsZXQgc2NyZWVuUG9pbnQgPSBnZXRTY3JlZW5Qb2ludChldmVudCk7XHJcblxyXG4gICAgICAgIHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHNjcmVlblBvaW50LCBjYW1lcmEpO1xyXG5cclxuICAgICAgICBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lR3JpZC5tYWluUGxhbmVzQXJyYXkpO1xyXG5cclxuICAgICAgICBpZiAoc2NvcGUubW9kZS5hY3Rpb24gPT09IFwiY3JlYXRpb25FbnRpdHlcIikge1xyXG4gICAgICAgICAgc2NvcGUucmV0dXJuT2JqZWN0c1RvU2NlbmUoKTtcclxuICAgICAgICAgIHNjb3BlLnJlc2V0TXVsdHlzZWxlY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICBpZiAoY3JlYXRpbmdFbnRpdHkuY2VudGVyT2ZPYmplY3RXb3JsZCkge1xyXG4gICAgICAgICAgICB0YV9FbnRpdGllcy5zZWxlY3RFbnRpdHkoXHJcbiAgICAgICAgICAgICAgY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSxcclxuICAgICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHNjb3BlLnRhX1VJLmVsZW1lbnRzLm1lc2hFZGl0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSkge1xyXG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGFibGVPYmplY3RzLnB1c2goY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0aW5nRW50aXR5LnN0b3BDcmVhdGluZygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzLnNldE1vZGUoc2NvcGUudHJhbnNmb3JtQ29udHJvbHNNb2RlKTtcclxuICAgICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpIHtcclxuICAgICAgICAgICAgdGFfRW50aXRpZXMucmVtb3ZlU2VsZWN0aW9uKHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCA9IG51bGw7XHJcbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0T3duQ29sb3IgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNyZWF0aW5nRW50aXR5LmNlbnRlck9mT2JqZWN0V29ybGQgPSBpbnRlcnNlY3RzWzBdLnBvaW50O1xyXG4gICAgICAgICAgY3JlYXRpbmdFbnRpdHkuY3JlYXRlRW50aXR5KHNjb3BlLm1vZGUsIHNjZW5lLCBldmVudCwgc2NlbmVDYW1lcmEpO1xyXG4gICAgICAgICAgc2NvcGUudGFfVUkuY3JlYXRlUGFyYW1ldGVyc01lbnUoY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2NvcGUudGFfU3RhdGUuYXBwTW9kZS5tZXNoRWRpdCkge1xyXG4gICAgICAgICAgbGV0IHNjcmVlblBvaW50ID0gZ2V0U2NyZWVuUG9pbnQoZXZlbnQpO1xyXG5cclxuICAgICAgICAgIHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHNjcmVlblBvaW50LCBjYW1lcmEpO1xyXG5cclxuICAgICAgICAgIGlmIChzY29wZS5tZXNoRWRpdE9iamVjdC5tb2RlID09PSBcIkZhY2VzXCIpIHtcclxuICAgICAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QubWVzaC5yZW1vdmUoXHJcbiAgICAgICAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QubWVzaC5nZXRPYmplY3RCeU5hbWUoXCJGYWNlSGlnaGxpZ2h0XCIpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3QoXHJcbiAgICAgICAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QubWVzaFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIGxldCBvYmplY3RUb1NlbGVjdCA9IGludGVyc2VjdHNbMF0ub2JqZWN0O1xyXG5cclxuICAgICAgICAgICAgICBvYmplY3RUb1NlbGVjdC5yZW1vdmUoXHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RzWzBdLm9iamVjdC5nZXRPYmplY3RCeU5hbWUoXCJGYWNlSGlnaGxpZ2h0XCIpXHJcbiAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QuYWRkVHJpYW5nbGUoaW50ZXJzZWN0cyk7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBzcGhlcmUgPSBzY29wZS5tZXNoRWRpdE9iamVjdC5tZXNoLmdldE9iamVjdEJ5TmFtZShcclxuICAgICAgICAgICAgICAgIFwiU3BoZXJlRmFjZV9cIlxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSA9IFwidHJhbnNsYXRlXCI7XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaChzcGhlcmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNjb3BlLm1lc2hFZGl0T2JqZWN0Lm1vZGUgPT09IFwiVmVydGljZXNcIikge1xyXG4gICAgICAgICAgICBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKFxyXG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdGFibGVPYmplY3RzXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgbGV0IG9iamVjdFRvU2VsZWN0ID0gaW50ZXJzZWN0c1swXS5vYmplY3Q7XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSA9IFwidHJhbnNsYXRlXCI7XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaChvYmplY3RUb1NlbGVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmICggc2NvcGUudHJhbnNmb3JtQ29udHJvbHNDaGFuZ2VkICkge1xyXG5cclxuICAgICAgc2NvcGUudHJhbnNmb3JtQ29udHJvbHNDaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAvLyB9IGVsc2Uge1xyXG5cclxuICAgICAgLy8gXHRzY29wZS5yZXR1cm5PYmplY3RzVG9TY2VuZSgpO1xyXG4gICAgICAvLyBcdHNjb3BlLnJlc2V0TXVsdHlzZWxlY3Rpb24oKTtcclxuICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlbGVjdEJ5TW91c2UoZXZlbnQpIHtcclxuICAgICAgbGV0IHNjcmVlblBvaW50ID0gZ2V0U2NyZWVuUG9pbnQoZXZlbnQpO1xyXG5cclxuICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoc2NyZWVuUG9pbnQsIGNhbWVyYSk7XHJcblxyXG4gICAgICBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjb3BlLnNlbGVjdGFibGVPYmplY3RzKTtcclxuXHJcbiAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBsZXQgb2JqZWN0VG9TZWxlY3QgPSBpbnRlcnNlY3RzWzBdLm9iamVjdDtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcclxuICAgICAgICAgIGlmIChzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgICAgICAgICB0YV9FbnRpdGllcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveChcclxuICAgICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmF0dGFjaChcclxuICAgICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbGV0IGFycmF5T2JqZWN0c0luU2VsZWN0aW9uID0gW107XHJcblxyXG4gICAgICAgICAgYXJyYXlPYmplY3RzSW5TZWxlY3Rpb24gPSBhcnJheU9iamVjdHNJblNlbGVjdGlvbi5jb25jYXQoXHJcbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uY2hpbGRyZW5cclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgaWYgKGFycmF5T2JqZWN0c0luU2VsZWN0aW9uLmluY2x1ZGVzKG9iamVjdFRvU2VsZWN0KSkge1xyXG4gICAgICAgICAgICB0YV9FbnRpdGllcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveChvYmplY3RUb1NlbGVjdCk7XHJcblxyXG4gICAgICAgICAgICBhcnJheU9iamVjdHNJblNlbGVjdGlvbi5zcGxpY2UoXHJcbiAgICAgICAgICAgICAgYXJyYXlPYmplY3RzSW5TZWxlY3Rpb24uaW5kZXhPZihvYmplY3RUb1NlbGVjdCksXHJcbiAgICAgICAgICAgICAgMVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXJyYXlPYmplY3RzSW5TZWxlY3Rpb24ucHVzaChvYmplY3RUb1NlbGVjdCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2NvcGUucmV0dXJuT2JqZWN0c1RvU2NlbmUoKTtcclxuXHJcbiAgICAgICAgICBsZXQgY2VudGVyUG9pbnRzID0gW107XHJcblxyXG4gICAgICAgICAgYXJyYXlPYmplY3RzSW5TZWxlY3Rpb24uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBjZW50ZXJQb2ludHMucHVzaChlbGVtZW50LnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgbGV0IGJhcnlDZW50ZXIgPSBmaW5kQmFyeUNlbnRlcihjZW50ZXJQb2ludHMpLmNsb25lKCk7XHJcblxyXG4gICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5wb3NpdGlvbi5zZXQoXHJcbiAgICAgICAgICAgIGJhcnlDZW50ZXIueCxcclxuICAgICAgICAgICAgYmFyeUNlbnRlci55LFxyXG4gICAgICAgICAgICBiYXJ5Q2VudGVyLnpcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IGFycmF5T2JqZWN0c0luU2VsZWN0aW9uLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uYXR0YWNoKFxyXG4gICAgICAgICAgICAgIGFycmF5T2JqZWN0c0luU2VsZWN0aW9uW2ldXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhcnJheU9iamVjdHNJblNlbGVjdGlvbltpXS5hZGQoXHJcbiAgICAgICAgICAgICAgdGFfRW50aXRpZXMuY3JlYXRlQm91bmRpbmdCb3goYXJyYXlPYmplY3RzSW5TZWxlY3Rpb25baV0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5zZXRNb2RlKHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSk7XHJcbiAgICAgICAgICAgIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaChcclxuICAgICAgICAgICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNjb3BlLnJldHVybk9iamVjdHNUb1NjZW5lKCk7XHJcbiAgICAgICAgICBzY29wZS5yZXNldE11bHR5c2VsZWN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgaWYgKHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRhX0VudGl0aWVzLnJlbW92ZVNlbGVjdGlvbihzY29wZS5jdXJyZW50U2VsZWN0aW9uKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBpZiAoIG9iamVjdFRvU2VsZWN0Lm5hbWUgIT09ICdjcmVhdGVNZXNoSGVscGVycycgKSB7XHJcblxyXG4gICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbiA9IHRhX0VudGl0aWVzLnNlbGVjdEVudGl0eShcclxuICAgICAgICAgICAgb2JqZWN0VG9TZWxlY3QsXHJcbiAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb25cclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgLy8gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgIGlmIChzY29wZS50cmFuc2Zvcm1Db250cm9sc01vZGUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgc2NvcGUudHJhbnNmb3JtQ29udHJvbHMuc2V0TW9kZShzY29wZS50cmFuc2Zvcm1Db250cm9sc01vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgKCBvYmplY3RUb1NlbGVjdC5uYW1lICE9PSAnY3JlYXRlTWVzaEhlbHBlcnMnICkge1xyXG4gICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIC8vIGVsc2V7XHJcbiAgICAgICAgICAgIC8vIHNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaCggb2JqZWN0VG9TZWxlY3QgKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvL9C/0YDQuCDQv9C10YDQtdC80LXRidC10L3QuNC4INGC0YDQsNC90YHRhNC+0YDQvNC60L7QvdGC0YDQvtC70YEg0YLQvtC20LUg0YHRgNCw0LHQsNGC0YvQstCw0LXRgi4g0J7QsdGA0LDQsdC+0YLQsNGC0YwhXHJcbiAgICAgICAgLy/QvtCx0YDQsNCx0L7RgtCw0YLRjCDRgtCw0Log0LbQtSDQtdGB0LvQuCDQutGD0YDRgdC+0YAg0L3QsNC00L4g0L7QsdGK0LXQutGC0L7QvFxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCBcInNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzQ2hhbmdlZCA9IFwiLCBzY29wZS50cmFuc2Zvcm1Db250cm9sc0NoYW5nZWQpO1xyXG5cclxuICAgICAgICBpZiAoIXNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coIFwiY2xpY2sgZW1wdGluZXNzXCIpO1xyXG5cclxuICAgICAgICAgIHNjb3BlLnJldHVybk9iamVjdHNUb1NjZW5lKCk7XHJcbiAgICAgICAgICBzY29wZS5yZXNldE11bHR5c2VsZWN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgLy8g0JjQqdCYINCi0KPQoiEhIVxyXG4gICAgICAgICAgaWYgKCFzY29wZS50YV9TdGF0ZS5tZXNoRWRpdE1vZGUgfHwgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCApXHJcblxyXG4gICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5kZXRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpO1xyXG4gICAgICAgICAgICB0YV9FbnRpdGllcy5yZW1vdmVTZWxlY3Rpb24oc2NvcGUuY3VycmVudFNlbGVjdGlvbik7XHJcbiAgICAgICAgICAgIHNjb3BlLnRhX1VJLmVsZW1lbnRzLm1lc2hFZGl0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgICAgIHNjb3BlLnRhX1VJLmNyZWF0ZVBhcmFtZXRlcnNNZW51KHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICAgICAgICBzY29wZS50YV9VSS5lbGVtZW50cy5tZXNoRWRpdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzY29wZS50YV9VSS5kZWxldGVQYXJhbWV0ZXJzTWVudSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2NvcGUudHJhbnNmb3JtQ29udHJvbHNDaGFuZ2VkKSB7XHJcbiAgICAgICAgc2NvcGUudHJhbnNmb3JtQ29udHJvbHNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJldHVybk9iamVjdHNUb1NjZW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbGV0IGxlbmd0aEFycmF5ID0gc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbi5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBsZW5ndGhBcnJheSAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICB0YV9FbnRpdGllcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveChcclxuICAgICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbltpXVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBzY2VuZS5hdHRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5kZXRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLnJlc2V0TXVsdHlzZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uY2hpbGRyZW4gPSBbXTtcclxuICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24uc2NhbGUuc2V0KDEsIDEsIDEpO1xyXG4gICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyggZXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xyXG4gICAgICAvLyBsZXQgc2NyZWVuUG9pbnQgPSBnZXRTY3JlZW5Qb2ludCggZXZlbnQudG91Y2hlc1swXSApO1xyXG4gICAgICAvLyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSggc2NyZWVuUG9pbnQsIGNhbWVyYSApO1xyXG4gICAgICAvLyBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKCBzY2VuZUdyaWQubWFpblBsYW5lc0FycmF5ICk7XHJcbiAgICAgIC8vIGlmICggZXZlbnQudGFyZ2V0LmlkID09IFwibGFiZWxSZW5kZXJlclwiKSB7XHJcbiAgICAgIC8vIGNvb3Jkc0hlbHBlcnMucmVtb3ZlQ29vcmRzSGVscGVycyggc2NlbmUgKTtcclxuICAgICAgLy8gY29vcmRzSGVscGVycy5jcmVhdGVDb29yZHNIZWxwZXJzKCBpbnRlcnNlY3RzLCBzY2VuZSApO1xyXG4gICAgICAvLyBzY29wZS50cmFuc2Zvcm1Db250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XHJcbiAgICAgIC8vIHRoaXMub3JiaXRDb250cm9scy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoKSB7XHJcbiAgICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIC8vIHRoaXMub3JiaXRDb250cm9scy5lbmFibGVSb3RhdGUgPSBmYWxzZTtcclxuICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQpO1xyXG4gICAgICAvL1xyXG4gICAgICAvLyBsZXQgc2NyZWVuUG9pbnQgPSBnZXRTY3JlZW5Qb2ludCggZXZlbnQudG91Y2hlc1swXSApO1xyXG4gICAgICAvLyByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSggc2NyZWVuUG9pbnQsIGNhbWVyYSApO1xyXG4gICAgICBsZXQgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHNjZW5lR3JpZC5tYWluUGxhbmVzQXJyYXkpO1xyXG4gICAgICAvLyBpZiAoIGV2ZW50LnRhcmdldC5pZCA9PSBcImxhYmVsUmVuZGVyZXJcIikge1xyXG4gICAgICAvLyBjb29yZHNIZWxwZXJzLnJlbW92ZUNvb3Jkc0hlbHBlcnMoIHNjZW5lICk7XHJcbiAgICAgIC8vIGNvb3Jkc0hlbHBlcnMuY3JlYXRlQ29vcmRzSGVscGVycyggaW50ZXJzZWN0cywgc2NlbmUgKTtcclxuICAgICAgaW50ZXJzZWN0aW9uc0luZm8oaW50ZXJzZWN0cyk7XHJcbiAgICAgIC8vIGlmIChjcmVhdGluZ0VudGl0eS5jdXJyZW50RW50aXR5KSB7XHJcbiAgICAgIC8vIFx0Y3JlYXRpbmdFbnRpdHkuY3JlYXRlRW50aXR5KCBzY29wZS5tb2RlLCBzY2VuZSwgZXZlbnQsIHNjZW5lQ2FtZXJhICk7XHJcbiAgICAgIC8vIFx0dGhpcy50YV9VSS51cGRhdGVQYXJhbWV0ZXJzTWVudSggY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSApO1xyXG4gICAgICAvLyB9XHJcbiAgICAgIC8vIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZU1vdmUoZXZlbnQpIHtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICBsZXQgc2NyZWVuUG9pbnQgPSBnZXRTY3JlZW5Qb2ludChldmVudCk7XHJcblxyXG4gICAgICBzY29wZS5tb3VzZVBvc2l0aW9uLnggPSBzY3JlZW5Qb2ludC54O1xyXG4gICAgICBzY29wZS5tb3VzZVBvc2l0aW9uLnkgPSBzY3JlZW5Qb2ludC55O1xyXG5cclxuICAgICAgcmF5Y2FzdGVyLnNldEZyb21DYW1lcmEoc2NyZWVuUG9pbnQsIGNhbWVyYSk7XHJcbiAgICAgIGxldCBpbnRlcnNlY3RzID0gcmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHMoc2NlbmVHcmlkLm1haW5QbGFuZXNBcnJheSk7XHJcbiAgICAgIC8vIGlmICggZXZlbnQudGFyZ2V0LmlkID09IFwibGFiZWxSZW5kZXJlclwiKSB7XHJcbiAgICAgIC8vIGNvb3Jkc0hlbHBlcnMucmVtb3ZlQ29vcmRzSGVscGVycyhzY2VuZSk7XHJcbiAgICAgIC8vIGNvb3Jkc0hlbHBlcnMuY3JlYXRlQ29vcmRzSGVscGVycyhpbnRlcnNlY3RzLCBzY2VuZSk7XHJcbiAgICAgIGludGVyc2VjdGlvbnNJbmZvKGludGVyc2VjdHMpO1xyXG5cclxuICAgICAgaWYgKGNyZWF0aW5nRW50aXR5LmN1cnJlbnRFbnRpdHkpIHtcclxuICAgICAgICBjcmVhdGluZ0VudGl0eS5jcmVhdGVFbnRpdHkoc2NvcGUubW9kZSwgc2NlbmUsIGV2ZW50LCBzY2VuZUNhbWVyYSk7XHJcbiAgICAgICAgc2NvcGUudGFfVUkudXBkYXRlUGFyYW1ldGVyc01lbnUoY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBzY29wZS50YV9TdGF0ZS5hcHBNb2RlLm1lc2hFZGl0ICYmXHJcbiAgICAgICAgc2NvcGUubWVzaEVkaXRPYmplY3QubW9kZSA9PT0gXCJGYWNlc1wiXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChzY29wZS5tZXNoRWRpdE9iamVjdC5mYWNlSGlnaGxpZ2h0aW5nKSB7XHJcbiAgICAgICAgICBsZXQgaW50ZXJzZWN0c09iamVjdHMgPSByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhbXHJcbiAgICAgICAgICAgIHNjb3BlLm1lc2hFZGl0T2JqZWN0Lm1lc2gsXHJcbiAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgICBzY29wZS5tZXNoRWRpdE9iamVjdC5oaWdobGlnaHRGYWNlKGludGVyc2VjdHNPYmplY3RzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTY3JlZW5Qb2ludChldmVudCkge1xyXG4gICAgICAvL1xyXG4gICAgICBjb25zdCBzY3JlZW5Qb2ludCA9IG5ldyBWZWN0b3IyKCk7XHJcbiAgICAgIHJldHVybiBzY3JlZW5Qb2ludC5zZXQoXHJcbiAgICAgICAgKGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiAyIC0gMSxcclxuICAgICAgICAtKGV2ZW50LmNsaWVudFkgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogMiArIDFcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbnRlcnNlY3Rpb25zSW5mbyhpbnRlcnNlY3RzKSB7XHJcbiAgICAgIGlmIChpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBsZXQgb2JqZWN0TmFtZSA9IGludGVyc2VjdHNbMF0ub2JqZWN0Lm5hbWU7XHJcbiAgICAgICAgbGV0IHggPSBpbnRlcnNlY3RzWzBdLnBvaW50Lng7XHJcbiAgICAgICAgbGV0IHkgPSBpbnRlcnNlY3RzWzBdLnBvaW50Lnk7XHJcbiAgICAgICAgbGV0IHogPSBpbnRlcnNlY3RzWzBdLnBvaW50Lno7XHJcbiAgICAgICAgaW5mb0Rpdi5pbm5lckhUTUwgPVxyXG4gICAgICAgICAgb2JqZWN0TmFtZSArXHJcbiAgICAgICAgICBcIjo8YnI+IHg9XCIgK1xyXG4gICAgICAgICAgTWF0aC5yb3VuZCh4ICogMTAwKSAvIDEwMCArXHJcbiAgICAgICAgICBcIjsgeT1cIiArXHJcbiAgICAgICAgICBNYXRoLnJvdW5kKHkgKiAxMDApIC8gMTAwICtcclxuICAgICAgICAgIFwiOyB6PVwiICtcclxuICAgICAgICAgIE1hdGgucm91bmQoeiAqIDEwMCkgLyAxMDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5mb0Rpdi5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VEb3duKCkge31cclxuICAgIGZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZVVwKGV2ZW50KSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdvbkRvY3VtZW50TW91c2VVcCcpO1xyXG5cclxuICAgICAgaWYgKGV2ZW50LnRhcmdldC5pZCAhPT0gXCJsYWJlbFJlbmRlcmVyXCIpIHJldHVybjtcclxuICAgICAgaWYgKHNjb3BlLnRhX1N0YXRlLmFwcE1vZGUubWVzaEVkaXQpIHJldHVybjtcclxuXHJcbiAgICAgIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgLy8gY29uc29sZS5sb2coc2NvcGUub3JiaXRDb250cm9sc0NoYW5nZWQpO1xyXG5cclxuICAgICAgaWYgKHNjb3BlLm9yYml0Q29udHJvbHNDaGFuZ2VkKSB7XHJcbiAgICAgICAgc2NvcGUub3JiaXRDb250cm9sc0NoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc2NvcGUubW9kZS5hY3Rpb24gPT09IFwic2VsZWN0XCIpIHtcclxuICAgICAgICBpZiAoIXNjb3BlLnRyYW5zZm9ybUNvbnRyb2xzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgc2VsZWN0QnlNb3VzZShldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBsZXQgc2NyZWVuUG9pbnQgPSBnZXRTY3JlZW5Qb2ludChldmVudCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBvbktleURvd24oZXZlbnQpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coIGV2ZW50LmtleUNvZGUgKTtcclxuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XHJcbiAgICAgICAgY2FzZSAyNzoge1xyXG4gICAgICAgICAgLy8gRXNjXHJcbiAgICAgICAgICBpZiAoY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSkge1xyXG4gICAgICAgICAgICBzY29wZS5zZWxlY3RhYmxlT2JqZWN0cy5wdXNoKGNyZWF0aW5nRW50aXR5LmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICBjcmVhdGluZ0VudGl0eS5zdG9wQ3JlYXRpbmcoc2NvcGUuc2VsZWN0YWJsZU9iamVjdHMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGxldCBhZGRUb1NjZW5lRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkVG9TY2VuZUJ1dHRvbnNcIik7XHJcbiAgICAgICAgICBhZGRUb1NjZW5lRm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgbGV0IGZpbmlzaEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiRmluaXNoXCIpO1xyXG4gICAgICAgICAgZmluaXNoQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgIHNjb3BlLm1vZGUgPSB7XHJcbiAgICAgICAgICAgIGFjdGlvbjogXCJzZWxlY3RcIixcclxuICAgICAgICAgICAgZW50aXR5OiBudWxsLFxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSA0Njoge1xyXG4gICAgICAgICAgLy9EZWxldGVcclxuICAgICAgICAgIGlmIChzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9sc01vZGUgPSBcIlwiO1xyXG4gICAgICAgICAgICBzY29wZS50cmFuc2Zvcm1Db250cm9scy5kZXRhY2goc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QpO1xyXG5cclxuICAgICAgICAgICAgc2NlbmUucmVtb3ZlKHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICAgICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzY29wZS5jdXJyZW50U2VsZWN0aW9uLm11bHRpc2VsZWN0aW9uLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc2NvcGUudHJhbnNmb3JtQ29udHJvbHMuZGV0YWNoKFxyXG4gICAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb25cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsZW5ndGhBcnJheSA9XHJcbiAgICAgICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbi5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gbGVuZ3RoQXJyYXkgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ubXVsdGlzZWxlY3Rpb24ucmVtb3ZlKFxyXG4gICAgICAgICAgICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5tdWx0aXNlbGVjdGlvbi5jaGlsZHJlbltpXVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNjb3BlLnJlc2V0TXVsdHlzZWxlY3Rpb24oKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhc2UgNjc6IC8vJ2MnIGNvcHkgb2JqZWN0XHJcbiAgICAgICAgICB0YV9FbnRpdGllcy5jbG9uZU9iamVjdChzY29wZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgNzc6IHtcclxuICAgICAgICAgIC8vJ20nIG1vdmUgb2JqZWN0IG9yIGdyb3VwXHJcbiAgICAgICAgICBBY3Rpb25zLnN3aXRjaE9uTW92ZU1vZGUoc2NvcGUpO1xyXG4gICAgICAgICAgbGV0IG1vdmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIk1vdmVcIik7XHJcbiAgICAgICAgICBtb3ZlQnV0dG9uLmNoZWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSA4Mjoge1xyXG4gICAgICAgICAgLy8ncicgcm90YXRlIG9iamVjdCBvciBncm91cFxyXG4gICAgICAgICAgQWN0aW9ucy5zd2l0Y2hPblJvdGF0aW9uTW9kZShzY29wZSk7XHJcbiAgICAgICAgICBsZXQgcm90YXRlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJSb3RhdGVcIik7XHJcbiAgICAgICAgICByb3RhdGVCdXR0b24uY2hlY2tlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYXNlIDgzOiB7XHJcbiAgICAgICAgICAvLydzJyBzY2FsZSBvYmplY3Qgb3IgZ3JvdXBcclxuICAgICAgICAgIEFjdGlvbnMuc3dpdGNoT25TY2FsZU1vZGUoc2NvcGUpO1xyXG4gICAgICAgICAgbGV0IHNjYWxlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJTY2FsZVwiKTtcclxuICAgICAgICAgIHNjYWxlQnV0dG9uLmNoZWNrZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FzZSA2ODogeyAvLydkJyBkcmFnIG9iamVjdCBvciBncm91cFxyXG4gICAgICAgICAgbGV0IGRyYWdCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRyYWdDaGVja1wiKTtcclxuICAgICAgICAgIGRyYWdCdXR0b24uY2hlY2tlZCA9IGRyYWdCdXR0b24uY2hlY2tlZCA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgICBpZiAoY3JlYXRpbmdFbnRpdHkuY3VycmVudEVudGl0eSkge1xyXG4gICAgICAgICAgICBzY29wZS5zZWxlY3RhYmxlT2JqZWN0cy5wdXNoKGNyZWF0aW5nRW50aXR5LmN1cnJlbnRFbnRpdHkpO1xyXG4gICAgICAgICAgICBjcmVhdGluZ0VudGl0eS5zdG9wQ3JlYXRpbmcoc2NvcGUuc2VsZWN0YWJsZU9iamVjdHMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIEFjdGlvbnMuc3dpdGNoRHJhZ01vZGUoZHJhZ0J1dHRvbi5jaGVja2VkLCBzY29wZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ldmVudHMub25FdmVudChcIm1hdGNhcENoYW5nZWRcIiwgbWF0Y2FwQ2hhbmdpbmcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1hdGNhcENoYW5naW5nKGltZykge1xyXG4gICAgICBpZiAoIXNjb3BlLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KSByZXR1cm47XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGltZyk7XHJcblxyXG4gICAgICAvLyBsZXQgbWF0ZXJpYWwgPSBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdC5tYXRlcmlhbDtcclxuICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG4gICAgICBzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdC5tYXRlcmlhbCA9IG5ldyBNZXNoTWF0Y2FwTWF0ZXJpYWwoKTtcclxuICAgICAgbGV0IHRleHR1cmUgPSBuZXcgVGV4dHVyZUxvYWRlcigpLmxvYWQoXHJcbiAgICAgICAgXCJfUmVzb3VyY2VzL01hdGNhYnMvVGVzdC9cIiArIGltZyxcclxuICAgICAgICAvLyArIGltZ1swXS5yZXBsYWNlKFwiLTY0cHhcIixcIi0yNTZweFwiKSxcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gdGV4dHVyZS5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcclxuICAgICAgc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QubWF0ZXJpYWwubWF0Y2FwID0gdGV4dHVyZTtcclxuICAgICAgLy8gc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QubWF0ZXJpYWwubWF0Y2FwLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgLy8gc2NvcGUuY3VycmVudFNlbGVjdGlvbi5vYmplY3QubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgLy8gbWF0ZXJpYWwubWF0Y2FwLmVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nOyAvLyBhc3N1bWUgaXQgaXMgc1JHQlxyXG4gICAgICAvLyBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIC8vICBjb25zb2xlLmxvZyhzY29wZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdC5tYXRlcmlhbClcclxuICAgIH1cclxuXHJcbiAgICBsZXQgYW5pbWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgICBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG4gICAgICByZW5kZXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICAgIHJlbmRlcmVyMi5yZW5kZXIoc2NlbmUsIGNhbWVyYTIpO1xyXG4gICAgICBsYWJlbFJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcclxuICAgIH1cclxuICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xyXG4gICAgdGhpcy5hbmltYXRlID0gYW5pbWF0ZTtcclxuICAgIGFuaW1hdGUoKTtcclxuICB9XHJcblxyXG4gIGNsZWFyU2NlbmUoKSB7XHJcbiAgICBsZXQgdGFfRW50aXRpZXMgPSBuZXcgVEFfRW50aXRpZXMoKTtcclxuXHJcbiAgICBpZiAodGhpcy5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCkge1xyXG4gICAgICB0aGlzLnRyYW5zZm9ybUNvbnRyb2xzLmRldGFjaCh0aGlzLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KTtcclxuICAgICAgdGFfRW50aXRpZXMucmVtb3ZlU2VsZWN0aW9uKHRoaXMuY3VycmVudFNlbGVjdGlvbik7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJldHVybk9iamVjdHNUb1NjZW5lKCk7XHJcbiAgICB0aGlzLnJlc2V0TXVsdHlzZWxlY3Rpb24oKTtcclxuXHJcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLnNjZW5lLmNoaWxkcmVuO1xyXG5cclxuICAgIGxldCBlbGVtZW50c1RvUmVtb3ZlID0gW107XHJcblxyXG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICBpZiAoZWxlbWVudC51c2VyRGF0YS5jcmVhdGVkQnlVc2VyKSB7XHJcbiAgICAgICAgZWxlbWVudHNUb1JlbW92ZS5wdXNoKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdGFibGVPYmplY3RzLnNwbGljZSh0aGlzLnNlbGVjdGFibGVPYmplY3RzLmluZGV4T2YoZWxlbWVudCkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZSguLi5lbGVtZW50c1RvUmVtb3ZlKTtcclxuICB9XHJcblxyXG4gIC8vIHNldFVJKCB0YV9VSSApIHtcclxuXHJcbiAgLy8gXHR0aGlzLnRhX1VJID0gdGFfVUk7XHJcblxyXG4gIC8vIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVEFfU2NlbmUgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbi8vIGltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgR3JvdXAsXHJcbiAgQ29sb3IsXHJcbiAgVmVjdG9yMyxcclxuICBCdWZmZXJHZW9tZXRyeSxcclxuICBCdWZmZXJBdHRyaWJ1dGUsXHJcbiAgU3BoZXJlQnVmZmVyR2VvbWV0cnksXHJcbiAgTWVzaCxcclxuICBNZXNoQmFzaWNNYXRlcmlhbCxcclxuICBEb3VibGVTaWRlLFxyXG4gIEZhY2VDb2xvcnMsXHJcbn0gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanNcIjtcclxuaW1wb3J0IHsgVEFfRW50aXRpZXMgfSBmcm9tIFwiLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TY2VuZSB9IGZyb20gXCIuL1RBX1NjZW5lLmpzXCI7XHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVUkvVEFfVUkuanNcIjtcclxuaW1wb3J0IHsgZmluZEJhcnlDZW50ZXIgfSBmcm9tIFwiLi9DYWxjdWxhdGlvbnMuanNcIjtcclxuXHJcbmNsYXNzIE1lc2hFZGl0IHtcclxuICBjb25zdHJ1Y3RvcihtZXNoKSB7XHJcbiAgICB0aGlzLm1lc2ggPSBtZXNoO1xyXG4gICAgdGhpcy52ZXJ0aWNlcztcclxuICAgIHRoaXMucG9pbnRzO1xyXG4gICAgdGhpcy5tb2RlID0gXCJWZXJ0aWNlc1wiO1xyXG5cclxuICAgIHRoaXMudGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuICAgIHRoaXMudGFfRW50aXRpZXMgPSBuZXcgVEFfRW50aXRpZXMoKTtcclxuICAgIHRoaXMudGFfU2NlbmUgPSBuZXcgVEFfU2NlbmUoKTtcclxuICAgIHRoaXMuZmFjZUhpZ2hsaWdodGluZyA9IHRydWU7XHJcblxyXG4gICAgdGhpcy5tYXRlcmlhbEhpZ2hsaWdodCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7XHJcbiAgICAgIGNvbG9yOiBuZXcgQ29sb3IoXCJ5ZWxsb3dcIiksXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxyXG4gICAgICBvcGFjaXR5OiAwLjksXHJcbiAgICAgIC8vIHNpZGU6IERvdWJsZVNpZGVcclxuICAgICAgLy8gYWxwaGFUZXN0OiAwLjUsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRyaWFuZ2xlRm9ySGlnaGxpZ2h0aW5nID0gY3JlYXRlVHJpYW5nbGUoXHJcbiAgICAgIFtuZXcgVmVjdG9yMygwLCAwLCAwKSwgbmV3IFZlY3RvcjMoMCwgMCwgMCksIG5ldyBWZWN0b3IzKDAsIDAsIDApXSxcclxuXHJcbiAgICAgIHRoaXMubWF0ZXJpYWxIaWdobGlnaHRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBoaWdobGlnaHRGYWNlKGludGVyc2VjdHNPYmplY3RzKSB7XHJcbiAgICBpZiAoaW50ZXJzZWN0c09iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgbWVzaCA9IGludGVyc2VjdHNPYmplY3RzWzBdLm9iamVjdDtcclxuICAgICAgbGV0IGZhY2UgPSBpbnRlcnNlY3RzT2JqZWN0c1swXS5mYWNlO1xyXG5cclxuICAgICAgbGV0IHBvaW50cyA9IGdldFBvaW50cyhtZXNoKTtcclxuXHJcbiAgICAgIGxldCB2ZXJ0aWNlcyA9IFtwb2ludHNbZmFjZS5hXSwgcG9pbnRzW2ZhY2UuYl0sIHBvaW50c1tmYWNlLmNdXTtcclxuXHJcbiAgICAgIGxldCBhcnIgPSBbXTtcclxuICAgICAgdmVydGljZXMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgYXJyLnB1c2goaXRlbS54KTtcclxuICAgICAgICBhcnIucHVzaChpdGVtLnkpO1xyXG4gICAgICAgIGFyci5wdXNoKGl0ZW0ueik7XHJcbiAgICAgIH0pO1xyXG4gICAgICBhcnIubWFwKFxyXG4gICAgICAgIChpdGVtLCBpbmRleCkgPT5cclxuICAgICAgICAgICh0aGlzLnRyaWFuZ2xlRm9ySGlnaGxpZ2h0aW5nLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXlbXHJcbiAgICAgICAgICAgIGluZGV4XHJcbiAgICAgICAgICBdID0gaXRlbSlcclxuICAgICAgKTtcclxuICAgICAgdGhpcy50cmlhbmdsZUZvckhpZ2hsaWdodGluZy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgdGhpcy50cmlhbmdsZUZvckhpZ2hsaWdodGluZy5uYW1lID0gXCJGYWNlSGlnaGxpZ2h0XCI7XHJcblxyXG4gICAgICBtZXNoLmFkZCh0aGlzLnRyaWFuZ2xlRm9ySGlnaGxpZ2h0aW5nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNyZWF0ZU1lc2hIZWxwZXJzKCkge1xyXG4gICAgdGhpcy5wb2ludHMgPSBnZXRQb2ludHModGhpcy5tZXNoKTtcclxuICAgIHRoaXMudmVydGljZXMgPSBnZXRWZXJ0aWNlcyh0aGlzLnBvaW50cyk7XHJcblxyXG4gICAgLy8gdGhpcy5tZXNoLmFkZCggdGhpcy50YV9FbnRpdGllcy5jcmVhdGVXaXJlZnJhbWUoIHRoaXMubWVzaCApICk7XHJcblxyXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJWZXJ0aWNlc1wiKSB7XHJcbiAgICAgIHRoaXMuYWRkU3BoZXJlc1RvVmVydGljZXModGhpcy5tZXNoLCB0aGlzLnZlcnRpY2VzKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLm1vZGUgPT09IFwiRmFjZXNcIikge1xyXG4gICAgICAvLyB0aGlzLmFkZFRyaWFuZ2xlcyggdGhpcy5tZXNoLCB0aGlzLnBvaW50cyApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlTWVzaEhlbHBlcnMoKSB7XHJcbiAgICB0aGlzLnRhX0VudGl0aWVzLnJlbW92ZVdpcmVmcmFtZUFuZEJvdW5kaW5nQm94KHRoaXMubWVzaCk7XHJcblxyXG4gICAgdGhpcy5tZXNoLnJlbW92ZSh0aGlzLm1lc2guZ2V0T2JqZWN0QnlOYW1lKFwic2hwZXJlc0Zvck1lc2hFZGl0XCIpKTtcclxuICAgIHRoaXMubWVzaC5yZW1vdmUodGhpcy5tZXNoLmdldE9iamVjdEJ5TmFtZShcIkZhY2VIZWxwZXJHcm91cFwiKSk7XHJcbiAgfVxyXG5cclxuICB0cmFuc2Zvcm1NZXNoKGVkaXRIZWxwZXIpIHtcclxuICAgIGlmICh0aGlzLm1vZGUgPT09IFwiVmVydGljZXNcIikge1xyXG4gICAgICB0aGlzLm1vdmVWZXJ0ZXgoXHJcbiAgICAgICAgZWRpdEhlbHBlci5vYmplY3QudXNlckRhdGEudmVydGV4TnVtYmVyLFxyXG4gICAgICAgIGVkaXRIZWxwZXIub2JqZWN0LnBvc2l0aW9uXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJGYWNlc1wiKSB7XHJcbiAgICAgIGxldCBzcGhlcmVOYW1lID0gZWRpdEhlbHBlci5vYmplY3QubmFtZTtcclxuXHJcbiAgICAgIGxldCBmYWNlID0gZWRpdEhlbHBlci5vYmplY3QucGFyZW50LmdldE9iamVjdEJ5TmFtZShcclxuICAgICAgICBlZGl0SGVscGVyLm9iamVjdC5uYW1lLnJlcGxhY2UoXCJTcGhlcmVcIiwgXCJcIilcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGxldCBzcGhlcmUgPSBlZGl0SGVscGVyLm9iamVjdDtcclxuXHJcbiAgICAgIGxldCBzaGlmdCA9IHNwaGVyZS5wb3NpdGlvbi5jbG9uZSgpO1xyXG5cclxuICAgICAgc2hpZnQuc3ViVmVjdG9ycyhzcGhlcmUucG9zaXRpb24sIGZhY2UudXNlckRhdGEuYmFyeUNlbnRlcik7XHJcblxyXG4gICAgICBmYWNlLnBvc2l0aW9uLnNldChzaGlmdC54LCBzaGlmdC55LCBzaGlmdC56KTtcclxuXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nIChzaGlmdClcclxuXHJcbiAgICAgIGxldCBhdHRyQXJyYXkgPSBmYWNlLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcbiAgICAgIGxldCB2ZXJ0aWNlcyA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyQXJyYXkubGVuZ3RoOyBpICs9IDMpIHtcclxuICAgICAgICB2ZXJ0aWNlcy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFZlY3RvcjMoYXR0ckFycmF5W2ldLCBhdHRyQXJyYXlbaSArIDFdLCBhdHRyQXJyYXlbaSArIDJdKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCB2ZXJ0aWNlc051bWJlcnMgPSBmYWNlLnVzZXJEYXRhLnZlcnRpY2VzTnVtYmVycztcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydGljZXNOdW1iZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHBvaW50TnVtYmVyID0gdmVydGljZXNOdW1iZXJzW2ldO1xyXG5cclxuICAgICAgICBsZXQgcG9pbnQgPSB2ZXJ0aWNlc1tpXS5jbG9uZSgpO1xyXG5cclxuICAgICAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IHBvaW50LmFkZChmYWNlLnBvc2l0aW9uLmNsb25lKCkpLmNsb25lKCk7XHJcblxyXG4gICAgICAgIHRoaXMubW92ZVZlcnRleChwb2ludE51bWJlciwgcG9pbnRQb3NpdGlvbik7XHJcblxyXG4gICAgICAgIC8vIHRoaXMucmVtb3ZlTWVzaEhlbHBlcnMoKTtcclxuXHJcbiAgICAgICAgbGV0IHNwaGVyZSA9IHRoaXMudGFfU2NlbmUuc2NlbmUuZ2V0T2JqZWN0QnlOYW1lKHNwaGVyZU5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLnRhX1NjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmF0dGFjaChzcGhlcmUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY3JlYXRlTWVzaEhlbHBlcnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdmVWZXJ0ZXgodmVydGV4TnVtYmVyLCBwb3NpdGlvbikge1xyXG4gICAgbGV0IG9iamVjdCA9IHRoaXMubWVzaDtcclxuXHJcbiAgICBvYmplY3QuZ2VvbWV0cnkucGFyYW1ldGVycyA9IG51bGw7XHJcblxyXG4gICAgbGV0IFZlcnRleGVzUG9pbnRzSW5kZXhlcyA9IGdldFZlcnRleGVzUG9pbnRzSW5kZXhlcyhcclxuICAgICAgdGhpcy5wb2ludHMsXHJcbiAgICAgIHRoaXMudmVydGljZXNcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy50YV9FbnRpdGllcy5yZW1vdmVXaXJlZnJhbWVBbmRCb3VuZGluZ0JveChvYmplY3QpO1xyXG5cclxuICAgIHRoaXMudmVydGljZXNbK3ZlcnRleE51bWJlcl0gPSBwb3NpdGlvbjtcclxuXHJcbiAgICBsZXQgbmV3UG9pbnRzID0gdmVydGV4ZXNDaGFuZ2VQb2ludHMoXHJcbiAgICAgIHRoaXMudmVydGljZXMsXHJcbiAgICAgIHRoaXMucG9pbnRzLFxyXG4gICAgICBWZXJ0ZXhlc1BvaW50c0luZGV4ZXNcclxuICAgICk7XHJcblxyXG4gICAgcG9pbnRzQ2hhbmdlQXR0cmlidXRlc1Bvc2l0aW9uKG9iamVjdCwgbmV3UG9pbnRzKTtcclxuICAgIG9iamVjdC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICAvL3dpdGhvdXQgdGhpcyByYXljYXN0ZXIgd2lsbCBub3Qgd29yayBjb3JyZWN0XHJcbiAgICBvYmplY3QuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcbiAgICBvYmplY3QuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcblxyXG4gICAgb2JqZWN0LmFkZCh0aGlzLnRhX0VudGl0aWVzLmNyZWF0ZVdpcmVmcmFtZShvYmplY3QpKTtcclxuICB9XHJcblxyXG4gIGFkZFNwaGVyZXNUb1ZlcnRpY2VzKG1lc2gsIHZlcnRpY2VzKSB7XHJcbiAgICBsZXQgc3BoZXJlR2VvbWV0cnkgPSBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoMC4zLCAzLCAyKTtcclxuICAgIGxldCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiBuZXcgQ29sb3IoXCJyZWRcIikgfSk7XHJcblxyXG4gICAgbGV0IGdyb3VwID0gbmV3IEdyb3VwKCk7XHJcbiAgICBncm91cC5uYW1lID0gXCJzaHBlcmVzRm9yTWVzaEVkaXRcIjtcclxuXHJcbiAgICB2ZXJ0aWNlcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcbiAgICAgIGxldCBzcGhlcmUgPSBuZXcgTWVzaChzcGhlcmVHZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgICBzcGhlcmUubmFtZSA9IFwiY3JlYXRlTWVzaEhlbHBlcnNcIjtcclxuICAgICAgc3BoZXJlLnVzZXJEYXRhLnZlcnRleE51bWJlciA9IGAke2luZGV4fWA7XHJcbiAgICAgIGdyb3VwLmFkZChzcGhlcmUpO1xyXG4gICAgICBzcGhlcmUucG9zaXRpb24uc2V0KGl0ZW0ueCwgaXRlbS55LCBpdGVtLnopO1xyXG4gICAgICB0aGlzLnRhX1NjZW5lLnNlbGVjdGFibGVPYmplY3RzLnB1c2goc3BoZXJlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIG1lc2guYWRkKGdyb3VwKTtcclxuICB9XHJcblxyXG4gIGFkZFRyaWFuZ2xlKGludGVyc2VjdHNPYmplY3RzKSB7XHJcbiAgICBsZXQgZ3JvdXAgPSBuZXcgR3JvdXAoKTtcclxuICAgIGdyb3VwLm5hbWUgPSBcIkZhY2VIZWxwZXJHcm91cFwiO1xyXG5cclxuICAgIGxldCBzcGhlcmVHZW9tZXRyeSA9IG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSgwLjIsIDMsIDIpO1xyXG4gICAgbGV0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHtcclxuICAgICAgY29sb3I6IG5ldyBDb2xvcihcImxpZ2h0Z3JleVwiKSxcclxuICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICAgIG9wYWNpdHk6IDAuOSxcclxuICAgICAgLy8gc2lkZTogRG91YmxlU2lkZVxyXG4gICAgICAvLyBhbHBoYVRlc3Q6IDAuNSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChpbnRlcnNlY3RzT2JqZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGxldCBtZXNoID0gaW50ZXJzZWN0c09iamVjdHNbMF0ub2JqZWN0O1xyXG4gICAgICBsZXQgZmFjZSA9IGludGVyc2VjdHNPYmplY3RzWzBdLmZhY2U7XHJcblxyXG4gICAgICBtZXNoLnJlbW92ZShtZXNoLmdldE9iamVjdEJ5TmFtZShcIkZhY2VIZWxwZXJHcm91cFwiKSk7XHJcblxyXG4gICAgICBsZXQgcG9pbnRzID0gZ2V0UG9pbnRzKG1lc2gpO1xyXG5cclxuICAgICAgbGV0IHZlcnRpY2VzID0gW3BvaW50c1tmYWNlLmFdLCBwb2ludHNbZmFjZS5iXSwgcG9pbnRzW2ZhY2UuY11dO1xyXG5cclxuICAgICAgbGV0IHRyaWFuZ2xlID0gY3JlYXRlVHJpYW5nbGUodmVydGljZXMsIG1hdGVyaWFsKTtcclxuICAgICAgdHJpYW5nbGUubmFtZSA9IFwiRmFjZV9cIjtcclxuICAgICAgdHJpYW5nbGUudXNlckRhdGEudHlwZSA9IFwiY3JlYXRlTWVzaEhlbHBlcnNcIjtcclxuXHJcbiAgICAgIHRyaWFuZ2xlLnVzZXJEYXRhLnZlcnRpY2VzTnVtYmVycyA9IFtdO1xyXG5cclxuICAgICAgdmVydGljZXMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNlcy5mb3JFYWNoKChpdGVtVmVydCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgIGlmIChpdGVtLmVxdWFscyhpdGVtVmVydCkpIHtcclxuICAgICAgICAgICAgdHJpYW5nbGUudXNlckRhdGEudmVydGljZXNOdW1iZXJzLnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gdHJpYW5nbGUuYWRkKCB0aGlzLnRhX0VudGl0aWVzLmNyZWF0ZVdpcmVmcmFtZSggdHJpYW5nbGUgKSApO1xyXG5cclxuICAgICAgbGV0IHZlcnRpY2VzQ2xvbmVzID0gdmVydGljZXMubWFwKChpdGVtKSA9PiBpdGVtLmNsb25lKCkpO1xyXG4gICAgICBsZXQgYmFyeUNlbnRlciA9IGZpbmRCYXJ5Q2VudGVyKHZlcnRpY2VzQ2xvbmVzKTtcclxuXHJcbiAgICAgIHRyaWFuZ2xlLnVzZXJEYXRhLmJhcnlDZW50ZXIgPSBiYXJ5Q2VudGVyO1xyXG5cclxuICAgICAgbGV0IHNwaGVyZSA9IG5ldyBNZXNoKHNwaGVyZUdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgIHNwaGVyZS5wb3NpdGlvbi5zZXQoYmFyeUNlbnRlci54LCBiYXJ5Q2VudGVyLnksIGJhcnlDZW50ZXIueik7XHJcbiAgICAgIHNwaGVyZS5uYW1lID0gXCJTcGhlcmVGYWNlX1wiO1xyXG4gICAgICBzcGhlcmUudXNlckRhdGEudHlwZSA9IFwiY3JlYXRlTWVzaEhlbHBlcnNcIjtcclxuXHJcbiAgICAgIGdyb3VwLmFkZChzcGhlcmUpO1xyXG5cclxuICAgICAgZ3JvdXAuYWRkKHRyaWFuZ2xlKTtcclxuICAgICAgbWVzaC5hZGQoZ3JvdXApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkVHJpYW5nbGVzKG1lc2gsIHBvaW50cykge1xyXG4gICAgbGV0IHNwaGVyZUdlb21ldHJ5ID0gbmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KDAuMiwgMywgMik7XHJcbiAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogbmV3IENvbG9yKFwibGlnaHRncmV5XCIpIH0pO1xyXG5cclxuICAgIGxldCB0cmlhbmdsZU51bWJlciA9IDA7XHJcblxyXG4gICAgLy8gdGhpcy50YV9TY2VuZS50ZW1wU2VsZWN0YWJsZU9iamVjdHMgPSB0aGlzLnRhX1NjZW5lLnRlbXBTZWxlY3RhYmxlT2JqZWN0cy5jb25jYXQoIHRoaXMudGFfU2NlbmUuc2VsZWN0YWJsZU9iamVjdHMgKTtcclxuXHJcbiAgICAvLyB0aGlzLnRhX1NjZW5lLnNlbGVjdGFibGVPYmplY3RzID0gW107XHJcblxyXG4gICAgbGV0IGdyb3VwID0gbmV3IEdyb3VwKCk7XHJcbiAgICBncm91cC5uYW1lID0gXCJGYWNlc0Zvck1lc2hFZGl0XCI7XHJcblxyXG4gICAgbGV0IGluZGV4QXJyYXkgPSBtZXNoLmdlb21ldHJ5LmluZGV4LmFycmF5O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhBcnJheS5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICBsZXQgdmVydCA9IFtcclxuICAgICAgICBwb2ludHNbaW5kZXhBcnJheVtpXV0sXHJcbiAgICAgICAgcG9pbnRzW2luZGV4QXJyYXlbaSArIDFdXSxcclxuICAgICAgICBwb2ludHNbaW5kZXhBcnJheVtpICsgMl1dLFxyXG4gICAgICBdO1xyXG5cclxuICAgICAgbGV0IHRyaWFuZ2xlID0gY3JlYXRlVHJpYW5nbGUodmVydCwgbWF0ZXJpYWwpO1xyXG5cclxuICAgICAgdHJpYW5nbGUubmFtZSA9IFwiRmFjZV9cIiArIHRyaWFuZ2xlTnVtYmVyO1xyXG5cclxuICAgICAgdHJpYW5nbGUudXNlckRhdGEudHlwZSA9IFwiY3JlYXRlTWVzaEhlbHBlcnNcIjtcclxuXHJcbiAgICAgIHRyaWFuZ2xlLnVzZXJEYXRhLmluZGV4ZXMgPSBbXHJcbiAgICAgICAgaW5kZXhBcnJheVtpXSxcclxuICAgICAgICBpbmRleEFycmF5W2kgKyAxXSxcclxuICAgICAgICBpbmRleEFycmF5W2kgKyAyXSxcclxuICAgICAgXTtcclxuXHJcbiAgICAgIHRyaWFuZ2xlLnVzZXJEYXRhLnZlcnRpY2VzTnVtYmVycyA9IFtdO1xyXG5cclxuICAgICAgdmVydC5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICB0aGlzLnZlcnRpY2VzLmZvckVhY2goKGl0ZW1WZXJ0LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGl0ZW0uZXF1YWxzKGl0ZW1WZXJ0KSkge1xyXG4gICAgICAgICAgICB0cmlhbmdsZS51c2VyRGF0YS52ZXJ0aWNlc051bWJlcnMucHVzaChpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0cmlhbmdsZS5hZGQodGhpcy50YV9FbnRpdGllcy5jcmVhdGVXaXJlZnJhbWUodHJpYW5nbGUpKTtcclxuXHJcbiAgICAgIGxldCB2ZXJ0aWNlc0Nsb25lcyA9IHZlcnQubWFwKChpdGVtKSA9PiBpdGVtLmNsb25lKCkpO1xyXG4gICAgICBsZXQgYmFyeUNlbnRlciA9IGZpbmRCYXJ5Q2VudGVyKHZlcnRpY2VzQ2xvbmVzKTtcclxuXHJcbiAgICAgIHRyaWFuZ2xlLnVzZXJEYXRhLmJhcnlDZW50ZXIgPSBiYXJ5Q2VudGVyO1xyXG5cclxuICAgICAgbGV0IHNwaGVyZSA9IG5ldyBNZXNoKHNwaGVyZUdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcbiAgICAgIHNwaGVyZS5wb3NpdGlvbi5zZXQoYmFyeUNlbnRlci54LCBiYXJ5Q2VudGVyLnksIGJhcnlDZW50ZXIueik7XHJcbiAgICAgIHNwaGVyZS5uYW1lID0gXCJTcGhlcmVGYWNlX1wiICsgdHJpYW5nbGVOdW1iZXI7XHJcbiAgICAgIHNwaGVyZS51c2VyRGF0YS50eXBlID0gXCJjcmVhdGVNZXNoSGVscGVyc1wiO1xyXG5cclxuICAgICAgZ3JvdXAuYWRkKHNwaGVyZSk7XHJcblxyXG4gICAgICBncm91cC5hZGQodHJpYW5nbGUpO1xyXG4gICAgICBtZXNoLmFkZChncm91cCk7XHJcblxyXG4gICAgICB0aGlzLnRhX1NjZW5lLnNlbGVjdGFibGVPYmplY3RzLnB1c2godHJpYW5nbGUpO1xyXG4gICAgICB0cmlhbmdsZU51bWJlcisrO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UG9pbnRzKG1lc2gpIHtcclxuICBsZXQgcG9pbnRzQXJyYXkgPSBtZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcbiAgbGV0IGl0ZW1TaXplID0gbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLml0ZW1TaXplO1xyXG5cclxuICBsZXQgcG9pbnRzID0gW107XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzQXJyYXkubGVuZ3RoOyBpICs9IGl0ZW1TaXplKSB7XHJcbiAgICBwb2ludHMucHVzaChcclxuICAgICAgbmV3IFZlY3RvcjMocG9pbnRzQXJyYXlbaV0sIHBvaW50c0FycmF5W2kgKyAxXSwgcG9pbnRzQXJyYXlbaSArIDJdKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwb2ludHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFZlcnRpY2VzKHBvaW50cykge1xyXG4gIGxldCB2ZXJ0aWNlcyA9IFtdO1xyXG5cclxuICBwb2ludHMuZm9yRWFjaCgoaW5kZXhQb2ludHMpID0+IHtcclxuICAgIGxldCBlcXVhbCA9IGZhbHNlO1xyXG5cclxuICAgIHZlcnRpY2VzLmZvckVhY2goKGluZGV4VmVydGV4KSA9PiB7XHJcbiAgICAgIGlmIChpbmRleFBvaW50cy5lcXVhbHMoaW5kZXhWZXJ0ZXgpKSB7XHJcbiAgICAgICAgZXF1YWwgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCFlcXVhbCkge1xyXG4gICAgICB2ZXJ0aWNlcy5wdXNoKGluZGV4UG9pbnRzKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHZlcnRpY2VzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRWZXJ0ZXhlc1BvaW50c0luZGV4ZXMocG9pbnRzLCB2ZXJ0aWNlcykge1xyXG4gIGxldCBpbmRleGVzQXJyYXkgPSBbXTtcclxuICB2ZXJ0aWNlcy5tYXAoKGl0ZW1WZXJ0ZXgpID0+IHtcclxuICAgIGxldCBpbmRleGVzID0gW107XHJcbiAgICBwb2ludHMuZm9yRWFjaCgoaXRlbVBvaW50cywgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKGl0ZW1Qb2ludHMuZXF1YWxzKGl0ZW1WZXJ0ZXgpKSBpbmRleGVzLnB1c2goaW5kZXgpO1xyXG4gICAgfSk7XHJcbiAgICBpbmRleGVzQXJyYXkucHVzaChpbmRleGVzKTtcclxuICAgIC8vIG1hcC5zZXQoIGl0ZW1WZXJ0ZXgsIGluZGV4ZXMpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gaW5kZXhlc0FycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiB2ZXJ0ZXhlc0NoYW5nZVBvaW50cyh2ZXJ0aWNlcywgcG9pbnRzLCBWZXJ0ZXhlc1BvaW50c0luZGV4ZXMpIHtcclxuICB2ZXJ0aWNlcy5tYXAoKGl0ZW1WZXJ0ZXgsIGluZGV4KSA9PiB7XHJcbiAgICBsZXQgYXJyYXlJbmRleGVzID0gVmVydGV4ZXNQb2ludHNJbmRleGVzW2luZGV4XTtcclxuXHJcbiAgICBhcnJheUluZGV4ZXMubWFwKChpdGVtKSA9PiAocG9pbnRzW2l0ZW1dID0gaXRlbVZlcnRleCkpO1xyXG4gIH0pO1xyXG5cclxuICBwb2ludHNbMF0gPSB2ZXJ0aWNlc1swXTtcclxuXHJcbiAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gcG9pbnRzQ2hhbmdlQXR0cmlidXRlc1Bvc2l0aW9uKG1lc2gsIHBvaW50cykge1xyXG4gIGxldCBwb3NpdGlvbnMgPSBbXTtcclxuXHJcbiAgcG9pbnRzLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgcG9zaXRpb25zLnB1c2goaXRlbS54KTtcclxuICAgIHBvc2l0aW9ucy5wdXNoKGl0ZW0ueSk7XHJcbiAgICBwb3NpdGlvbnMucHVzaChpdGVtLnopO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgYXJyYXlBdHRyID0gbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG5cclxuICBhcnJheUF0dHIubWFwKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgbWVzaC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5W2luZGV4XSA9IHBvc2l0aW9uc1tpbmRleF07XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVRyaWFuZ2xlKHZlcnRpY2VzLCBtYXRlcmlhbCkge1xyXG4gIGlmICh2ZXJ0aWNlcy5sZW5ndGggIT0gMykge1xyXG4gICAgY29uc29sZS5lcnJvcihcIlZlcnRpY2VzIG11c3QgYmUgYW4gYXJyYXkgb2YgMyBWZWN0b3JzXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdmVydGljZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgaWYgKCFpdGVtLmlzVmVjdG9yMykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiVmVydGljZXMgbXVzdCBiZSBhbiBhcnJheSBvZiAzIFZlY3RvcnNcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgbGV0IHBvc2l0aW9ucyA9IFtdO1xyXG5cclxuICB2ZXJ0aWNlcy5tYXAoKGl0ZW0pID0+IHtcclxuICAgIHBvc2l0aW9ucy5wdXNoKGl0ZW0ueCk7XHJcbiAgICBwb3NpdGlvbnMucHVzaChpdGVtLnkpO1xyXG4gICAgcG9zaXRpb25zLnB1c2goaXRlbS56KTtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcbiAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFxyXG4gICAgXCJwb3NpdGlvblwiLFxyXG4gICAgbmV3IEJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucyksIDMpXHJcbiAgKTtcclxuXHJcbiAgZ2VvbWV0cnkuc2V0SW5kZXgoWzAsIDEsIDJdKTtcclxuXHJcbiAgY29uc3QgbWVzaCA9IG5ldyBNZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG4gIHJldHVybiBtZXNoO1xyXG59XHJcblxyXG5leHBvcnQgeyBNZXNoRWRpdCB9O1xyXG4iLCIvKipcclxuICogQGF1dGhvciBEcmFnb24zREdyYWZmIC8gaHR0cDovL2RyYWdvbjNkZ3JhZmYucnUvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlTWFpbk1lbnUgfSBmcm9tIFwiLi9NYWluTWVudS5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVNYWluVG9vbGJhciB9IGZyb20gXCIuL01haW5Ub29sYmFyLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZU1hbmlwdWxhdGVUb29sYmFyIH0gZnJvbSBcIi4vTWFuaXB1bGF0ZVRvb2xiYXIuanNcIjtcclxuaW1wb3J0IHsgY3JlYXRlQWRkVG9TY2VuZVRvb2xiYXIgfSBmcm9tIFwiLi9BZGRUb1NjZW5lVG9vbGJhci5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVQYXJhbWV0ZXJzVG9vbGJhciB9IGZyb20gXCIuL1BhcmFtZXRlcnNUb29sYmFyLmpzXCI7XHJcbmltcG9ydCB7IGZpbGxHZW9tZXRyeVBhcmFtZXRlcnNUYWIgfSBmcm9tIFwiLi9HZW9tZXRyeVBhcmFtZXRlcnNUYWIuanNcIjtcclxuaW1wb3J0IHsgZmlsbE1hdGVyaWFsUGFyYW1ldGVyc1RhYiB9IGZyb20gXCIuL01hdGVyaWFsUGFyYW1ldGVyc1RhYi5qc1wiO1xyXG5pbXBvcnQgeyBmaWxsR2VuZXJhbFBhcmFtZXRlcnNUYWIgfSBmcm9tIFwiLi9HZW5lcmFsUGFyYW1ldGVyc1RhYi5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVNZXNoRWRpdFRvb2JhciB9IGZyb20gXCIuL01lc2hFZGl0VG9vbGJhci5qc1wiO1xyXG5cclxuY2xhc3MgVEFfVUkge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gc2luZ2xldG9uXHJcbiAgICBpZiAoVEFfVUkuZXhpc3QpIHtcclxuICAgICAgcmV0dXJuIFRBX1VJLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgVEFfVUkuaW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgVEFfVUkuZXhpc3QgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcclxuICB9XHJcblxyXG4gIGluaXQodGFTY2VuZSkge1xyXG4gICAgY3JlYXRlTWFpbk1lbnUodGFTY2VuZSk7XHJcbiAgICBjcmVhdGVNYWluVG9vbGJhcigpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBmaWxsTWFpblRvb2xiYXIodGFTY2VuZSkge1xyXG4gICAgY3JlYXRlTWFuaXB1bGF0ZVRvb2xiYXIodGFTY2VuZSk7XHJcbiAgICBjcmVhdGVBZGRUb1NjZW5lVG9vbGJhcih0YVNjZW5lKTtcclxuICAgIGNyZWF0ZVBhcmFtZXRlcnNUb29sYmFyKCk7XHJcbiAgICBjcmVhdGVNZXNoRWRpdFRvb2Jhcih0YVNjZW5lKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGFkZEVsZW1lbnQocGFyZW50LCBlbGVtZW50TmFtZSwgdGV4dCwgaW1nTGluaywgZnVuYykge1xyXG4gICAgbGV0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudE5hbWUpO1xyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGRvbSk7XHJcblxyXG4gICAgZG9tLmlubmVySFRNTCA9IHRleHQ7XHJcblxyXG4gICAgaWYgKGltZ0xpbmsgIT09IFwiXCIpIHtcclxuICAgICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgIGltZy5zcmMgPSBpbWdMaW5rO1xyXG4gICAgICBkb20uYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICBkb20uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmMsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZG9tO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlRmlsZVNlbGVjdGlvbkJ1dHRvbihwYXJlbnQsIHRleHQgPSBcIkNob29zZSBGaWxlXCIsIGZ1bmMpIHtcclxuICAgIGxldCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSB0ZXh0O1xyXG5cclxuICAgIGxldCBmaWxlQnJvd3NlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGZpbGVCcm93c2VyLnR5cGUgPSBcImZpbGVcIjtcclxuICAgIGZpbGVCcm93c2VyLmNsYXNzTmFtZSA9IFwic2VsZWN0RmlsZVwiO1xyXG4gICAgbGFiZWwuYXBwZW5kQ2hpbGQoZmlsZUJyb3dzZXIpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuYywgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsYWJlbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogY3JlYXRlcyByYWRpbyBidXR0b24gd2l0aCBsYWJlbFxyXG4gICAqIEBwYXJhbSBwYXJhbXMgLSB7IE9iamVjdCB9IHtcclxuICAgKiBcdHBhcmVudDogIHtkb21FbGVtZW50fSxcclxuICAgKlx0dGV4dDoge3N0cmluZ30sXHJcbiAgICpcdGlkOiB7c3RyaW5nfSxcclxuICAgKlx0bmFtZToge3N0cmluZ30sXHJcbiAgICpcdHZhbHVlOiB7c3RyaW5nfSxcclxuICAgKlx0dG9vbHRpcDoge3N0cmluZ30sXHJcbiAgICpcdGltZ0xpbms6ICdwYXRoJ1xyXG4gICAqIH1cclxuICAgKiBAcGFyYW0gZnVuY3Rpb24gZnVuY3Rpb24sIHdoaWNoIHdpbGwgYmUgYXNzaWduIG9uIENsaWNrXHJcbiAgICovXHJcbiAgY3JlYXRlU3dpdGNoQnV0dG9uKHBhcmFtcywgZnVuYykge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihmdW5jICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmFkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICByYWRpby50eXBlID0gXCJyYWRpb1wiO1xyXG4gICAgcmFkaW8ubmFtZSA9IHBhcmFtcy5uYW1lO1xyXG4gICAgcmFkaW8uaWQgPSBwYXJhbXMuaWQ7XHJcbiAgICByYWRpby52YWx1ZSA9IHBhcmFtcy52YWx1ZTtcclxuICAgIHJhZGlvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jKTtcclxuICAgIHBhcmFtcy5wYXJlbnQuYXBwZW5kQ2hpbGQocmFkaW8pO1xyXG5cclxuICAgIGxldCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcclxuICAgIGxhYmVsLmlubmVySFRNTCA9IHBhcmFtcy50ZXh0O1xyXG4gICAgbGFiZWwuaHRtbEZvciA9IHJhZGlvLmlkO1xyXG4gICAgbGFiZWwudGl0bGUgPSBwYXJhbXMudG9vbHRpcDtcclxuICAgIHBhcmFtcy5wYXJlbnQuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgIGlmIChwYXJhbXMuaW1nTGluayAmJiBwYXJhbXMuaW1nTGluayAhPT0gXCJcIikge1xyXG4gICAgICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgaW1nLnNyYyA9IHBhcmFtcy5pbWdMaW5rO1xyXG4gICAgICBsYWJlbC5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByYWRpbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZXMgcmFkaW8gYnV0dG9uIHdpdGggbGFiZWxcclxuICAgKiBAcGFyYW0gcGFyYW1zIC0geyBPYmplY3QgfSB7XHJcbiAgICpcdFx0cGFyZW50OiAge2RvbUVsZW1lbnR9LFxyXG4gICAqXHRcdHRleHQ6IHtzdHJpbmd9LFxyXG4gICAqXHRcdGlkOiAne3N0cmluZ30sXHJcbiAgICpcdFx0bmFtZToge3N0cmluZ30sXHJcbiAgICpcdFx0dmFsdWU6IHtzdHJpbmd9LFxyXG4gICAqXHRcdHRvb2x0aXA6IHtzdHJpbmd9LFxyXG4gICAqXHRcdGltZ0xpbms6ICdwYXRoJ1xyXG4gICAqXHR9LFxyXG4gICAqIEBwYXJhbSBmdW5jdGlvbiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBiZSBhc3NpZ24gb24gQ2xpY2tcclxuICAgKi9cclxuICBjcmVhdGVTdGF5UHJlc3NlZEJ1dHRvbihwYXJhbXMsIGZ1bmMpIHtcclxuICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZnVuYyArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNoZWNrYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgY2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuICAgIGNoZWNrYm94Lm5hbWUgPSBwYXJhbXMubmFtZTtcclxuICAgIGNoZWNrYm94LmlkID0gcGFyYW1zLmlkO1xyXG4gICAgY2hlY2tib3gudmFsdWUgPSBwYXJhbXMudmFsdWU7XHJcbiAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuYyk7XHJcbiAgICBwYXJhbXMucGFyZW50LmFwcGVuZENoaWxkKGNoZWNrYm94KTtcclxuXHJcbiAgICBsZXQgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XHJcbiAgICBsYWJlbC5pbm5lckhUTUwgPSBwYXJhbXMudGV4dDtcclxuICAgIGxhYmVsLmh0bWxGb3IgPSBjaGVja2JveC5pZDtcclxuICAgIGxhYmVsLnRpdGxlID0gcGFyYW1zLnRvb2x0aXA7XHJcbiAgICBwYXJhbXMucGFyZW50LmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICBpZiAocGFyYW1zLmltZ0xpbmsgJiYgcGFyYW1zLmltZ0xpbmsgIT09IFwiXCIpIHtcclxuICAgICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgIGltZy5zcmMgPSBwYXJhbXMuaW1nTGluaztcclxuICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2hlY2tib3g7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDb250YWluZXIoY29udGFpbmVyTmFtZSwgcGFyZW50RWxlbWVudCkge1xyXG4gICAgbGV0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBkb20uY2xhc3NOYW1lID0gY29udGFpbmVyTmFtZTtcclxuICAgIGRvbS5pZCA9IGNvbnRhaW5lck5hbWU7XHJcbiAgICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGRvbSk7XHJcbiAgICByZXR1cm4gZG9tO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUGFyYW1ldGVyc01lbnUoZW50aXR5KSB7XHJcbiAgICAvLyBpZiAoICFlbnRpdHkuZ2VvbWV0cnkucGFyYW1ldGVycykge1xyXG5cclxuICAgIC8vIFx0Y29uc29sZS53YXJuKCBcIk5vIFBhcmFtc1wiICk7XHJcblxyXG4gICAgLy8gXHRyZXR1cm47XHJcblxyXG4gICAgLy8gfVxyXG5cclxuICAgIHRoaXMuZGVsZXRlUGFyYW1ldGVyc01lbnUoKTtcclxuXHJcbiAgICBsZXQgdGFic0J1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhYnNCdXR0b25zXCIpO1xyXG4gICAgdGFic0J1dHRvbnMuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG5cclxuICAgIGlmIChlbnRpdHkuZ2VvbWV0cnkucGFyYW1ldGVycykge1xyXG4gICAgICBmaWxsR2VvbWV0cnlQYXJhbWV0ZXJzVGFiKGVudGl0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1hdGVyaWFsUGFyYW1ldGVyc1RhYihlbnRpdHkpO1xyXG4gICAgZmlsbEdlbmVyYWxQYXJhbWV0ZXJzVGFiKGVudGl0eSk7XHJcbiAgfVxyXG5cclxuICBhZGRQYXJhbWV0ZXJzUm93KG5hbWVPZlBhcmFtZXRlciwgaW5wdXRUeXBlLCB2YWx1ZU9mUGFyYW1ldGVyKSB7XHJcbiAgICBsZXQgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICByb3dEaXYuY2xhc3NOYW1lID0gXCJQYXJhbWV0ZXJzUm93XCI7XHJcblxyXG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgIHJvd0Rpdi5hcHBlbmRDaGlsZCh0ZXh0KTtcclxuICAgIHRleHQuaW5uZXJIVE1MID0gbmFtZU9mUGFyYW1ldGVyO1xyXG5cclxuICAgIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGlucHV0LmlkID0gbmFtZU9mUGFyYW1ldGVyO1xyXG4gICAgaW5wdXQudHlwZSA9IGlucHV0VHlwZTtcclxuXHJcbiAgICByb3dEaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG5cclxuICAgIGlucHV0LnZhbHVlID0gdmFsdWVPZlBhcmFtZXRlcjtcclxuXHJcbiAgICByZXR1cm4gcm93RGl2O1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5wdXQocm93RGl2KSB7XHJcbiAgICBsZXQgaW5wdXQgPSByb3dEaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKTtcclxuICAgIHJldHVybiBpbnB1dFswXTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVBhcmFtZXRlcnNNZW51KGVudGl0eSkge1xyXG4gICAgaWYgKCFlbnRpdHkuZ2VvbWV0cnkucGFyYW1ldGVycykge1xyXG4gICAgICBjb25zb2xlLndhcm4oXCJObyBQYXJhbXNcIik7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHBhcmFtZXRlcnNBcnJheSA9IE9iamVjdC5lbnRyaWVzKGVudGl0eS5nZW9tZXRyeS5wYXJhbWV0ZXJzKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgZG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyYW1ldGVyc0FycmF5W2ldWzBdKTtcclxuXHJcbiAgICAgIGlmIChkb20udHlwZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIGRvbS52YWx1ZSA9IE1hdGgucm91bmQocGFyYW1ldGVyc0FycmF5W2ldWzFdICogMTAwMCkgLyAxMDAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkZWxldGVHZW9tZXRyeVBhcmFtZXRlcnNUYWIoKSB7XHJcbiAgICBsZXQgcm93cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiUGFyYW1ldGVyc0dvZW1ldHJ5Um93c1wiKTtcclxuICAgIGlmIChyb3dzKSByb3dzLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlUGFyYW1ldGVyc01lbnUoKSB7XHJcbiAgICB0aGlzLmRlbGV0ZUdlb21ldHJ5UGFyYW1ldGVyc1RhYigpO1xyXG5cclxuICAgIGxldCByb3dzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJQYXJhbWV0ZXJzTWF0ZXJpYWxSb3dzXCIpO1xyXG4gICAgaWYgKHJvd3MpIHJvd3MucmVtb3ZlKCk7XHJcbiAgICByb3dzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJQYXJhbWV0ZXJzR2VuZXJhbFJvd3NcIik7XHJcbiAgICBpZiAocm93cykgcm93cy5yZW1vdmUoKTtcclxuXHJcbiAgICB0YWJzQnV0dG9ucy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBUQV9VSSB9O1xyXG4iLCIvKipcclxuICogQGF1dGhvciBEcmFnb24zREdyYWZmIC8gaHR0cDovL2RyYWdvbjNkZ3JhZmYucnUvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgT2JqZWN0TG9hZGVyIH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy90aHJlZS9idWlsZC90aHJlZS5tb2R1bGUuanNcIjtcclxuaW1wb3J0IHsgR0xURkV4cG9ydGVyIH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vZXhwb3J0ZXJzL0dMVEZFeHBvcnRlci5qc1wiO1xyXG5pbXBvcnQgeyBUQV9FbnRpdGllcyB9IGZyb20gXCIuLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5pbXBvcnQgeyBUQV9VSSB9IGZyb20gXCIuL1RBX1VJLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVNYWluTWVudSh0YV9zY2VuZSkge1xyXG4gIGxldCBjaGVjayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbk1lbnVcIik7XHJcblxyXG4gIGlmIChjaGVjayAhPT0gbnVsbCkge1xyXG4gICAgY29uc29sZS53YXJuKFwiTWFpbk1lbnUgbWF5IGJlIGNhbGxlZCBvbmx5IG9uY2VcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsZXQgdGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuXHJcbiAgbGV0IG1haW5NZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBtYWluTWVudS5jbGFzc05hbWUgPSBcIm1haW5NZW51XCI7XHJcbiAgbWFpbk1lbnUuaWQgPSBcIm1haW5NZW51XCI7XHJcbiAgLy8gbWFpbk1lbnUuc3R5bGUuaGVpZ2h0ID0gJzE4cHgnO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpbk1lbnUpO1xyXG5cclxuICAvLyBsZXQgYXV0aG9yID0gdGFfVUkuYWRkRWxlbWVudCggbWFpbk1lbnUsICdwJywgJ2F1dGhvciBEcmFnb24zREdyYWZmJywgJycpO1xyXG4gIC8vIGF1dGhvci5jbGFzc05hbWUgPSAnYXV0aG9yJztcclxuXHJcbiAgbGV0IHRpdGxlID0gdGFfVUkuYWRkRWxlbWVudChtYWluTWVudSwgXCJwXCIsIFwiVGVydGl1c0F4aXNcIiwgXCJcIik7XHJcbiAgdGl0bGUuY2xhc3NOYW1lID0gXCJUaXRsZVwiO1xyXG5cclxuICAvLyBsZXQgcmVnaXN0ZXIgPSB0YV9VSS5hZGRFbGVtZW50KCBtYWluTWVudSwgJ3AnLCAnUmVnaXN0ZXInLCAnJyk7XHJcbiAgLy8gcmVnaXN0ZXIuY2xhc3NOYW1lID0gJ2F1dGhvcic7XHJcblxyXG4gIC8vIG1lbnUgYnV0dG9uc1xyXG5cclxuICBsZXQgYnV0dG9uRmlsZSA9IHRhX1VJLmFkZEVsZW1lbnQobWFpbk1lbnUsIFwiYnV0dG9uXCIsIFwiRmlsZVwiLCBcIlwiKTtcclxuXHJcbiAgYnV0dG9uRmlsZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcclxuICAgIGxldCBoZWlnaHRNYWluTWVudSA9IG1haW5NZW51Lm9mZnNldEhlaWdodDtcclxuICAgIGxldCBwb3NpdGlvbkJ1dHRvbkZpbGUgPSBvZmZzZXRQb3NpdGlvbihidXR0b25GaWxlKTtcclxuXHJcbiAgICBmaWxlTWVudS5zdHlsZS5sZWZ0ID0gcG9zaXRpb25CdXR0b25GaWxlWzBdICsgXCJweFwiO1xyXG5cclxuICAgIGZpbGVNZW51LnN0eWxlLnRvcCA9IGhlaWdodE1haW5NZW51IC0gMSArIFwicHhcIjtcclxuICAgIGZpbGVNZW51LnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICB9KTtcclxuICBidXR0b25GaWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoZSkgPT4ge1xyXG4gICAgaWYgKCFlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yZWxhdGVkVGFyZ2V0Lm9mZnNldFBhcmVudC5pZCAhPT0gXCJmaWxlTWVudVwiKSB7XHJcbiAgICAgIGZpbGVNZW51LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBsZXQgYnV0dG9uRWRpdCA9IHRhX1VJLmFkZEVsZW1lbnQobWFpbk1lbnUsIFwiYnV0dG9uXCIsIFwiRWRpdFwiLCBcIlwiKTtcclxuXHJcbiAgYnV0dG9uRWRpdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcclxuICAgIGxldCBoZWlnaHRNYWluTWVudSA9IG1haW5NZW51Lm9mZnNldEhlaWdodDtcclxuXHJcbiAgICBsZXQgcG9zaXRpb25CdXR0b25GaWxlID0gb2Zmc2V0UG9zaXRpb24oYnV0dG9uRWRpdCk7XHJcblxyXG4gICAgZWRpdE1lbnUuc3R5bGUubGVmdCA9IHBvc2l0aW9uQnV0dG9uRmlsZVswXSArIFwicHhcIjtcclxuICAgIGVkaXRNZW51LnN0eWxlLnRvcCA9IGhlaWdodE1haW5NZW51ICsgXCJweFwiO1xyXG5cclxuICAgIGVkaXRNZW51LnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICB9KTtcclxuXHJcbiAgYnV0dG9uRWRpdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgKGUpID0+IHtcclxuICAgIGlmICghZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmVsYXRlZFRhcmdldC5vZmZzZXRQYXJlbnQuaWQgIT09IFwiZWRpdE1lbnVcIikge1xyXG4gICAgICBlZGl0TWVudS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgbGV0IGJ1dHRvblNldHRpbmdzID0gdGFfVUkuYWRkRWxlbWVudChtYWluTWVudSwgXCJidXR0b25cIiwgXCJTZXR0aW5nc1wiLCBcIlwiKTtcclxuICBidXR0b25TZXR0aW5ncy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHt9KTtcclxuXHJcbiAgbGV0IGJ1dHRvbkhlbHAgPSB0YV9VSS5hZGRFbGVtZW50KG1haW5NZW51LCBcImJ1dHRvblwiLCBcIkhlbHBcIiwgXCJcIik7XHJcbiAgYnV0dG9uSGVscC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcclxuICAgIGxldCBoZWlnaHRNYWluTWVudSA9IG1haW5NZW51Lm9mZnNldEhlaWdodDtcclxuICAgIGxldCBwb3NpdGlvbkJ1dHRvbkZpbGUgPSBvZmZzZXRQb3NpdGlvbihidXR0b25IZWxwKTtcclxuXHJcbiAgICBoZWxwTWVudS5zdHlsZS5sZWZ0ID0gcG9zaXRpb25CdXR0b25GaWxlWzBdICsgXCJweFwiO1xyXG5cclxuICAgIGhlbHBNZW51LnN0eWxlLnRvcCA9IGhlaWdodE1haW5NZW51ICsgXCJweFwiO1xyXG4gICAgaGVscE1lbnUuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gIH0pO1xyXG5cclxuICBidXR0b25IZWxwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoZSkgPT4ge1xyXG4gICAgaWYgKCFlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yZWxhdGVkVGFyZ2V0Lm9mZnNldFBhcmVudC5pZCAhPT0gXCJoZWxwTWVudVwiKSB7XHJcbiAgICAgIGhlbHBNZW51LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvL3N1Yk1lbnVzXHJcblxyXG4gIGxldCBmaWxlTWVudSA9IHRhX1VJLmNyZWF0ZUNvbnRhaW5lcihcImZpbGVNZW51XCIsIG1haW5NZW51KTtcclxuICBmaWxlTWVudS5jbGFzc05hbWUgPSBcInN1Yk1haW5NZW51XCI7XHJcblxyXG4gIGZpbGVNZW51LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKCFlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yZWxhdGVkVGFyZ2V0Lm9mZnNldFBhcmVudC5pZCAhPT0gXCJmaWxlTWVudVwiKSB7XHJcbiAgICAgIHRoaXMuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHRhX1VJLmFkZEVsZW1lbnQoXHJcbiAgICBmaWxlTWVudSxcclxuICAgIFwibGFiZWxcIixcclxuICAgIFwiQ2xlYXIgU2NlbmVcIixcclxuICAgIFwiXCIsXHJcbiAgICBjbGVhclNjZW5lXHJcbiAgKTtcclxuICB0YV9VSS5hZGRFbGVtZW50KFxyXG4gICAgZmlsZU1lbnUsXHJcbiAgICBcImxhYmVsXCIsXHJcbiAgICBcIlNhdmUgdG8gZGlza1wiLFxyXG4gICAgXCJcIixcclxuICAgIHNhdmVTY2VuZVRvRGlza1xyXG4gICk7XHJcbiAgdGFfVUkuYWRkRWxlbWVudChcclxuICAgIGZpbGVNZW51LFxyXG4gICAgXCJsYWJlbFwiLFxyXG4gICAgXCJFeHBvcnQgZ2xURlwiLFxyXG4gICAgXCJcIixcclxuICAgIGV4cG9ydEdMVEZcclxuICApO1xyXG5cclxuICB0YV9VSS5jcmVhdGVGaWxlU2VsZWN0aW9uQnV0dG9uKFxyXG4gICAgZmlsZU1lbnUsXHJcbiAgICBcIkxvYWQgc2NlbmUgZnJvbSBkaXNrXCIsXHJcbiAgICBsb2FkU2NlbmVGcm9tRGlza1xyXG4gICk7XHJcbiAgdGFfVUkuY3JlYXRlRmlsZVNlbGVjdGlvbkJ1dHRvbihcclxuICAgIGZpbGVNZW51LFxyXG4gICAgXCJNZXJnZSB3aXRoIHNjZW5lIGZyb20gZGlza1wiLFxyXG4gICAgbWVyZ2VTY2VuZXNcclxuICApO1xyXG5cclxuICBmdW5jdGlvbiBsb2FkU2NlbmVGcm9tRGlzayhlKSB7XHJcbiAgICAvLyBMb2FkaW5nIHNjZW5lLCBjcmVhdGVkIGluIFRlcnRpdXNBeGlzXHJcblxyXG4gICAgdGFfc2NlbmUuY2xlYXJTY2VuZSgpO1xyXG5cclxuICAgIGxvYWRTY2VuZShlKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1lcmdlU2NlbmVzKGUpIHtcclxuICAgIC8vIE1lcmdlIHNjZW5lcywgY3JlYXRlZCBpbiBUZXJ0aXVzQXhpc1xyXG5cclxuICAgIGxvYWRTY2VuZShlKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyU2NlbmUoKSB7XHJcbiAgICBpZiAoY29uZmlybShcIkFsbCBvYmplY3RzIHdpbGwgYmUgZGVsZXRlZC4gQXJlIHlvdSBzaHVyZT9cIikpIHtcclxuICAgICAgdGFfc2NlbmUuY2xlYXJTY2VuZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9hZFNjZW5lKGUpIHtcclxuICAgIGxldCBmaWxlID0gZS5zcmNFbGVtZW50LmZpbGVzWzBdO1xyXG5cclxuICAgIGlmICghZmlsZS5uYW1lLmVuZHNXaXRoKFwiLnRyeHNcIikpIHtcclxuICAgICAgYWxlcnQoXCJGaWxlIGlzIG5vdCBhIFRlcnRpdXNBeGlzIFNjZW5lXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XHJcblxyXG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IGxvYWRlciA9IG5ldyBPYmplY3RMb2FkZXIoKTtcclxuXHJcbiAgICAgIGxldCBsb2FkZWRPYmplY3RzSlNPTiA9IEpTT04ucGFyc2UocmVhZGVyLnJlc3VsdCk7XHJcblxyXG4gICAgICBsb2FkZWRPYmplY3RzSlNPTi5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IGxvYWRlZE9iamVjdCA9IGxvYWRlci5wYXJzZShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgdGFfc2NlbmUuc2NlbmUuYWRkKGxvYWRlZE9iamVjdCk7XHJcblxyXG4gICAgICAgIGlmIChsb2FkZWRPYmplY3QudXNlckRhdGEuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgdGFfc2NlbmUuc2VsZWN0YWJsZU9iamVjdHMucHVzaChsb2FkZWRPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBhbGVydChyZWFkZXIuZXJyb3IpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNhdmVTY2VuZVRvRGlzaygpIHtcclxuICAgIC8vIFNhdmlnIHNjZW5lLCBjcmVhdGVkIGluIFRlcnRpdXNBeGlzXHJcblxyXG4gICAgbGV0IHRhX2VudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcblxyXG4gICAgaWYgKHRhX3NjZW5lLmN1cnJlbnRTZWxlY3Rpb24ub2JqZWN0KSB7XHJcbiAgICAgIHRhX2VudGl0aWVzLnJlbW92ZVNlbGVjdGlvbih0YV9zY2VuZS5jdXJyZW50U2VsZWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY2hpbGRyZW4gPSB0YV9zY2VuZS5zY2VuZS5jaGlsZHJlbjtcclxuICAgIGxldCBlbGVtVG9FeHBvcnQgPSBbXTtcclxuXHJcbiAgICBjaGlsZHJlbi5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGlmIChlbGVtZW50LnVzZXJEYXRhLmNyZWF0ZWRCeVVzZXIpIHtcclxuICAgICAgICBlbGVtVG9FeHBvcnQucHVzaChlbGVtZW50LnRvSlNPTigpKTtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnQudXNlckRhdGEuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgdGFfc2NlbmUuc2VsZWN0YWJsZU9iamVjdHMucHVzaChlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBibG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGVsZW1Ub0V4cG9ydCwgbnVsbCwgMildLCB7XHJcbiAgICAgIHR5cGU6IFwidGV4dC9wbGFpblwiLFxyXG4gICAgfSk7XHJcblxyXG4gICAgc2F2ZUZpbGUoYmxvYiwgXCJTY2VuZVwiLCBcInRyeHNcIik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBleHBvcnRHTFRGKCkge1xyXG4gICAgbGV0IGdsdGZFeHBvcnRlciA9IG5ldyBHTFRGRXhwb3J0ZXIoKTtcclxuXHJcbiAgICBnbHRmRXhwb3J0ZXIucGFyc2UodGFfc2NlbmUuc2NlbmUsIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgbGV0IGdsdGYgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpO1xyXG5cclxuICAgICAgbGV0IGJsb2IgPSBuZXcgQmxvYihbZ2x0Zl0sIHsgdHlwZTogXCJ0ZXh0L3BsYWluXCIgfSk7XHJcblxyXG4gICAgICBzYXZlRmlsZShibG9iLCBcIlNjZW5lXCIsIFwiZ2x0ZlwiKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2F2ZUZpbGUoYmxvYiwgbmFtZSwgZmlsZUV4dGVudGlvbikge1xyXG4gICAgbGV0IGZpbGVOYW1lID0gbmFtZSArIFwiLlwiICsgZmlsZUV4dGVudGlvbjtcclxuXHJcbiAgICBsZXQgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgbGluay5kb3dubG9hZCA9IGZpbGVOYW1lO1xyXG5cclxuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYikge1xyXG4gICAgICB3aW5kb3cubmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgZmlsZU5hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuXHJcbiAgICAgIGxpbmsuY2xpY2soKTtcclxuXHJcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwobGluay5ocmVmKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIGxldCBlZGl0TWVudSA9IHRhX1VJLmNyZWF0ZUNvbnRhaW5lcihcImVkaXRNZW51XCIsIG1haW5NZW51KTtcclxuICBlZGl0TWVudS5jbGFzc05hbWUgPSBcInN1Yk1haW5NZW51XCI7XHJcblxyXG4gIHRhX1VJLmFkZEVsZW1lbnQoXHJcbiAgICBlZGl0TWVudSxcclxuICAgIFwibGFiZWxcIixcclxuICAgIFwiQ2xvbmUgb2JqZWN0XCIsXHJcbiAgICBcIlwiLFxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgdGFfZW50aXRpZXMgPSBuZXcgVEFfRW50aXRpZXMoKTtcclxuICAgICAgdGFfZW50aXRpZXMuY2xvbmVPYmplY3QodGFfc2NlbmUpO1xyXG4gICAgfVxyXG4gICk7XHJcbiAgZWRpdE1lbnUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoIWUucmVsYXRlZFRhcmdldCB8fCBlLnJlbGF0ZWRUYXJnZXQub2Zmc2V0UGFyZW50LmlkICE9PSBcImVkaXRNZW51XCIpIHtcclxuICAgICAgdGhpcy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLVxyXG5cclxuICBsZXQgaGVscE1lbnUgPSB0YV9VSS5jcmVhdGVDb250YWluZXIoXCJoZWxwTWVudVwiLCBtYWluTWVudSk7XHJcbiAgaGVscE1lbnUuY2xhc3NOYW1lID0gXCJzdWJNYWluTWVudVwiO1xyXG5cclxuICBoZWxwTWVudS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmICghZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmVsYXRlZFRhcmdldC5vZmZzZXRQYXJlbnQuaWQgIT09IFwiZmlsZU1lbnVcIikge1xyXG4gICAgICB0aGlzLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0YV9VSS5hZGRFbGVtZW50KGhlbHBNZW51LCBcImxhYmVsXCIsIFwiQWJvdXRcIiwgXCJcIiwgYWJvdXRPcGVuKTtcclxuXHJcbiAgZnVuY3Rpb24gYWJvdXRPcGVuKCkge1xyXG4gICAgd2luZG93Lm9wZW4oXCJodHRwczovL2RyYWdvbjNkZ3JhZmYucnUvXCIpO1xyXG4gIH1cclxuXHJcbiAgLy89PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gb2Zmc2V0UG9zaXRpb24oZWxlbWVudCkge1xyXG4gICAgdmFyIG9mZnNldExlZnQgPSAwLFxyXG4gICAgICBvZmZzZXRUb3AgPSAwO1xyXG5cclxuICAgIGRvIHtcclxuICAgICAgb2Zmc2V0TGVmdCArPSBlbGVtZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgIG9mZnNldFRvcCArPSBlbGVtZW50Lm9mZnNldFRvcDtcclxuICAgIH0gd2hpbGUgKChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpKTtcclxuXHJcbiAgICByZXR1cm4gW29mZnNldExlZnQsIG9mZnNldFRvcF07XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhcIk1haW5NZW51IGNyZWF0ZWRcIik7XHJcblxyXG4gIHJldHVybiBtYWluTWVudTtcclxufVxyXG5cclxuZXhwb3J0IHsgY3JlYXRlTWFpbk1lbnUgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVEFfVUkuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU1haW5Ub29sYmFyKCkge1xyXG4gIGxldCBjaGVjayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpblRvb2xiYXJcIik7XHJcblxyXG4gIGlmIChjaGVjayAhPT0gbnVsbCkge1xyXG4gICAgY29uc29sZS53YXJuKFwiTWFpblRvb2xiYXIgbWF5IGJlIGNhbGxlZCBvbmx5IG9uY2VcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsZXQgdGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuXHJcbiAgbGV0IG1haW5Ub29sYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgbWFpblRvb2xiYXIuY2xhc3NOYW1lID0gXCJtYWluVG9vbGJhclwiO1xyXG4gIG1haW5Ub29sYmFyLmlkID0gXCJtYWluVG9vbGJhclwiO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpblRvb2xiYXIpO1xyXG5cclxuICBsZXQgaGlkZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgaGlkZUJ1dHRvbi5jbGFzc05hbWUgPSBcImhpZGVCdXR0b25cIjtcclxuICBoaWRlQnV0dG9uLmlkID0gXCJoaWRlQnV0dG9uXCI7XHJcbiAgaGlkZUJ1dHRvbi5pbm5lckhUTUwgPSBcIiYjOTY2OFwiO1xyXG4gIG1haW5Ub29sYmFyLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xyXG4gIGhpZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBpZiAobWFpblRvb2xiYXIuc3R5bGUubGVmdCA9PT0gXCIwcHhcIikge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbW92ZUFuaW0oKSB7XHJcbiAgICAgICAgbGV0IHBvcyA9IG1haW5Ub29sYmFyLnN0eWxlLmxlZnQucmVwbGFjZShcInB4XCIsIFwiXCIpO1xyXG4gICAgICAgIHBvcyAtPSAxMDtcclxuICAgICAgICBtYWluVG9vbGJhci5zdHlsZS5sZWZ0ID0gcG9zICsgXCJweFwiO1xyXG5cclxuICAgICAgICBpZiAobWFpblRvb2xiYXIuc3R5bGUubGVmdC5yZXBsYWNlKFwicHhcIiwgXCJcIikgPiAtMjUwKSB7XHJcbiAgICAgICAgICBoaWRlQnV0dG9uLmlubmVySFRNTCA9IFwiJiM5NjU4XCI7XHJcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZUFuaW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtYWluVG9vbGJhci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcclxuICAgICAgaGlkZUJ1dHRvbi5pbm5lckhUTUwgPSBcIiYjOTY2OFwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIG1haW5Ub29sYmFyLmFwcGVuZENoaWxkKGhpZGVCdXR0b24pO1xyXG5cclxuICBsZXQgaW5mb0RpdiA9IHRhX1VJLmNyZWF0ZUNvbnRhaW5lcihcImluZm9cIiwgbWFpblRvb2xiYXIpO1xyXG4gIGxldCBwYXJhZ3JhcGggPSB0YV9VSS5hZGRFbGVtZW50KGluZm9EaXYsIFwicFwiLCBcIlwiLCBcIlwiKTtcclxuICBwYXJhZ3JhcGguaWQgPSBcImluZm9QYXJhZ3JhcGhcIjtcclxuXHJcbiAgbGV0IG1haW5Db250YWluZXIgPSB0YV9VSS5jcmVhdGVDb250YWluZXIoXCJtYWluQ29udGFpbmVyXCIsIG1haW5Ub29sYmFyKTtcclxuXHJcbiAgY29uc29sZS5sb2coXCJNYWluVG9vbGJhciBjcmVhdGVkXCIpO1xyXG5cclxuICAvLyByZXR1cm4gbWFpblRvb2xiYXI7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGNyZWF0ZU1haW5Ub29sYmFyIH07XHJcbiIsIi8qKlxyXG4gKiBAYXV0aG9yIERyYWdvbjNER3JhZmYgLyBodHRwOi8vZHJhZ29uM2RncmFmZi5ydS9cclxuICovXHJcblxyXG5pbXBvcnQgeyBUQV9VSSB9IGZyb20gXCIuL1RBX1VJLmpzXCI7XHJcbmltcG9ydCB7IFRBX0VudGl0aWVzIH0gZnJvbSBcIi4uL0VudGl0aWVzL1RBX0VudGl0aWVzLmpzXCI7XHJcbmltcG9ydCAqIGFzIEFjdGlvbnMgZnJvbSBcIi4uL0FjdGlvbnMuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU1hbmlwdWxhdGVUb29sYmFyKHRhU2NlbmUpIHtcclxuICBsZXQgY2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIk1hbmlwdWxhdGVUb29sYmFyXCIpO1xyXG5cclxuICBpZiAoY2hlY2sgIT09IG51bGwpIHtcclxuICAgIGNvbnNvbGUud2FybihcIk1hbmlwdWxhdGVUb29sYmFyIG1heSBiZSBjYWxsZWQgb25seSBvbmNlXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcblxyXG4gIGxldCBtYW5pcHVsYXRpbmdDb250YWluZXIgPSB0YV9VSS5jcmVhdGVDb250YWluZXIoXHJcbiAgICBcIk1hbmlwdWxhdGVUb29sYmFyXCIsXHJcbiAgICBtYWluQ29udGFpbmVyXHJcbiAgKTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMuc2VsZWN0QnV0dG9uID0gdGFfVUkuY3JlYXRlU3dpdGNoQnV0dG9uKFxyXG4gICAge1xyXG4gICAgICBwYXJlbnQ6IG1hbmlwdWxhdGluZ0NvbnRhaW5lcixcclxuICAgICAgdGV4dDogXCJTZWxlY3RcIixcclxuICAgICAgaWQ6IFwiU2VsZWN0XCIsXHJcbiAgICAgIG5hbWU6IFwibWFudXB1bGF0ZVJhZGlvXCIsXHJcbiAgICAgIHZhbHVlOiBcIlNlbGVjdFwiLFxyXG4gICAgICB0b29sdGlwOiBcIlNlbGVjdFwiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIHN3aXRjaE1vZGVcclxuICApO1xyXG4gIC8vIHRhX1VJLmVsZW1lbnRzLnNlbGVjdEJ1dHRvbi5jaGVja2VkID0gdHJ1ZTtcclxuICAvLyB0YV9VSS5lbGVtZW50cy5zZWxlY3RCdXR0b24uY2hlY2tlZCA9IGZhbHNlO1xyXG5cclxuICB0YV9VSS5lbGVtZW50cy5tb3ZlQnV0dG9uID0gdGFfVUkuY3JlYXRlU3dpdGNoQnV0dG9uKFxyXG4gICAge1xyXG4gICAgICBwYXJlbnQ6IG1hbmlwdWxhdGluZ0NvbnRhaW5lcixcclxuICAgICAgdGV4dDogXCJNb3ZlXCIsXHJcbiAgICAgIGlkOiBcIk1vdmVcIixcclxuICAgICAgbmFtZTogXCJtYW51cHVsYXRlUmFkaW9cIixcclxuICAgICAgdmFsdWU6IFwiTW92ZVwiLFxyXG4gICAgICB0b29sdGlwOiBcIk1vdmUobSlcIixcclxuICAgICAgaW1nTGluazogXCJcIixcclxuICAgIH0sXHJcbiAgICBzd2l0Y2hNb2RlXHJcbiAgKTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMucm90YXRlQnV0dG9uID0gdGFfVUkuY3JlYXRlU3dpdGNoQnV0dG9uKFxyXG4gICAge1xyXG4gICAgICBwYXJlbnQ6IG1hbmlwdWxhdGluZ0NvbnRhaW5lcixcclxuICAgICAgdGV4dDogXCJSb3RhdGVcIixcclxuICAgICAgaWQ6IFwiUm90YXRlXCIsXHJcbiAgICAgIG5hbWU6IFwibWFudXB1bGF0ZVJhZGlvXCIsXHJcbiAgICAgIHZhbHVlOiBcIlJvdGF0ZVwiLFxyXG4gICAgICB0b29sdGlwOiBcIlJvdGF0ZShyKVwiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIHN3aXRjaE1vZGVcclxuICApO1xyXG5cclxuICB0YV9VSS5lbGVtZW50cy5zY2FsZUJ1dHRvbiA9IHRhX1VJLmNyZWF0ZVN3aXRjaEJ1dHRvbihcclxuICAgIHtcclxuICAgICAgcGFyZW50OiBtYW5pcHVsYXRpbmdDb250YWluZXIsXHJcbiAgICAgIHRleHQ6IFwiU2NhbGVcIixcclxuICAgICAgaWQ6IFwiU2NhbGVcIixcclxuICAgICAgbmFtZTogXCJtYW51cHVsYXRlUmFkaW9cIixcclxuICAgICAgdmFsdWU6IFwiU2NhbGVcIixcclxuICAgICAgdG9vbHRpcDogXCJTY2FsZShzKVwiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIHN3aXRjaE1vZGVcclxuICApO1xyXG5cclxuICB0YV9VSS5lbGVtZW50cy5kcmFnQnV0dG9uID0gdGFfVUkuY3JlYXRlU3RheVByZXNzZWRCdXR0b24oXHJcbiAgICB7XHJcbiAgICAgIHBhcmVudDogbWFuaXB1bGF0aW5nQ29udGFpbmVyLFxyXG4gICAgICB0ZXh0OiBcIkRyYWdcIixcclxuICAgICAgaWQ6IFwiZHJhZ0NoZWNrXCIsXHJcbiAgICAgIG5hbWU6IFwiZHJhZ0NoZWNrXCIsXHJcbiAgICAgIHZhbHVlOiBcImRyYWdDaGVja1wiLFxyXG4gICAgICB0b29sdGlwOiBcIihkKVwiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIHN3aXRjaERyYWdcclxuICApO1xyXG5cclxuICBmdW5jdGlvbiBzd2l0Y2hNb2RlKHNlbGVjdGVkUmFkaW8pIHtcclxuICAgIGxldCBzZWxlY3RlZEJ1dHRvbiA9IHNlbGVjdGVkUmFkaW8udGFyZ2V0LmlkO1xyXG5cclxuICAgIHN3aXRjaCAoc2VsZWN0ZWRCdXR0b24pIHtcclxuICAgICAgY2FzZSBcIlNlbGVjdFwiOlxyXG4gICAgICAgIEFjdGlvbnMuc3dpdGNoT25TZWxlY3RNb2RlKHRhU2NlbmUpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgXCJNb3ZlXCI6XHJcbiAgICAgICAgQWN0aW9ucy5zd2l0Y2hPbk1vdmVNb2RlKHRhU2NlbmUpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgXCJSb3RhdGVcIjpcclxuICAgICAgICBBY3Rpb25zLnN3aXRjaE9uUm90YXRpb25Nb2RlKHRhU2NlbmUpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgXCJTY2FsZVwiOlxyXG4gICAgICAgIEFjdGlvbnMuc3dpdGNoT25TY2FsZU1vZGUodGFTY2VuZSk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN3aXRjaERyYWcoKSB7XHJcbiAgICBBY3Rpb25zLnN3aXRjaERyYWdNb2RlKHRoaXMuY2hlY2tlZCwgdGFTY2VuZSk7XHJcbiAgfVxyXG5cclxuICBjb25zb2xlLmxvZyhcIk1hbmlwdWxhdGVUb29sYmFyIGNyZWF0ZWRcIik7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGNyZWF0ZU1hbmlwdWxhdGVUb29sYmFyIH07XHJcbiIsIi8qKlxyXG4gKiBAYXV0aG9yIERyYWdvbjNER3JhZmYgLyBodHRwOi8vZHJhZ29uM2RncmFmZi5ydS9cclxuICovXHJcblxyXG5pbXBvcnQgeyBUQV9VSSB9IGZyb20gXCIuL1RBX1VJLmpzXCI7XHJcbmltcG9ydCBjdWJlSWNvIGZyb20gXCIuLi9pY28vY3ViZWljby5wbmdcIjtcclxuaW1wb3J0IHNwaGVyZUljbyBmcm9tIFwiLi4vaWNvL3NwaGVyZWljby5wbmdcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vVEFfU3RhdGUuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFkZFRvU2NlbmVUb29sYmFyKHRhU2NlbmUpIHtcclxuICBsZXQgY2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkFkZFRvU2NlbmVUb29sYmFyXCIpO1xyXG5cclxuICBpZiAoY2hlY2sgIT09IG51bGwpIHtcclxuICAgIGNvbnNvbGUud2FybihcIkFkZFRvU2NlbmVUb29sYmFyIG1heSBiZSBjYWxsZWQgb25seSBvbmNlXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcbiAgbGV0IHRhX1N0YXRlID0gbmV3IFRBX1N0YXRlKCk7XHJcblxyXG4gIGxldCBhZGRUb1NjZW5lQ29udGFpbmVyID0gdGFfVUkuY3JlYXRlQ29udGFpbmVyKFwic2VjdGlvbkRpdlwiLCBtYWluQ29udGFpbmVyKTtcclxuICBhZGRUb1NjZW5lQ29udGFpbmVyLmlkID0gXCJBZGRUb1NjZW5lVG9vbGJhclwiO1xyXG5cclxuICBsZXQgdGl0bGUgPSB0YV9VSS5hZGRFbGVtZW50KFxyXG4gICAgYWRkVG9TY2VuZUNvbnRhaW5lcixcclxuICAgIFwicFwiLFxyXG4gICAgXCJBZGQgdG8gc2NlbmUgJiM5NjUwXCIsXHJcbiAgICBcIlwiXHJcbiAgKTtcclxuICB0aXRsZS5jbGFzc05hbWUgPSBcInNlY3Rpb25OYW1lXCI7XHJcblxyXG4gIHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICBcImNsaWNrXCIsXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxldCBhZGRUb1NjZW5lQnV0dG9ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkVG9TY2VuZUJ1dHRvbnNcIik7XHJcblxyXG4gICAgICBpZiAoYWRkVG9TY2VuZUJ1dHRvbnMuc3R5bGUuZGlzcGxheSA9PT0gXCJncmlkXCIpIHtcclxuICAgICAgICBhZGRUb1NjZW5lQnV0dG9ucy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCJBZGQgdG8gc2NlbmUgJiM5NjYwXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWRkVG9TY2VuZUJ1dHRvbnMuc3R5bGUuZGlzcGxheSA9IFwiZ3JpZFwiO1xyXG5cclxuICAgICAgICB0aGlzLmlubmVySFRNTCA9IFwiQWRkIHRvIHNjZW5lICYjOTY1MFwiO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmFsc2VcclxuICApO1xyXG5cclxuICBsZXQgYnV0dG9uc0RpdiA9IHRhX1VJLmFkZEVsZW1lbnQoYWRkVG9TY2VuZUNvbnRhaW5lciwgXCJmb3JtXCIsIFwiXCIsIFwiXCIpO1xyXG4gIGJ1dHRvbnNEaXYuY2xhc3NOYW1lID0gXCJidXR0b25zRGl2XCI7XHJcbiAgYnV0dG9uc0Rpdi5pZCA9IFwiYWRkVG9TY2VuZUJ1dHRvbnNcIjtcclxuICBidXR0b25zRGl2LnN0eWxlLmRpc3BsYXkgPSBcImdyaWRcIjtcclxuXHJcbiAgbGV0IHByaW1pdGl2ZXNOYW1lc0ZvckJ1dHRvbnMgPSBbXHJcbiAgICB7IHRleHQ6IFwiXCIsIHR5cGU6IFwiQm94QnVmZmVyR2VvbWV0cnlcIiwgaW1nTGluazogY3ViZUljbywgYWN0aXZlOiB0cnVlIH0sXHJcbiAgICB7XHJcbiAgICAgIHRleHQ6IFwiXCIsXHJcbiAgICAgIHR5cGU6IFwiU3BoZXJlQnVmZmVyR2VvbWV0cnlcIixcclxuICAgICAgaW1nTGluazogc3BoZXJlSWNvLFxyXG4gICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgeyB0ZXh0OiBcIkNpcmNsZVwiLCB0eXBlOiBcIkNpcmNsZUJ1ZmZlckdlb21ldHJ5XCIsIGltZ0xpbms6IFwiXCIsIGFjdGl2ZTogdHJ1ZSB9LFxyXG4gICAgeyB0ZXh0OiBcIkNvbmVcIiwgdHlwZTogXCJDb25lQnVmZmVyR2VvbWV0cnlcIiwgaW1nTGluazogXCJcIiwgYWN0aXZlOiB0cnVlIH0sXHJcbiAgICB7XHJcbiAgICAgIHRleHQ6IFwiQ3lsaW5kZXJcIixcclxuICAgICAgdHlwZTogXCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5XCIsXHJcbiAgICAgIGltZ0xpbms6IFwiXCIsXHJcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICB7IHRleHQ6IFwiVG9ydXNcIiwgdHlwZTogXCJUb3J1c0J1ZmZlckdlb21ldHJ5XCIsIGltZ0xpbms6IFwiXCIsIGFjdGl2ZTogdHJ1ZSB9LFxyXG4gICAge1xyXG4gICAgICB0ZXh0OiBcIjQtaGVkcm9uXCIsXHJcbiAgICAgIHR5cGU6IFwiVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVwiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0ZXh0OiBcIjgtaGVkcm9uXCIsXHJcbiAgICAgIHR5cGU6IFwiT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCIsXHJcbiAgICAgIGltZ0xpbms6IFwiXCIsXHJcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRleHQ6IFwiMTItaGVkcm9uXCIsXHJcbiAgICAgIHR5cGU6IFwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIixcclxuICAgICAgaW1nTGluazogXCJcIixcclxuICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGV4dDogXCIyMC1oZWRyb25cIixcclxuICAgICAgdHlwZTogXCJJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCIsXHJcbiAgICAgIGltZ0xpbms6IFwiXCIsXHJcbiAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICB7IHRleHQ6IFwiUGxhbmVcIiwgdHlwZTogXCJQbGFuZUJ1ZmZlckdlb21ldHJ5XCIsIGltZ0xpbms6IFwiXCIsIGFjdGl2ZTogZmFsc2UgfSxcclxuICAgIHsgdGV4dDogXCJSaW5nXCIsIHR5cGU6IFwiUmluZ0J1ZmZlckdlb21ldHJ5XCIsIGltZ0xpbms6IFwiXCIsIGFjdGl2ZTogZmFsc2UgfSxcclxuICAgIHsgdGV4dDogXCJTaGFwZVwiLCB0eXBlOiBcIlNoYXBlQnVmZmVyR2VvbWV0cnlcIiwgaW1nTGluazogXCJcIiB9LFxyXG4gICAgeyB0ZXh0OiBcIlRleHRcIiwgdHlwZTogXCJUZXh0QnVmZmVyR2VvbWV0cnlcIiwgaW1nTGluazogXCJcIiwgYWN0aXZlOiBmYWxzZSB9LFxyXG4gICAge1xyXG4gICAgICB0ZXh0OiBcIlRvcnVzS25vdFwiLFxyXG4gICAgICB0eXBlOiBcIlRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5XCIsXHJcbiAgICAgIGltZ0xpbms6IFwiXCIsXHJcbiAgICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICB9LFxyXG4gICAgeyB0ZXh0OiBcIlR1YmVcIiwgdHlwZTogXCJUdWJlQnVmZmVyR2VvbWV0cnlcIiwgaW1nTGluazogXCJcIiwgYWN0aXZlOiBmYWxzZSB9LFxyXG4gIF07XHJcblxyXG4gIHByaW1pdGl2ZXNOYW1lc0ZvckJ1dHRvbnMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKGVsZW1lbnQuYWN0aXZlKSB7XHJcbiAgICAgIHRhX1VJLmVsZW1lbnRzW2VsZW1lbnQudHlwZV0gPSB0YV9VSS5jcmVhdGVTd2l0Y2hCdXR0b24oXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcGFyZW50OiBidXR0b25zRGl2LFxyXG4gICAgICAgICAgdGV4dDogZWxlbWVudC50ZXh0LFxyXG4gICAgICAgICAgaWQ6IGVsZW1lbnQudHlwZSxcclxuICAgICAgICAgIG5hbWU6IFwiYWRkVG9TY2VuZVwiLFxyXG4gICAgICAgICAgdmFsdWU6IGVsZW1lbnQudHlwZSxcclxuICAgICAgICAgIHRvb2x0aXA6IGVsZW1lbnQudHlwZSxcclxuICAgICAgICAgIGltZ0xpbms6IGVsZW1lbnQuaW1nTGluayxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uIChzZWxlY3RlZFJhZGlvKSB7XHJcbiAgICAgICAgICBsZXQgc2VsZWN0ZWRCdXR0b24gPSBzZWxlY3RlZFJhZGlvLnRhcmdldDtcclxuXHJcbiAgICAgICAgICBpZiAodGFfU3RhdGUuYXBwTW9kZS5tZXNoRWRpdCkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZEJ1dHRvbi5mb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRCdXR0b24uaWQgPT09IHRhU2NlbmUubW9kZS5lbnRpdHkpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRCdXR0b24uZm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgICB0YV9VSS5lbGVtZW50cy5maW5pc2hCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0YVNjZW5lLm1vZGUuYWN0aW9uID0gXCJzZWxlY3RcIjtcclxuICAgICAgICAgICAgdGFTY2VuZS5tb2RlLmVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YVNjZW5lLm1vZGUuYWN0aW9uID0gXCJjcmVhdGlvbkVudGl0eVwiO1xyXG4gICAgICAgICAgICB0YVNjZW5lLm1vZGUuZW50aXR5ID0gc2VsZWN0ZWRCdXR0b24uaWQ7XHJcbiAgICAgICAgICAgIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMuZmluaXNoQnV0dG9uID0gdGFfVUkuYWRkRWxlbWVudChcclxuICAgIGJ1dHRvbnNEaXYsXHJcbiAgICBcImJ1dHRvblwiLFxyXG4gICAgXCJGaW5pc2hcIixcclxuICAgIFwiXCIsXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICB0YVNjZW5lLm1vZGUuYWN0aW9uID0gXCJzZWxlY3RcIjtcclxuICAgICAgdGFTY2VuZS5tb2RlLmVudGl0eSA9IG51bGw7XHJcbiAgICB9XHJcbiAgKTtcclxuICB0YV9VSS5lbGVtZW50cy5maW5pc2hCdXR0b24uaWQgPSBcIkZpbmlzaFwiO1xyXG4gIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5jbGFzc05hbWUgPSBcImZpbmlzaEJ1dHRvblwiO1xyXG4gIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi50eXBlID0gXCJyZXNldFwiO1xyXG4gIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiQWRkVG9TY2VuZVRvb2xiYXIgY3JlYXRlZFwiKTtcclxuXHJcbiAgcmV0dXJuIGFkZFRvU2NlbmVDb250YWluZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGNyZWF0ZUFkZFRvU2NlbmVUb29sYmFyIH07XHJcbiIsIi8qKlxyXG4gKiBAYXV0aG9yIERyYWdvbjNER3JhZmYgLyBodHRwOi8vZHJhZ29uM2RncmFmZi5ydS9cclxuICovXHJcblxyXG5pbXBvcnQgeyBUQV9VSSB9IGZyb20gXCIuL1RBX1VJLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVQYXJhbWV0ZXJzVG9vbGJhcigpIHtcclxuICBsZXQgY2hlY2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFtQ29udGFpbmVyXCIpO1xyXG5cclxuICBpZiAoY2hlY2sgIT09IG51bGwpIHtcclxuICAgIGNvbnNvbGUud2FybihcInBhcmFtQ29udGFpbmVyIG1heSBiZSBjYWxsZWQgb25seSBvbmNlXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcblxyXG4gIGxldCBwYXJhbUNvbnRhaW5lciA9IHRhX1VJLmNyZWF0ZUNvbnRhaW5lcihcInBhcmFtQ29udGFpbmVyXCIsIG1haW5Db250YWluZXIpO1xyXG4gIHBhcmFtQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwicGFyYW1Db250YWluZXJcIjtcclxuXHJcbiAgbGV0IHRpdGxlID0gdGFfVUkuYWRkRWxlbWVudChcclxuICAgIHBhcmFtQ29udGFpbmVyLFxyXG4gICAgXCJwXCIsXHJcbiAgICBcIk9iamVjdCBwYXJhbWV0ZXJzICYjOTY1MFwiLFxyXG4gICAgXCJcIlxyXG4gICk7XHJcbiAgdGl0bGUuY2xhc3NOYW1lID0gXCJzZWN0aW9uTmFtZVwiO1xyXG5cclxuICB0aXRsZS5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgXCJjbGlja1wiLFxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgYWRkVG9TY2VuZUJ1dHRvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFtc0RpdlwiKTtcclxuXHJcbiAgICAgIGlmIChhZGRUb1NjZW5lQnV0dG9ucy5zdHlsZS5kaXNwbGF5ID09PSBcImJsb2NrXCIpIHtcclxuICAgICAgICBhZGRUb1NjZW5lQnV0dG9ucy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBcIk9iamVjdCBwYXJhbWV0ZXJzICYjOTY2MFwiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFkZFRvU2NlbmVCdXR0b25zLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gXCJPYmplY3QgcGFyYW1ldGVycyAmIzk2NTBcIjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZhbHNlXHJcbiAgKTtcclxuXHJcbiAgbGV0IHBhcmFtc0RpdiA9IHRhX1VJLmFkZEVsZW1lbnQocGFyYW1Db250YWluZXIsIFwiZGl2XCIsIFwiXCIsIFwiXCIpO1xyXG4gIHBhcmFtc0Rpdi5pZCA9IFwicGFyYW1zRGl2XCI7XHJcbiAgcGFyYW1zRGl2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gIGxldCB0YWJzQnV0dG9ucyA9IHRhX1VJLmFkZEVsZW1lbnQocGFyYW1zRGl2LCBcImRpdlwiLCBcIlwiLCBcIlwiKTtcclxuICB0YWJzQnV0dG9ucy5jbGFzc05hbWUgPSBcInRhYnNCdXR0b25zXCI7XHJcbiAgdGFic0J1dHRvbnMuaWQgPSBcInRhYnNCdXR0b25zXCI7XHJcbiAgdGFic0J1dHRvbnMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICBsZXQgdGFiR2VvbWV0cnkgPSB0YV9VSS5hZGRFbGVtZW50KFxyXG4gICAgdGFic0J1dHRvbnMsXHJcbiAgICBcImJ1dHRvblwiLFxyXG4gICAgXCJHZW9tZXRyeVwiLFxyXG4gICAgXCJcIixcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnZGFya3NsYXRlZ3JleSc7XHJcblxyXG4gICAgICBsZXQgZGl2R2VvbWV0cnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkdlb21ldHJ5UGFyYW1ldGVyc1wiKTtcclxuICAgICAgZGl2R2VvbWV0cnkuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgdGFiR2VvbWV0cnkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJkYXJrc2xhdGVncmV5XCI7XHJcbiAgICAgIGxldCBkaXZNYXRlcmlhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiTWF0ZXJpYWxQYXJhbWV0ZXJzXCIpO1xyXG4gICAgICBkaXZNYXRlcmlhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIHRhYk1hdGVyaWFsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDUxLCA1MSwgNTEpXCI7XHJcbiAgICAgIGxldCBkaXZHZW5lcmFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJHZW5lcmFsUGFyYW1ldGVyc1wiKTtcclxuICAgICAgZGl2R2VuZXJhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIHRhYkdlbmVyYWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoNTEsIDUxLCA1MSlcIjtcclxuICAgIH1cclxuICApO1xyXG4gIGxldCB0YWJNYXRlcmlhbCA9IHRhX1VJLmFkZEVsZW1lbnQoXHJcbiAgICB0YWJzQnV0dG9ucyxcclxuICAgIFwiYnV0dG9uXCIsXHJcbiAgICBcIk1hdGVyaWFsXCIsXHJcbiAgICBcIlwiLFxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyB0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdkYXJrc2xhdGVncmV5JztcclxuXHJcbiAgICAgIGxldCBkaXZHZW9tZXRyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiR2VvbWV0cnlQYXJhbWV0ZXJzXCIpO1xyXG4gICAgICBkaXZHZW9tZXRyeS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIHRhYkdlb21ldHJ5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDUxLCA1MSwgNTEpXCI7XHJcbiAgICAgIGxldCBkaXZNYXRlcmlhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiTWF0ZXJpYWxQYXJhbWV0ZXJzXCIpO1xyXG4gICAgICBkaXZNYXRlcmlhbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICB0YWJNYXRlcmlhbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImRhcmtzbGF0ZWdyZXlcIjtcclxuICAgICAgbGV0IGRpdkdlbmVyYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkdlbmVyYWxQYXJhbWV0ZXJzXCIpO1xyXG4gICAgICBkaXZHZW5lcmFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgdGFiR2VuZXJhbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYig1MSwgNTEsIDUxKVwiO1xyXG4gICAgfVxyXG4gICk7XHJcbiAgbGV0IHRhYkdlbmVyYWwgPSB0YV9VSS5hZGRFbGVtZW50KFxyXG4gICAgdGFic0J1dHRvbnMsXHJcbiAgICBcImJ1dHRvblwiLFxyXG4gICAgXCJHZW5lcmFsXCIsXHJcbiAgICBcIlwiLFxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgZGl2R2VvbWV0cnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkdlb21ldHJ5UGFyYW1ldGVyc1wiKTtcclxuICAgICAgZGl2R2VvbWV0cnkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICB0YWJHZW9tZXRyeS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYig1MSwgNTEsIDUxKVwiO1xyXG4gICAgICBsZXQgZGl2TWF0ZXJpYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIk1hdGVyaWFsUGFyYW1ldGVyc1wiKTtcclxuICAgICAgZGl2TWF0ZXJpYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICB0YWJNYXRlcmlhbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYig1MSwgNTEsIDUxKVwiO1xyXG4gICAgICBsZXQgZGl2R2VuZXJhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiR2VuZXJhbFBhcmFtZXRlcnNcIik7XHJcbiAgICAgIGRpdkdlbmVyYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgdGFiR2VuZXJhbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImRhcmtzbGF0ZWdyZXlcIjtcclxuICAgIH1cclxuICApO1xyXG5cclxuICBsZXQgdGFicyA9IHRhX1VJLmFkZEVsZW1lbnQocGFyYW1zRGl2LCBcImRpdlwiLCBcIlwiLCBcIlwiKTtcclxuICB0YWJzLmNsYXNzTmFtZSA9IFwidGFic1wiO1xyXG4gIHRhYnMuaWQgPSBcInRhYnNcIjtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMuZ2VvbWV0cnlQYXJhbWV0ZXJzID0gdGFfVUkuYWRkRWxlbWVudCh0YWJzLCBcImRpdlwiLCBcIlwiLCBcIlwiKTtcclxuICB0YV9VSS5lbGVtZW50cy5nZW9tZXRyeVBhcmFtZXRlcnMuY2xhc3NOYW1lID0gXCJHZW9tZXRyeVBhcmFtZXRlcnNcIjtcclxuICB0YV9VSS5lbGVtZW50cy5nZW9tZXRyeVBhcmFtZXRlcnMuaWQgPSBcIkdlb21ldHJ5UGFyYW1ldGVyc1wiO1xyXG5cclxuICBsZXQgbWF0ZXJpYWxQYXJhbWV0ZXJzID0gdGFfVUkuYWRkRWxlbWVudCh0YWJzLCBcImRpdlwiLCBcIlwiLCBcIlwiKTtcclxuICBtYXRlcmlhbFBhcmFtZXRlcnMuY2xhc3NOYW1lID0gXCJNYXRlcmlhbFBhcmFtZXRlcnNcIjtcclxuICBtYXRlcmlhbFBhcmFtZXRlcnMuaWQgPSBcIk1hdGVyaWFsUGFyYW1ldGVyc1wiO1xyXG5cclxuICBsZXQgZ2VuZXJhbFBhcmFtZXRlcnMgPSB0YV9VSS5hZGRFbGVtZW50KHRhYnMsIFwiZGl2XCIsIFwiXCIsIFwiXCIpO1xyXG4gIGdlbmVyYWxQYXJhbWV0ZXJzLmNsYXNzTmFtZSA9IFwiR2VuZXJhbFBhcmFtZXRlcnNcIjtcclxuICBnZW5lcmFsUGFyYW1ldGVycy5pZCA9IFwiR2VuZXJhbFBhcmFtZXRlcnNcIjtcclxuXHJcbiAgY29uc29sZS5sb2coXCJQYXJhbWV0ZXJzVG9vbGJhciBjcmVhdGVkXCIpO1xyXG59XHJcblxyXG5leHBvcnQgeyBjcmVhdGVQYXJhbWV0ZXJzVG9vbGJhciB9O1xyXG4iLCIvKipcclxuICogQGF1dGhvciBEcmFnb24zREdyYWZmIC8gaHR0cDovL2RyYWdvbjNkZ3JhZmYucnUvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVEFfVUkgfSBmcm9tIFwiLi9UQV9VSS5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TY2VuZSB9IGZyb20gXCIuLi9UQV9TY2VuZS5qc1wiO1xyXG5pbXBvcnQgeyBNZXNoRWRpdCB9IGZyb20gXCIuLi9NZXNoRWRpdC5qc1wiO1xyXG5pbXBvcnQgeyBUQV9FbnRpdGllcyB9IGZyb20gXCIuLi9FbnRpdGllcy9UQV9FbnRpdGllcy5qc1wiO1xyXG5pbXBvcnQgeyBzd2l0Y2hFZGl0VmVydGljZXMgfSBmcm9tIFwiLi4vQWN0aW9ucy5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TdGF0ZSB9IGZyb20gXCIuLi9UQV9TdGF0ZS5qc1wiO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlTWVzaEVkaXRUb29iYXIoKSB7XHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcbiAgbGV0IHRhU2NlbmUgPSBuZXcgVEFfU2NlbmUoKTtcclxuICBsZXQgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRDb250YWluZXIgPSB0YV9VSS5jcmVhdGVDb250YWluZXIoXHJcbiAgICBcIm1lc2hFZGl0Q29udGFpbmVyXCIsXHJcbiAgICBtYWluQ29udGFpbmVyXHJcbiAgKTtcclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdEZvcm0gPSB0YV9VSS5hZGRFbGVtZW50KFxyXG4gICAgbWVzaEVkaXRDb250YWluZXIsXHJcbiAgICBcImZvcm1cIixcclxuICAgIFwiXCIsXHJcbiAgICBcIlwiXHJcbiAgKTtcclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdEZvcm0uaWQgPSBcIm1lc2hFZGl0Rm9ybVwiO1xyXG4gIHRhX1VJLmVsZW1lbnRzLm1lc2hFZGl0Rm9ybS5jbGFzc05hbWUgPSBcIm1lc2hFZGl0Rm9ybVwiO1xyXG5cclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdEJ1dHRvbiA9IHRhX1VJLmNyZWF0ZVN0YXlQcmVzc2VkQnV0dG9uKFxyXG4gICAge1xyXG4gICAgICBwYXJlbnQ6IG1lc2hFZGl0Rm9ybSxcclxuICAgICAgdGV4dDogXCJFZGl0IG1lc2hcIixcclxuICAgICAgaWQ6IFwibWVzaEVkaXRcIixcclxuICAgICAgbmFtZTogXCJtZXNoRWRpdFwiLFxyXG4gICAgICB2YWx1ZTogXCJtZXNoRWRpdFwiLFxyXG4gICAgICB0b29sdGlwOiBcIkVkaXQgbWVzaFwiLFxyXG4gICAgfSxcclxuICAgIHN3aXRjaEVkaXRNRXNoXHJcbiAgKTtcclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gIC8vIGxldCBtZXNoRWRpdDtcclxuXHJcbiAgZnVuY3Rpb24gc3dpdGNoRWRpdE1Fc2goKSB7XHJcbiAgICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCB0YV9TdGF0ZS5zdGF0ZSk7XHJcblxyXG4gICAgICBsZXQgdGFfRW50aXRpZXMgPSBuZXcgVEFfRW50aXRpZXMoKTtcclxuXHJcbiAgICAgIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5mb3JtLnJlc2V0KCk7XHJcbiAgICAgIHRhX1VJLmVsZW1lbnRzLmZpbmlzaEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIHRhX1VJLmVsZW1lbnRzLm1lc2hFZGl0RWxlbWVudHNGb3JtLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHJcbiAgICAgIC8vIHRhU2NlbmUubW9kZS5hY3Rpb24gPSAnbWVzaEVkaXQnO1xyXG4gICAgICB0YV9TdGF0ZS5hcHBNb2RlLm1lc2hFZGl0ID0gdHJ1ZTtcclxuXHJcbiAgICAgIGxldCBzZWxlY3RlZEVkaXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAnaW5wdXRbbmFtZT1cIm1lc2hFZGl0RWxlbWVudHNcIl06Y2hlY2tlZCdcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QgPSBuZXcgTWVzaEVkaXQodGFTY2VuZS5jdXJyZW50U2VsZWN0aW9uLm9iamVjdCk7XHJcblxyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1vZGUgPSBzZWxlY3RlZEVkaXRFbGVtZW50LmlkO1xyXG5cclxuICAgICAgdGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJtZXNoRWRpdEV2ZW50XCIsIHNlbGVjdGVkRWRpdEVsZW1lbnQuaWQpO1xyXG5cclxuICAgICAgdGFTY2VuZS50ZW1wU2VsZWN0YWJsZU9iamVjdHMgPSB0YVNjZW5lLnRlbXBTZWxlY3RhYmxlT2JqZWN0cy5jb25jYXQoXHJcbiAgICAgICAgdGFTY2VuZS5zZWxlY3RhYmxlT2JqZWN0c1xyXG4gICAgICApO1xyXG5cclxuICAgICAgdGFTY2VuZS5zZWxlY3RhYmxlT2JqZWN0cyA9IFtdO1xyXG5cclxuICAgICAgLy8gaWYgKCB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzTW9kZSAhPT0gJycgKSB7XHJcblxyXG4gICAgICAvLyB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLnNldE1vZGUoIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHNNb2RlICk7XHJcbiAgICAgIC8vIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuYXR0YWNoKCB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0ICk7XHJcblxyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmRldGFjaCh0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1lc2gpO1xyXG5cclxuICAgICAgLy8gbWVzaEVkaXQgPSBuZXcgTWVzaEVkaXQoIHRhU2NlbmUubWVzaEVkaXRPYmplY3QgKTtcclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoLmFkZChcclxuICAgICAgICB0YV9FbnRpdGllcy5jcmVhdGVXaXJlZnJhbWUodGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoKVxyXG4gICAgICApO1xyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0LmNyZWF0ZU1lc2hIZWxwZXJzKCk7XHJcblxyXG4gICAgICAvLyBtZXNoRWRpdC5jcmVhdGVNZXNoSGVscGVycyggKTtcclxuICAgICAgLy8gdGFTY2VuZS5tZXNoRWRpdE9iamVjdCA9IG1lc2hFZGl0Lm1lc2g7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBpZiAoIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHNNb2RlICE9PSAnJyApIHtcclxuXHJcbiAgICAgIC8vIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuc2V0TW9kZSggdGFTY2VuZS50cmFuc2Zvcm1Db250cm9sc01vZGUgKTtcclxuICAgICAgLy8gdGFTY2VuZS50cmFuc2Zvcm1Db250cm9scy5hdHRhY2goIHRhU2NlbmUubWVzaEVkaXRPYmplY3QgKTtcclxuXHJcbiAgICAgIC8vIH1cclxuICAgICAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRFbGVtZW50c0Zvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICB0YVNjZW5lLnRyYW5zZm9ybUNvbnRyb2xzLmRldGFjaCh0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1lc2gpO1xyXG5cclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5yZW1vdmVNZXNoSGVscGVycygpO1xyXG5cclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoLnJlbW92ZShcclxuICAgICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1lc2guZ2V0T2JqZWN0QnlOYW1lKFwiRmFjZUhpZ2hsaWdodFwiKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5mYWNlSGlnaGxpZ2h0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICB0YVNjZW5lLnNlbGVjdGFibGVPYmplY3RzID0gW107XHJcblxyXG4gICAgICB0YVNjZW5lLnNlbGVjdGFibGVPYmplY3RzID0gdGFTY2VuZS5zZWxlY3RhYmxlT2JqZWN0cy5jb25jYXQoXHJcbiAgICAgICAgdGFTY2VuZS50ZW1wU2VsZWN0YWJsZU9iamVjdHNcclxuICAgICAgKTtcclxuICAgICAgdGFTY2VuZS50ZW1wU2VsZWN0YWJsZU9iamVjdHMgPSBbXTtcclxuXHJcbiAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QgPSBudWxsO1xyXG5cclxuICAgICAgLy8gdGFTY2VuZS5tb2RlLmFjdGlvbiA9ICdzZWxlY3QnO1xyXG4gICAgICB0YV9TdGF0ZS5hcHBNb2RlLm1lc2hFZGl0ID0gZmFsc2U7XHJcbiAgICAgIC8vIHRhU2NlbmUubW9kZS5lZGl0RWxlbWVudHMgPSAnJztcclxuICAgICAgLy8gbWVzaEVkaXQucmVtb3ZlTWVzaEhlbHBlcnMoICk7XHJcbiAgICAgIHRhU2NlbmUubW9kZS5lbnRpdHkgPSBudWxsO1xyXG4gICAgICAvLyBtZXNoRWRpdCA9IG51bGw7XHJcbiAgICAgIHRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwibWVzaEVkaXRFdmVudFwiLCBcIlwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRhX1VJLmVsZW1lbnRzLm1lc2hFZGl0RWxlbWVudHNGb3JtID0gdGFfVUkuYWRkRWxlbWVudChcclxuICAgIG1lc2hFZGl0Q29udGFpbmVyLFxyXG4gICAgXCJmb3JtXCIsXHJcbiAgICBcIlwiLFxyXG4gICAgXCJcIlxyXG4gICk7XHJcbiAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRFbGVtZW50c0Zvcm0uaWQgPSBcIm1lc2hFZGl0RWxlbWVudHNGb3JtXCI7XHJcbiAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRFbGVtZW50c0Zvcm0uY2xhc3NOYW1lID0gXCJtZXNoRWRpdEVsZW1lbnRzRm9ybVwiO1xyXG5cclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdFZlcnRleCA9IHRhX1VJLmNyZWF0ZVN3aXRjaEJ1dHRvbihcclxuICAgIHtcclxuICAgICAgcGFyZW50OiBtZXNoRWRpdEVsZW1lbnRzRm9ybSxcclxuICAgICAgdGV4dDogXCJWZXJ0aWNlc1wiLFxyXG4gICAgICBpZDogXCJWZXJ0aWNlc1wiLFxyXG4gICAgICBuYW1lOiBcIm1lc2hFZGl0RWxlbWVudHNcIixcclxuICAgICAgdmFsdWU6IFwiVmVydGljZXNcIixcclxuICAgICAgdG9vbHRpcDogXCJWZXJ0aWNlc1wiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRhX0VudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcblxyXG4gICAgICB0YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcIm1lc2hFZGl0RXZlbnRcIiwgXCJWZXJ0aWNlc1wiKTtcclxuXHJcbiAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QubW9kZSA9IFwiVmVydGljZXNcIjtcclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5yZW1vdmVNZXNoSGVscGVycygpO1xyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1lc2gucmVtb3ZlKFxyXG4gICAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QubWVzaC5nZXRPYmplY3RCeU5hbWUoXCJGYWNlSGlnaGxpZ2h0XCIpXHJcbiAgICAgICk7XHJcbiAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QuZmFjZUhpZ2hsaWdodGluZyA9IGZhbHNlO1xyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0LmFkZFNwaGVyZXNUb1ZlcnRpY2VzKFxyXG4gICAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QubWVzaCxcclxuICAgICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0LnZlcnRpY2VzXHJcbiAgICAgICk7XHJcbiAgICAgIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuZGV0YWNoKHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMub2JqZWN0KTtcclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoLmFkZChcclxuICAgICAgICB0YV9FbnRpdGllcy5jcmVhdGVXaXJlZnJhbWUodGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gc3dpdGNoRWRpdFZlcnRpY2VzKCk7XHJcbiAgICB9XHJcbiAgKTtcclxuICB0YV9VSS5lbGVtZW50cy5tZXNoRWRpdFZlcnRleC5jaGVja2VkID0gdHJ1ZTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRFZGdlcyA9IHRhX1VJLmNyZWF0ZVN3aXRjaEJ1dHRvbihcclxuICAgIHtcclxuICAgICAgcGFyZW50OiBtZXNoRWRpdEVsZW1lbnRzRm9ybSxcclxuICAgICAgdGV4dDogXCJFZGdlc1wiLFxyXG4gICAgICBpZDogXCJFZGdlc1wiLFxyXG4gICAgICBuYW1lOiBcIm1lc2hFZGl0RWxlbWVudHNcIixcclxuICAgICAgdmFsdWU6IFwiRWRnZXNcIixcclxuICAgICAgdG9vbHRpcDogXCJFZGdlc1wiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJtZXNoRWRpdEV2ZW50XCIsIFwiRWRnZXNcIik7XHJcblxyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1vZGUgPSBcIkVkZ2VzXCI7XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgdGFfVUkuZWxlbWVudHMubWVzaEVkaXRGYWNlcyA9IHRhX1VJLmNyZWF0ZVN3aXRjaEJ1dHRvbihcclxuICAgIHtcclxuICAgICAgcGFyZW50OiBtZXNoRWRpdEVsZW1lbnRzRm9ybSxcclxuICAgICAgdGV4dDogXCJGYWNlc1wiLFxyXG4gICAgICBpZDogXCJGYWNlc1wiLFxyXG4gICAgICBuYW1lOiBcIm1lc2hFZGl0RWxlbWVudHNcIixcclxuICAgICAgdmFsdWU6IFwiRmFjZXNcIixcclxuICAgICAgdG9vbHRpcDogXCJGYWNlc1wiLFxyXG4gICAgICBpbWdMaW5rOiBcIlwiLFxyXG4gICAgfSxcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRhX0VudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcblxyXG4gICAgICB0YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcIm1lc2hFZGl0RXZlbnRcIiwgXCJGYWNlc1wiKTtcclxuXHJcbiAgICAgIHRhU2NlbmUubWVzaEVkaXRPYmplY3QubW9kZSA9IFwiRmFjZXNcIjtcclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5yZW1vdmVNZXNoSGVscGVycygpO1xyXG4gICAgICB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0LmNyZWF0ZU1lc2hIZWxwZXJzKCk7XHJcbiAgICAgIC8vIHRhU2NlbmUubWVzaEVkaXRPYmplY3QuYWRkVHJpYW5nbGVzKCB0YVNjZW5lLm1lc2hFZGl0T2JqZWN0Lm1lc2gsIHRhU2NlbmUubWVzaEVkaXRPYmplY3QucG9pbnRzICk7XHJcbiAgICAgIHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMuZGV0YWNoKHRhU2NlbmUudHJhbnNmb3JtQ29udHJvbHMub2JqZWN0KTtcclxuICAgICAgdGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoLmFkZChcclxuICAgICAgICB0YV9FbnRpdGllcy5jcmVhdGVXaXJlZnJhbWUodGFTY2VuZS5tZXNoRWRpdE9iamVjdC5tZXNoKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgc3dpdGNoRWRpdFZlcnRpY2VzKCk7XHJcbiAgICB9XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IHsgY3JlYXRlTWVzaEVkaXRUb29iYXIgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVEFfVUkuanNcIjtcclxuaW1wb3J0IHsgVEFfRW50aXRpZXMgfSBmcm9tIFwiLi4vRW50aXRpZXMvVEFfRW50aXRpZXMuanNcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vVEFfU3RhdGVcIjtcclxuXHJcbmZ1bmN0aW9uIGZpbGxHZW9tZXRyeVBhcmFtZXRlcnNUYWIoZW50aXR5KSB7XHJcbiAgbGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcbiAgbGV0IHRhX1N0YXRlID0gbmV3IFRBX1N0YXRlKCk7XHJcblxyXG4gIGxldCBkaXZHZW9tZXRyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiR2VvbWV0cnlQYXJhbWV0ZXJzXCIpO1xyXG4gIGxldCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICBlbGVtLmlkID0gXCJQYXJhbWV0ZXJzR29lbWV0cnlSb3dzXCI7XHJcbiAgZGl2R2VvbWV0cnkuYXBwZW5kQ2hpbGQoZWxlbSk7XHJcblxyXG4gIGxldCBwYXJhbWV0ZXJzQXJyYXkgPSBPYmplY3QuZW50cmllcyhlbnRpdHkuZ2VvbWV0cnkucGFyYW1ldGVycyk7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGVsZW0uYXBwZW5kQ2hpbGQocm93RGl2KTtcclxuICAgIHJvd0Rpdi5jbGFzc05hbWUgPSBcIlBhcmFtZXRlcnNSb3dcIjtcclxuXHJcbiAgICBsZXQgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKHRleHQpO1xyXG4gICAgdGV4dC5pbm5lckhUTUwgPSBwYXJhbWV0ZXJzQXJyYXlbaV1bMF07XHJcblxyXG4gICAgbGV0IGlucHV0O1xyXG4gICAgbGV0IHRhX2VudGl0aWVzID0gbmV3IFRBX0VudGl0aWVzKCk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBwYXJhbWV0ZXJzQXJyYXlbaV1bMV0gPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcclxuICAgICAgaW5wdXQuaWQgPSBwYXJhbWV0ZXJzQXJyYXlbaV1bMF07XHJcblxyXG4gICAgICBsZXQgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgICAgb3B0aW9uLnRleHQgPSBcInRydWVcIjtcclxuICAgICAgb3B0aW9uLnZhbHVlID0gXCJ0cnVlXCI7XHJcbiAgICAgIGlucHV0LmFkZChvcHRpb24pO1xyXG4gICAgICBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICBvcHRpb24udGV4dCA9IFwiZmFsc2VcIjtcclxuICAgICAgb3B0aW9uLnZhbHVlID0gXCJmYWxzZVwiO1xyXG4gICAgICBpbnB1dC5hZGQob3B0aW9uKTtcclxuXHJcbiAgICAgIGlucHV0LnZhbHVlID0gcGFyYW1ldGVyc0FycmF5W2ldWzFdO1xyXG5cclxuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImlucHV0XCIsXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgbGV0IHZhbHVlID0gSlNPTi5wYXJzZShpbnB1dC52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgdGFfZW50aXRpZXMudXBkYXRlU2VsZWN0ZWRPYmplY3QoaW5wdXQuaWQsIHZhbHVlLCBlbnRpdHkpO1xyXG4gICAgICAgICAgdGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXHJcbiAgICAgICAgICAgIFwiR2VvbWV0cnlQYXJhbWV0ZXJzLVwiICsgaW5wdXQuaWQsXHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG5cclxuICAgICAgaW5wdXQuaWQgPSBwYXJhbWV0ZXJzQXJyYXlbaV1bMF07XHJcbiAgICAgIGlucHV0Lm1pbiA9IDAuMDAxO1xyXG4gICAgICBpbnB1dC5zdGVwID0gMC4xO1xyXG5cclxuICAgICAgaW5wdXQudHlwZSA9IFwibnVtYmVyXCI7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gTWF0aC5yb3VuZChwYXJhbWV0ZXJzQXJyYXlbaV1bMV0gKiAxMDAwKSAvIDEwMDA7XHJcblxyXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwiaW5wdXRcIixcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0YV9lbnRpdGllcy51cGRhdGVTZWxlY3RlZE9iamVjdChpbnB1dC5pZCwgK2lucHV0LnZhbHVlLCBlbnRpdHkpO1xyXG4gICAgICAgICAgdGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXHJcbiAgICAgICAgICAgIFwiR2VvbWV0cnlQYXJhbWV0ZXJzLVwiICsgaW5wdXQuaWQsXHJcbiAgICAgICAgICAgIGlucHV0LnZhbHVlXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyYW1ldGVyc0FycmF5W2ldWzBdLnRvVXBwZXJDYXNlKCkuaW5jbHVkZXMoXCJTRUdNRU5UU1wiKSkge1xyXG4gICAgICBpbnB1dC5zdGVwID0gMTtcclxuICAgICAgaW5wdXQubWluID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyYW1ldGVyc0FycmF5W2ldWzBdLnRvVXBwZXJDYXNlKCkuaW5jbHVkZXMoXCJERVRBSUxcIikpIHtcclxuICAgICAgaW5wdXQuc3RlcCA9IDE7XHJcbiAgICAgIGlucHV0Lm1pbiA9IDA7XHJcbiAgICAgIGlucHV0Lm1heCA9IDc7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jaGVjayBtYXggdmFsdWVzIHRvIGNsb3NlIG9iamVjdCEhIVxyXG5cclxuICAgIC8vdGhldGFMZW5ndGggOiAyKk1hdGguUElcclxuICAgIC8vIGlmICggcGFyYW1ldGVyc0FycmF5W2ldWzBdLmluY2x1ZGVzKCAndGhldGFMZW5ndGgnICkpIHtcclxuXHJcbiAgICAvLyBcdGlucHV0Lm1heCA9IDIqTWF0aC5QSTtcclxuXHJcbiAgICAvLyB9XHJcblxyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKGlucHV0KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IGZpbGxHZW9tZXRyeVBhcmFtZXRlcnNUYWIgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVEFfVUkuanNcIjtcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVlL2J1aWxkL3RocmVlLm1vZHVsZS5qc1wiO1xyXG5cclxuZnVuY3Rpb24gZmlsbE1hdGVyaWFsUGFyYW1ldGVyc1RhYihlbnRpdHkpIHtcclxuICBsZXQgdGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuXHJcbiAgbGV0IGRpdk1hdGVyaWFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJNYXRlcmlhbFBhcmFtZXRlcnNcIik7XHJcbiAgbGV0IGVsZW1NYXRlcmlhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZWxlbU1hdGVyaWFsLmlkID0gXCJQYXJhbWV0ZXJzTWF0ZXJpYWxSb3dzXCI7XHJcbiAgZGl2TWF0ZXJpYWwuYXBwZW5kQ2hpbGQoZWxlbU1hdGVyaWFsKTtcclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIGxldCBtYXRlcmlhbFR5cGVzID0gW1xyXG4gICAgXCJMaW5lQmFzaWNNYXRlcmlhbFwiLFxyXG4gICAgXCJMaW5lRGFzaGVkTWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaEJhc2ljTWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaERlcHRoTWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaE5vcm1hbE1hdGVyaWFsXCIsXHJcbiAgICBcIk1lc2hMYW1iZXJ0TWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaE1hdGNhcE1hdGVyaWFsXCIsXHJcbiAgICBcIk1lc2hQaG9uZ01hdGVyaWFsXCIsXHJcbiAgICBcIk1lc2hUb29uTWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaFN0YW5kYXJkTWF0ZXJpYWxcIixcclxuICAgIFwiTWVzaFBoeXNpY2FsTWF0ZXJpYWxcIixcclxuICAgIFwiUmF3U2hhZGVyTWF0ZXJpYWxcIixcclxuICAgIFwiU2hhZGVyTWF0ZXJpYWxcIixcclxuICAgIFwiU2hhZG93TWF0ZXJpYWxcIixcclxuICAgIFwiU3ByaXRlTWF0ZXJpYWxcIixcclxuICBdO1xyXG5cclxuICBsZXQgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICByb3dEaXYuY2xhc3NOYW1lID0gXCJQYXJhbWV0ZXJzUm93XCI7XHJcblxyXG4gIGxldCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgcm93RGl2LmFwcGVuZENoaWxkKHRleHQpO1xyXG4gIHRleHQuaW5uZXJIVE1MID0gXCJUeXBlXCI7XHJcblxyXG4gIGxldCBpbnB1dE1hdGVyaWFsVHlwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgaW5wdXRNYXRlcmlhbFR5cGUuaWQgPSBcIk1hdGVyaWFsVHlwZVwiO1xyXG4gIGlucHV0TWF0ZXJpYWxUeXBlLmNsYXNzTmFtZSA9IFwic2VsZWN0TWF0ZXJpYWxcIjtcclxuXHJcbiAgZWxlbU1hdGVyaWFsLmFwcGVuZENoaWxkKHJvd0Rpdik7XHJcblxyXG4gIGZvciAobGV0IG4gPSAwOyBuIDwgbWF0ZXJpYWxUeXBlcy5sZW5ndGg7IG4rKykge1xyXG4gICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICBvcHRpb24udGV4dCA9IG1hdGVyaWFsVHlwZXNbbl07XHJcbiAgICBvcHRpb24udmFsdWUgPSBtYXRlcmlhbFR5cGVzW25dO1xyXG4gICAgaW5wdXRNYXRlcmlhbFR5cGUuYWRkKG9wdGlvbik7XHJcbiAgfVxyXG5cclxuICBpbnB1dE1hdGVyaWFsVHlwZS52YWx1ZSA9IGVudGl0eS5tYXRlcmlhbC50eXBlO1xyXG4gIGlucHV0TWF0ZXJpYWxUeXBlLmRpc2FibGVkID0gXCJ0cnVlXCI7XHJcblxyXG4gIHJvd0Rpdi5hcHBlbmRDaGlsZChpbnB1dE1hdGVyaWFsVHlwZSk7XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICByb3dEaXYgPSB0YV9VSS5hZGRQYXJhbWV0ZXJzUm93KFwiQ29sb3JcIiwgXCJjb2xvclwiLCBlbnRpdHkubWF0ZXJpYWwuY29sb3IpO1xyXG4gIGVsZW1NYXRlcmlhbC5hcHBlbmRDaGlsZChyb3dEaXYpO1xyXG4gIGxldCBpbnB1dE1hdGVyaWFsQ29sb3IgPSB0YV9VSS5nZXRJbnB1dChyb3dEaXYpO1xyXG4gIGlucHV0TWF0ZXJpYWxDb2xvci5jbGFzc05hbWUgPSBcImlucHV0Q29sb3JcIjtcclxuICBpbnB1dE1hdGVyaWFsQ29sb3IudmFsdWUgPSBcIiNcIiArIGVudGl0eS5tYXRlcmlhbC5jb2xvci5nZXRIZXhTdHJpbmcoKTtcclxuXHJcbiAgaW5wdXRNYXRlcmlhbENvbG9yLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICBcImlucHV0XCIsXHJcblxyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICBlbnRpdHkubWF0ZXJpYWwuY29sb3IgPSBuZXcgQ29sb3IodGhpcy52YWx1ZSk7XHJcblxyXG4gICAgICBsZXQgY29sb3IgPSBlbnRpdHkubWF0ZXJpYWwuY29sb3I7XHJcblxyXG4gICAgICB1cGRhdGVDb2xvckNvbXBvbmVudHNJbnB1dHNTbGlkZXIoY29sb3IpO1xyXG4gICAgICB1cGRhdGVDb2xvckNvbXBvbmVudHNJbnB1dHMoY29sb3IpO1xyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICB0YV9VSS5hZGRFbGVtZW50KGVsZW1NYXRlcmlhbCwgXCJwXCIsIFwiQ29sb3IgY29tcG9uZW50c1wiLCBcIlwiKTtcclxuXHJcbiAgbGV0IHBhcmFtZXRlcnNNYXRlcmlhbCA9IE9iamVjdC5lbnRyaWVzKGVudGl0eS5tYXRlcmlhbC5jb2xvcik7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVyc01hdGVyaWFsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgcm93RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGVsZW1NYXRlcmlhbC5hcHBlbmRDaGlsZChyb3dEaXYpO1xyXG4gICAgcm93RGl2LmNsYXNzTmFtZSA9IFwiUGFyYW1ldGVyc1Jvd1JhbmdlXCI7XHJcblxyXG4gICAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgIHJvd0Rpdi5hcHBlbmRDaGlsZCh0ZXh0KTtcclxuICAgIHN3aXRjaCAocGFyYW1ldGVyc01hdGVyaWFsW2ldWzBdKSB7XHJcbiAgICAgIGNhc2UgXCJyXCI6XHJcbiAgICAgICAgdGV4dC5pbm5lckhUTUwgPSBcIlJlZFwiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiZ1wiOlxyXG4gICAgICAgIHRleHQuaW5uZXJIVE1MID0gXCJHcmVlblwiO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiYlwiOlxyXG4gICAgICAgIHRleHQuaW5uZXJIVE1MID0gXCJCbHVlXCI7XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpbnB1dE51bWJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgIGlucHV0TnVtYmVyLmlkID0gcGFyYW1ldGVyc01hdGVyaWFsW2ldWzBdICsgXCJfbnVtYmVyXCI7XHJcbiAgICBpbnB1dE51bWJlci50eXBlID0gXCJudW1iZXJcIjtcclxuICAgIGlucHV0TnVtYmVyLnZhbHVlID0gcGFyYW1ldGVyc01hdGVyaWFsW2ldWzFdO1xyXG4gICAgaW5wdXROdW1iZXIuc3RlcCA9IDAuMDE7XHJcbiAgICBpbnB1dE51bWJlci5taW4gPSAwO1xyXG4gICAgaW5wdXROdW1iZXIubWF4ID0gMTtcclxuICAgIGlucHV0TnVtYmVyLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgIFwiaW5wdXRcIixcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGxldCBuYW1lT2ZQYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzTWF0ZXJpYWxbaV1bMF07XHJcblxyXG4gICAgICAgIGVudGl0eS5tYXRlcmlhbC5jb2xvcltuYW1lT2ZQYXJhbWV0ZXJdID0gaW5wdXROdW1iZXIudmFsdWU7XHJcblxyXG4gICAgICAgIGxldCBjb2xvciA9IGVudGl0eS5tYXRlcmlhbC5jb2xvcjtcclxuXHJcbiAgICAgICAgdXBkYXRlQ29sb3JJbnB1dChjb2xvcik7XHJcbiAgICAgICAgdXBkYXRlQ29sb3JDb21wb25lbnRzSW5wdXRzU2xpZGVyKGNvbG9yKTtcclxuICAgICAgfSxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcblxyXG4gICAgcm93RGl2LmFwcGVuZENoaWxkKGlucHV0TnVtYmVyKTtcclxuXHJcbiAgICBsZXQgaW5wdXRTbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICBpbnB1dFNsaWRlci5pZCA9IHBhcmFtZXRlcnNNYXRlcmlhbFtpXVswXTtcclxuICAgIGlucHV0U2xpZGVyLnR5cGUgPSBcInJhbmdlXCI7XHJcbiAgICBpbnB1dFNsaWRlci5jbGFzc05hbWUgPSBcInNsaWRlclwiO1xyXG5cclxuICAgIHJvd0Rpdi5hcHBlbmRDaGlsZChpbnB1dFNsaWRlcik7XHJcblxyXG4gICAgaW5wdXRTbGlkZXIudmFsdWUgPSBwYXJhbWV0ZXJzTWF0ZXJpYWxbaV1bMV07XHJcbiAgICBpbnB1dFNsaWRlci5zdGVwID0gMC4wMDE7XHJcbiAgICBpbnB1dFNsaWRlci5taW4gPSAwO1xyXG4gICAgaW5wdXRTbGlkZXIubWF4ID0gMTtcclxuXHJcbiAgICBpbnB1dFNsaWRlci5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICBcImlucHV0XCIsXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBsZXQgbmFtZU9mUGFyYW1ldGVyID0gcGFyYW1ldGVyc01hdGVyaWFsW2ldWzBdO1xyXG5cclxuICAgICAgICBlbnRpdHkubWF0ZXJpYWwuY29sb3JbbmFtZU9mUGFyYW1ldGVyXSA9IGlucHV0U2xpZGVyLnZhbHVlO1xyXG5cclxuICAgICAgICBsZXQgY29sb3IgPSBlbnRpdHkubWF0ZXJpYWwuY29sb3I7XHJcblxyXG4gICAgICAgIHVwZGF0ZUNvbG9ySW5wdXQoY29sb3IpO1xyXG4gICAgICAgIHVwZGF0ZUNvbG9yQ29tcG9uZW50c0lucHV0cyhlbnRpdHkubWF0ZXJpYWwuY29sb3IpO1xyXG4gICAgICB9LFxyXG4gICAgICBmYWxzZVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZUNvbG9ySW5wdXQoY29sb3IpIHtcclxuICAgIGxldCBjb2xvcklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJDb2xvclwiKTtcclxuICAgIGNvbG9ySW5wdXQudmFsdWUgPSBcIiNcIiArIGNvbG9yLmdldEhleFN0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlQ29sb3JDb21wb25lbnRzSW5wdXRzU2xpZGVyKGNvbG9yKSB7XHJcbiAgICBsZXQgY29tcG9uZW50UmVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyXCIpO1xyXG4gICAgY29tcG9uZW50UmVkLnZhbHVlID0gY29sb3IucjtcclxuICAgIGxldCBjb21wb25lbnRHcmVlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ1wiKTtcclxuICAgIGNvbXBvbmVudEdyZWVuLnZhbHVlID0gY29sb3IuZztcclxuICAgIGxldCBjb21wb25lbnRCbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJiXCIpO1xyXG4gICAgY29tcG9uZW50Qmx1ZS52YWx1ZSA9IGNvbG9yLmI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB1cGRhdGVDb2xvckNvbXBvbmVudHNJbnB1dHMoY29sb3IpIHtcclxuICAgIGxldCBjb21wb25lbnRSZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJfbnVtYmVyXCIpO1xyXG4gICAgY29tcG9uZW50UmVkLnZhbHVlID0gTWF0aC5yb3VuZChjb2xvci5yICogMTAwMCkgLyAxMDAwO1xyXG4gICAgbGV0IGNvbXBvbmVudEdyZWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnX251bWJlclwiKTtcclxuICAgIGNvbXBvbmVudEdyZWVuLnZhbHVlID0gTWF0aC5yb3VuZChjb2xvci5nICogMTAwMCkgLyAxMDAwO1xyXG4gICAgbGV0IGNvbXBvbmVudEJsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJfbnVtYmVyXCIpO1xyXG4gICAgY29tcG9uZW50Qmx1ZS52YWx1ZSA9IE1hdGgucm91bmQoY29sb3IuYiAqIDEwMDApIC8gMTAwMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IGZpbGxNYXRlcmlhbFBhcmFtZXRlcnNUYWIgfTtcclxuIiwiLyoqXHJcbiAqIEBhdXRob3IgRHJhZ29uM0RHcmFmZiAvIGh0dHA6Ly9kcmFnb24zZGdyYWZmLnJ1L1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVEFfVUkuanNcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vVEFfU3RhdGVcIjtcclxuXHJcbmZ1bmN0aW9uIGZpbGxHZW5lcmFsUGFyYW1ldGVyc1RhYihlbnRpdHkpIHtcclxuICBsZXQgdGFfVUkgPSBuZXcgVEFfVUkoKTtcclxuICBsZXQgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuXHJcbiAgbGV0IGRpdkdlbmVyYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkdlbmVyYWxQYXJhbWV0ZXJzXCIpO1xyXG4gIGxldCBlbGVtR2VuZXJhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZWxlbUdlbmVyYWwuaWQgPSBcIlBhcmFtZXRlcnNHZW5lcmFsUm93c1wiO1xyXG4gIGRpdkdlbmVyYWwuYXBwZW5kQ2hpbGQoZWxlbUdlbmVyYWwpO1xyXG5cclxuICBsZXQgcm93VVVJRCA9IHRhX1VJLmFkZFBhcmFtZXRlcnNSb3coXCJJRFwiLCBcInN0cmluZ1wiLCBlbnRpdHkuaWQpO1xyXG4gIGVsZW1HZW5lcmFsLmFwcGVuZENoaWxkKHJvd1VVSUQpO1xyXG5cclxuICAvLyB0aGlzLmFkZEVsZW1lbnQoIGVsZW1HZW5lcmFsLCAncCcsICdOYW1lJywgJycpO1xyXG4gIGxldCByb3dEaXYgPSB0YV9VSS5hZGRQYXJhbWV0ZXJzUm93KFwiTmFtZVwiLCBcInN0cmluZ1wiLCBlbnRpdHkubmFtZSk7XHJcbiAgZWxlbUdlbmVyYWwuYXBwZW5kQ2hpbGQocm93RGl2KTtcclxuICBsZXQgaW5wdXQgPSB0YV9VSS5nZXRJbnB1dChyb3dEaXYpO1xyXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICBcImlucHV0XCIsXHJcbiAgICAoKSA9PiB7XHJcbiAgICAgIGVudGl0eS5uYW1lID0gaW5wdXQudmFsdWU7XHJcbiAgICB9LFxyXG4gICAgZmFsc2VcclxuICApO1xyXG5cclxuICBsZXQgaW5wdXRJZCA9IHRhX1VJLmFkZFBhcmFtZXRlcnNSb3coXCJpZFwiLCBcInN0cmluZ1wiLCBlbnRpdHkuaWQpO1xyXG4gIGlucHV0SWQuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICB0YV9VSS5hZGRFbGVtZW50KGVsZW1HZW5lcmFsLCBcInBcIiwgXCJQb3NpdGlvblwiLCBcIlwiKTtcclxuXHJcbiAgbGV0IHBhcmFtZXRlcnNHZW5lcmFsID0gT2JqZWN0LmVudHJpZXMoZW50aXR5LnBvc2l0aW9uKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzR2VuZXJhbC5sZW5ndGg7IGkrKykge1xyXG4gICAgbGV0IG5hbWVPZlBhcmFtZXRlciA9IHBhcmFtZXRlcnNHZW5lcmFsW2ldWzBdO1xyXG4gICAgbGV0IHZhbHVlT2ZQYXJhbWV0ZXIgPSBNYXRoLnJvdW5kKHBhcmFtZXRlcnNHZW5lcmFsW2ldWzFdICogMTAwMCkgLyAxMDAwO1xyXG5cclxuICAgIGxldCByb3dEaXYgPSB0YV9VSS5hZGRQYXJhbWV0ZXJzUm93KFxyXG4gICAgICBcInBvc2l0aW9uX1wiICsgbmFtZU9mUGFyYW1ldGVyLFxyXG4gICAgICBcIm51bWJlclwiLFxyXG4gICAgICB2YWx1ZU9mUGFyYW1ldGVyXHJcbiAgICApO1xyXG4gICAgZWxlbUdlbmVyYWwuYXBwZW5kQ2hpbGQocm93RGl2KTtcclxuICAgIGxldCBpbnB1dCA9IHRhX1VJLmdldElucHV0KHJvd0Rpdik7XHJcbiAgICBpbnB1dC5zdGVwID0gMC4xO1xyXG5cclxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgIFwiaW5wdXRcIixcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGVudGl0eS5wb3NpdGlvbltuYW1lT2ZQYXJhbWV0ZXJdID0gaW5wdXQudmFsdWU7XHJcbiAgICAgICAgdGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJHZW5lcmFsUGFyYW1ldGVycy1cIiArIGlucHV0LmlkLCBpbnB1dC52YWx1ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZhbHNlXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgdGFfVUkuYWRkRWxlbWVudChlbGVtR2VuZXJhbCwgXCJwXCIsIFwiUm90YXRpb25cIiwgXCJcIik7XHJcblxyXG4gIHBhcmFtZXRlcnNHZW5lcmFsID0gT2JqZWN0LmVudHJpZXMoe1xyXG4gICAgeDogZW50aXR5LnJvdGF0aW9uLngsXHJcbiAgICB5OiBlbnRpdHkucm90YXRpb24ueSxcclxuICAgIHo6IGVudGl0eS5yb3RhdGlvbi56LFxyXG4gIH0pO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnNHZW5lcmFsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgbmFtZU9mUGFyYW1ldGVyID0gcGFyYW1ldGVyc0dlbmVyYWxbaV1bMF07XHJcbiAgICBsZXQgdmFsdWVPZlBhcmFtZXRlciA9IE1hdGgucm91bmQocGFyYW1ldGVyc0dlbmVyYWxbaV1bMV0gKiAxMDAwKSAvIDEwMDA7XHJcblxyXG4gICAgbGV0IHJvd0RpdiA9IHRhX1VJLmFkZFBhcmFtZXRlcnNSb3coXHJcbiAgICAgIFwicm90YXRpb25fXCIgKyBuYW1lT2ZQYXJhbWV0ZXIsXHJcbiAgICAgIFwibnVtYmVyXCIsXHJcbiAgICAgIHZhbHVlT2ZQYXJhbWV0ZXJcclxuICAgICk7XHJcbiAgICBlbGVtR2VuZXJhbC5hcHBlbmRDaGlsZChyb3dEaXYpO1xyXG4gICAgbGV0IGlucHV0ID0gdGFfVUkuZ2V0SW5wdXQocm93RGl2KTtcclxuXHJcbiAgICBpbnB1dC5zdGVwID0gMC4xO1xyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgXCJpbnB1dFwiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgZW50aXR5LnJvdGF0aW9uW25hbWVPZlBhcmFtZXRlcl0gPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICB0YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcIkdlbmVyYWxQYXJhbWV0ZXJzLVwiICsgaW5wdXQuaWQsIGlucHV0LnZhbHVlKTtcclxuICAgICAgfSxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB0YV9VSS5hZGRFbGVtZW50KGVsZW1HZW5lcmFsLCBcInBcIiwgXCJTY2FsZVwiLCBcIlwiKTtcclxuXHJcbiAgcGFyYW1ldGVyc0dlbmVyYWwgPSBPYmplY3QuZW50cmllcyhlbnRpdHkuc2NhbGUpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnNHZW5lcmFsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgbmFtZU9mUGFyYW1ldGVyID0gcGFyYW1ldGVyc0dlbmVyYWxbaV1bMF0ucmVwbGFjZShcIl9cIiwgXCJcIik7XHJcbiAgICBsZXQgdmFsdWVPZlBhcmFtZXRlciA9IE1hdGgucm91bmQocGFyYW1ldGVyc0dlbmVyYWxbaV1bMV0gKiAxMDAwKSAvIDEwMDA7XHJcblxyXG4gICAgbGV0IHJvd0RpdiA9IHRhX1VJLmFkZFBhcmFtZXRlcnNSb3coXHJcbiAgICAgIFwic2NhbGVfXCIgKyBuYW1lT2ZQYXJhbWV0ZXIsXHJcbiAgICAgIFwibnVtYmVyXCIsXHJcbiAgICAgIHZhbHVlT2ZQYXJhbWV0ZXJcclxuICAgICk7XHJcbiAgICBlbGVtR2VuZXJhbC5hcHBlbmRDaGlsZChyb3dEaXYpO1xyXG4gICAgbGV0IGlucHV0ID0gdGFfVUkuZ2V0SW5wdXQocm93RGl2KTtcclxuXHJcbiAgICBpbnB1dC5zdGVwID0gMC4xO1xyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgXCJpbnB1dFwiLFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgZW50aXR5LnNjYWxlW25hbWVPZlBhcmFtZXRlcl0gPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICB0YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcIkdlbmVyYWxQYXJhbWV0ZXJzLVwiICsgaW5wdXQuaWQsIGlucHV0LnZhbHVlKTtcclxuICAgICAgfSxcclxuICAgICAgZmFsc2VcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IGZpbGxHZW5lcmFsUGFyYW1ldGVyc1RhYiB9O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vYWRkUGFuZWxfQnV0dG9ucy5jc3NcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuZnVuY3Rpb24gQnV0dG9uKHsgbmFtZSwgc2V0UGFuZWwgfSkge1xyXG4gIGZ1bmN0aW9uIGJ0bkNsaWNrKCkge1xyXG4gICAgc2V0UGFuZWwobmFtZSk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImFkZFBhbmVsX0J1dHRvbnNcIiBvbkNsaWNrPXtidG5DbGlja30+XHJcbiAgICAgIHtuYW1lfVxyXG4gICAgPC9idXR0b24+XHJcbiAgKTtcclxufVxyXG5cclxuQnV0dG9uLnByb3BUeXBlcyA9IHtcclxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxyXG4gIHNldFBhbmVsOiBQcm9wVHlwZXMuZnVuYyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9NYXRjYXAuY3NzXCI7XHJcbmltcG9ydCB7IE1hdGNhcENvbnRleHQgfSBmcm9tIFwiLi4vLi4vLi4vUmVhY3RQYW5lbFwiO1xyXG5pbXBvcnQgeyBUQV9TdGF0ZSB9IGZyb20gXCIuLi8uLi8uLi8uLi9UQV9TdGF0ZVwiO1xyXG5cclxubGV0IGhlYWRlcnMgPSB7XHJcbiAgTWF0Q2FwczogXCJTZWxlY3QgTWF0Y2FwXCIsXHJcbiAgVGV4dHVyZXM6IFwiU2VsZWN0IFRleHR1cmVcIixcclxuICBNb2RlbHM6IFwiU2VsZWN0IE1vZGVsXCIsXHJcbn07XHJcblxyXG5mdW5jdGlvbiBNYXRjYXAocHJvcHMpIHtcclxuICBjb25zdCBbZHJhZ01vZGVFbmFibGVkLCBzZXREcmFnTW9kZV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW25ld1gsIHNldE5ld1hdID0gdXNlU3RhdGUoXCIwcHhcIik7XHJcbiAgY29uc3QgW25ld1ksIHNldE5ld1ldID0gdXNlU3RhdGUoXCIzMHB4XCIpO1xyXG4gIGNvbnN0IFtjYXJkc0Rpdiwgc2V0Q2FyZHNEaXZdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW2NsaWNrUG9pbnQsIHNldENsaWNrUG9pbnRdID0gdXNlU3RhdGUoeyB4OiB1bmRlZmluZWQsIHk6IHVuZGVmaW5lZCB9KTtcclxuICBjb25zdCBzZWxlY3RlZENhcmQgPSB1c2VDb250ZXh0KE1hdGNhcENvbnRleHQpO1xyXG4gIGxldCB0YV9TdGF0ZSA9IG5ldyBUQV9TdGF0ZSgpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgaWYgKGRyYWdNb2RlRW5hYmxlZCkge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xlYW51cCgpIHtcclxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgfTtcclxuICB9LCBbZHJhZ01vZGVFbmFibGVkXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBzZXRDYXJkc0Rpdihwcm9wcy5jYXJkc0Rpdik7XHJcbiAgfSwgW10pO1xyXG5cclxuICBmdW5jdGlvbiBjbGlja1VzZUJ1dHRvbigpIHtcclxuICAgIHRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwibWF0Y2FwQ2hhbmdlZFwiLCBzZWxlY3RlZENhcmQuc3JjKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNoYW5nZUNoZWNrYm94KGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiY2hhbmdlQ2hlY2tib3hcIiwgZS50YXJnZXQuY2hlY2tlZCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRQYW5lbEludmlzaWJsZSgpIHtcclxuICAgIHByb3BzLnNldFBhbmVsKFwiXCIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW5hYmxlRHJhZ01vZGUoKSB7XHJcbiAgICBpZiAoZXZlbnQuYnV0dG9ucyAhPT0gMSkgcmV0dXJuO1xyXG4gICAgbGV0IGJsb2NrU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xyXG4gICAgbGV0IGJsb2NrT2Zmc2V0ID0ge1xyXG4gICAgICB4OiBibG9ja1N0eWxlLmxlZnQucmVwbGFjZShcInB4XCIsIFwiXCIpLFxyXG4gICAgICB5OiBibG9ja1N0eWxlLnRvcC5yZXBsYWNlKFwicHhcIiwgXCJcIiksXHJcbiAgICB9O1xyXG4gICAgbGV0IHBvaW50ID0ge1xyXG4gICAgICB4OiBldmVudC5vZmZzZXRYLFxyXG4gICAgICB5OiBldmVudC5vZmZzZXRZLFxyXG4gICAgICBibG9ja09mZnNldDogYmxvY2tPZmZzZXQsXHJcbiAgICB9O1xyXG4gICAgc2V0Q2xpY2tQb2ludChwb2ludCk7XHJcbiAgICBzZXREcmFnTW9kZSh0cnVlKTtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCkge1xyXG4gICAgaWYgKFxyXG4gICAgICBldmVudC5wYWdlWCA8IDIwIHx8XHJcbiAgICAgIGV2ZW50LnBhZ2VYID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gMjAgfHxcclxuICAgICAgZXZlbnQucGFnZVkgPCAyMCB8fFxyXG4gICAgICBldmVudC5wYWdlWSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSAyMFxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChldmVudC5idXR0b25zICE9PSAxKSB7XHJcbiAgICAgIHNldERyYWdNb2RlKGZhbHNlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbW92ZUF0KGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtb3ZlQXQocGFnZVgsIHBhZ2VZKSB7XHJcbiAgICBzZXROZXdYKHBhZ2VYIC0gY2xpY2tQb2ludC54IC0gY2xpY2tQb2ludC5ibG9ja09mZnNldC54ICsgXCJweFwiKTtcclxuICAgIHNldE5ld1kocGFnZVkgLSBjbGlja1BvaW50LnkgLSBjbGlja1BvaW50LmJsb2NrT2Zmc2V0LnkgKyBcInB4XCIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGlzYWJsZURyYWdNb2RlKCkge1xyXG4gICAgc2V0RHJhZ01vZGUoZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgY2xhc3NOYW1lPVwiTWF0Q2FwXCJcclxuICAgICAgb25Nb3VzZVVwPXtkaXNhYmxlRHJhZ01vZGV9XHJcbiAgICAgIHN0eWxlPXt7IGxlZnQ6IG5ld1gsIHRvcDogbmV3WSB9fVxyXG4gICAgPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyYWdMaW5lXCIgb25Nb3VzZURvd249e2VuYWJsZURyYWdNb2RlfT5cclxuICAgICAgICB7aGVhZGVyc1twcm9wcy5wYW5lbF19XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhZGRQYW5lbF9DbG9zZUJ1dHRvblwiIG9uQ2xpY2s9e3NldFBhbmVsSW52aXNpYmxlfT5cclxuICAgICAgICAgIFhcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiSGVhZE1hdENhYlwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWF0Q2FwUHJldmlld1wiPlxyXG4gICAgICAgICAge3Byb3BzLnBhbmVsID09PSBcIk1hdENhcHNcIiAmJiBzZWxlY3RlZENhcmQuaW1nID8gKFxyXG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImNhcmRJbWdTZWxlY3RlZFwiIHNyYz17c2VsZWN0ZWRDYXJkLmltZ30+PC9pbWc+XHJcbiAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiSGVhZE1hdENhYkJ1dHRvbnNcIj5cclxuICAgICAgICAgIDxsYWJlbD5cclxuICAgICAgICAgICAgUHJldmlld1xyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNoZWNrYm94XCIgb25DaGFuZ2U9e2NoYW5nZUNoZWNrYm94fSAvPlxyXG4gICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYWRkUGFuZWxfQnV0dG9uc1wiIG9uQ2xpY2s9e2NsaWNrVXNlQnV0dG9ufT5cclxuICAgICAgICAgICAgVXNlXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIHtwcm9wcy5wYW5lbCA9PT0gXCJNYXRDYXBzXCIgJiYgY2FyZHNEaXZ9XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYXRjYXA7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vQWRkUGFuZWwuY3NzXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4vQnV0dG9uXCI7XHJcbmltcG9ydCBNYXRjYXAgZnJvbSBcIi4vTWF0ZXJpYWxzVGFiL01hdGNhcC9NYXRjYXBcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5mdW5jdGlvbiBBZGRQYW5lbChwcm9wcykge1xyXG4gIGNvbnN0IGJ1dHRvbnMgPSBbXCJNYXRDYXBzXCIsIFwiVGV4dHVyZXNcIiwgXCJNb2RlbHNcIl07XHJcblxyXG4gIGNvbnN0IFtwYW5lbCwgc2V0UGFuZWxdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW2NhcmRzRGl2LCBzZXRDYXJkc0Rpdl0gPSB1c2VTdGF0ZShudWxsKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldENhcmRzRGl2KHByb3BzLmNhcmRzRGl2KTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIk1haW5cIj5cclxuICAgICAge2J1dHRvbnMubWFwKChidG4pID0+IChcclxuICAgICAgICA8QnV0dG9uIG5hbWU9e2J0bn0ga2V5PXtidG59IHNldFBhbmVsPXtzZXRQYW5lbH0gLz5cclxuICAgICAgKSl9XHJcbiAgICAgIHtwYW5lbCAmJiAoXHJcbiAgICAgICAgPE1hdGNhcCBzZXRQYW5lbD17c2V0UGFuZWx9IHBhbmVsPXtwYW5lbH0gY2FyZHNEaXY9e2NhcmRzRGl2fSAvPlxyXG4gICAgICApfVxyXG4gICAgICB7Lyoge3BhbmVsID09PSAnVGV4dHVyZXMnICYmIDxUZXh0dXJlc1RhYiBzZXRQYW5lbCA9IHsgc2V0UGFuZWwgfS8+fSAqL31cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbkFkZFBhbmVsLnByb3BUeXBlcyA9IHtcclxuICBjYXJkc0RpdjogUHJvcFR5cGVzLmVsZW1lbnQsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBZGRQYW5lbDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9NYXRjYXAuY3NzXCI7XHJcblxyXG5mdW5jdGlvbiBNYXRjYWJDYXJkKHByb3BzKSB7XHJcbiAgY29uc3Qgc2VsZWN0SW1hZ2UgPSAoZSkgPT4ge1xyXG4gICAgcHJvcHMuc2V0SW1hZ2UocHJvcHMudmFsdWUpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8bGFiZWwgY2xhc3NOYW1lPVwiTWF0Y2FiQ2FyZFwiIG9uQ2xpY2s9e3NlbGVjdEltYWdlfT5cclxuICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIHZhbHVlPXtwcm9wcy52YWx1ZS5uYW1lfSBuYW1lPVwiTWF0Y2FiQ2FyZFwiPjwvaW5wdXQ+XHJcbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY2FyZEltZ1wiIHNyYz17cHJvcHMudmFsdWUuaW1nfT48L2ltZz5cclxuICAgIDwvbGFiZWw+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWF0Y2FiQ2FyZDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9EZWJ1Z2dpbmdQYW5lbC5jc3NcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vVEFfU3RhdGVcIjtcclxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiLi4vRXZlbnRFbWl0dGVyXCI7XHJcblxyXG5sZXQgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5sZXQgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlYnVnZ2luZ1BhbmVsKHByb3BzKSB7XHJcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbYXBwU3RhdGVzLCBzZXRBcHBTdGF0ZXNdID0gdXNlU3RhdGUoXCJcIik7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBhcHBTdGF0ZXNBcnIgPSBbXTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHRhX1N0YXRlLnN0YXRlKSB7XHJcbiAgICAgIGlmICh0YV9TdGF0ZS5zdGF0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgYXBwU3RhdGVzQXJyLnB1c2goXHJcbiAgICAgICAgICA8cCBrZXk9e2tleX0+XHJcbiAgICAgICAgICAgIHtrZXl9IC0tIHtTdHJpbmcodGFfU3RhdGUuc3RhdGVba2V5XSl9XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0QXBwU3RhdGVzKGFwcFN0YXRlc0Fycik7XHJcbiAgfSwgW3N0YXRlXSk7XHJcblxyXG4gIC8vICB1c2VFZmZlY3QoICgpPT4ge2NvbnNvbGUubG9nKCdyZW5kZXJlZCcpfSlcclxuXHJcbiAgZXZlbnRFbWl0dGVyLm9uRXZlbnQoXCJhcHBTdGF0ZUNoYW5nZWRcIiwgdXBkYXRlKTtcclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlKG1vZGUpIHtcclxuICAgIHNldFN0YXRlKG1vZGUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiRGVidWdnaW5nUGFuZWxcIj5cclxuICAgICAgPGgzPkRlYnVnIHBhbmVsIDwvaDM+XHJcbiAgICAgIDxwIGNsYXNzTmFtZT1cImFwcFN0YXRlQ2hhbmdlZFwiPmFwcFN0YXRlQ2hhbmdlZDo8L3A+XHJcbiAgICAgIDxwPntzdGF0ZX08L3A+XHJcbiAgICAgIDxociAvPlxyXG5cclxuICAgICAge2FwcFN0YXRlc31cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEFkZFBhbmVsIGZyb20gXCIuL0FkZFBhbmVsL0FkZFBhbmVsXCI7XHJcbmltcG9ydCBNYXRjYWJDYXJkIGZyb20gXCIuL0FkZFBhbmVsL01hdGVyaWFsc1RhYi9NYXRjYXAvTWF0Y2FiQ2FyZC5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TdGF0ZSB9IGZyb20gXCIuLi9UQV9TdGF0ZVwiO1xyXG5pbXBvcnQgRGVidWdnaW5nUGFuZWwgZnJvbSBcIi4vRGVidWdnaW5nUGFuZWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBNYXRjYXBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVhY3RQYW5lbChwcm9wcykge1xyXG4gIGNvbnN0IG1hdGNhYkNhcmRzID0gcHJvcHMubWF0Y2FwSW1hZ2VzLmNhcmRzXzY0Lm1hcCgoY2FyZCkgPT4gKFxyXG4gICAgPE1hdGNhYkNhcmQga2V5PXtjYXJkLm5hbWUudG9TdHJpbmcoKX0gdmFsdWU9e2NhcmR9IHNldEltYWdlPXtzZXRJbWFnZX0gLz5cclxuICApKTtcclxuXHJcbiAgY29uc3QgY2FyZHNEaXYgPSA8ZGl2IGNsYXNzTmFtZT1cIk1hdENhcEltYWdlc1wiPnttYXRjYWJDYXJkc308L2Rpdj47XHJcblxyXG4gIGxldCB0YV9TdGF0ZSA9IG5ldyBUQV9TdGF0ZSgpO1xyXG4gIGNvbnN0IFtzZWxlY3RlZENhcmQsIHNldFNlbGVjdGVkQ2FyZF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwibWF0Y2FwQ2hhbmdlZFwiLCBzZWxlY3RlZENhcmQuc3JjKTtcclxuICB9LCBbc2VsZWN0ZWRDYXJkXSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNldEltYWdlKGltZykge1xyXG4gICAgc2V0U2VsZWN0ZWRDYXJkKGltZyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE1hdGNhcENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3NlbGVjdGVkQ2FyZH0+XHJcbiAgICAgIDxBZGRQYW5lbCBjYXJkc0Rpdj17Y2FyZHNEaXZ9PjwvQWRkUGFuZWw+XHJcbiAgICAgIDxEZWJ1Z2dpbmdQYW5lbD48L0RlYnVnZ2luZ1BhbmVsPlxyXG4gICAgPC9NYXRjYXBDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU4Mjk1YTY2Nzk4M2I4YmFlMTQwM2YwNDEwNmFmMzM1LmpwZ1wiOyIsImNsYXNzIEh0dHAge1xyXG4gIGNvbnN0cnVjdG9yKHRhX1N0YXRlKSB7XHJcbiAgICB0aGlzLnRhX1N0YXRlID0gdGFfU3RhdGU7XHJcbiAgfVxyXG5cclxuICBhc3luYyBjaGVja0F1dGgoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIHRydWUpO1xyXG5cclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9hcGkvY2hlY2svY2hlY2tBdXRoXCIsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgbGV0IGFuc3dlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBhbnN3ZXIuYXV0aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcInVzZXJOYW1lXCIsIGFuc3dlci51c2VyTmFtZSk7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcInVzZXJJZFwiLCBhbnN3ZXIudXNlcklkKTtcclxuICAgICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiYXV0aFwiLCBhbnN3ZXIuYXV0aCk7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcImlzTG9hZGluZ1wiLCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIGFuc3dlcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwidXNlck5hbWVcIiwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwidXNlcklkXCIsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcImF1dGhcIiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJpc0xvYWRpbmdcIiwgZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB1c2VyTmFtZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgdXNlcklkOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICBhdXRoOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHJlZ2lzdGVyKGRhdGEpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJpc0xvYWRpbmdcIiwgdHJ1ZSk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCIvYXBpL2F1dGgvcmVnaXN0ZXJcIiwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMSkge1xyXG4gICAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJpc0xvYWRpbmdcIiwgZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiAyMDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGFuc3dlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIGZhbHNlKTtcclxuICAgICAgICByZXR1cm4gYW5zd2VyLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJpc0xvYWRpbmdcIiwgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9naW4oZGF0YSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcImlzTG9hZGluZ1wiLCB0cnVlKTtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9hcGkvYXV0aC9sb2dpblwiLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgIH0pO1xyXG4gICAgICBsZXQgYW5zd2VyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICBpZiAoYW5zd2VyLnVzZXJOYW1lKSB7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcInVzZXJOYW1lXCIsIGFuc3dlci51c2VyTmFtZSk7XHJcbiAgICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcInVzZXJJZFwiLCBhbnN3ZXIudXNlcklkKTtcclxuICAgICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiYXV0aFwiLCB0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIGZhbHNlKTtcclxuICAgICAgcmV0dXJuIGFuc3dlcjtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJpc0xvYWRpbmdcIiwgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9nb3V0KCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcImlzTG9hZGluZ1wiLCB0cnVlKTtcclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXCIvYXBpL2F1dGgvbG9nb3V0XCIsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcInVzZXJOYW1lXCIsIHVuZGVmaW5lZCk7XHJcbiAgICAgIHRoaXMudGFfU3RhdGUuY2hhbmdlQXBwU3RhdGUoXCJ1c2VySWRcIiwgdW5kZWZpbmVkKTtcclxuICAgICAgdGhpcy50YV9TdGF0ZS5jaGFuZ2VBcHBTdGF0ZShcImF1dGhcIiwgZmFsc2UpO1xyXG4gICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIGZhbHNlKTtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnRhX1N0YXRlLmNoYW5nZUFwcFN0YXRlKFwiaXNMb2FkaW5nXCIsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEh0dHAgfTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL1JlZ2lzdHJhdGlvbi5jc3NcIjtcclxuaW1wb3J0IGxvZ28gZnJvbSBcIi4uLy4uL19SZXNvdXJjZXMvTG9nby9sb2dvNS5qcGdcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vLi4vVEFfU3RhdGUuanNcIjtcclxuaW1wb3J0IHsgSHR0cCB9IGZyb20gXCIuLi8uLi9IdHRwLmpzXCI7XHJcblxyXG5sZXQgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuY29uc3QgaHR0cCA9IG5ldyBIdHRwKHRhX1N0YXRlKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlZ2lzdHJhdGlvbih7IGhpc3RvcnksIGhpZGUgfSkge1xyXG4gIGNvbnN0IHBhc3N3b3JkUmVmID0gdXNlUmVmKCk7XHJcbiAgY29uc3QgY29uZmlybVBhc3N3b3JkUmVmID0gdXNlUmVmKCk7XHJcblxyXG4gIGNvbnN0IFtmb3JtLCBzZXRGb3JtXSA9IHVzZVN0YXRlKHtcclxuICAgIG5hbWU6IFwiXCIsXHJcbiAgICBlbWFpbDogXCJcIixcclxuICAgIHBhc3N3b3JkOiBcIlwiLFxyXG4gICAgY29uZmlybVBhc3N3b3JkOiBcIlwiLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBbZXJyb3JNZXNzYWdlLCBzZXRFcnJvck1lc3NhZ2VdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW3N1Y2Nlc3NSZWdpc3Rlciwgc2V0U3VjY2Vzc1JlZ2lzdGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGhpZGUoZmFsc2UpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgY2xvc2VPbkVzY2FwZSk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNsb3NlT25Fc2NhcGUpO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3QgY2xvc2VPbkVzY2FwZSA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgb25DbG9zZUZvcm0oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBvbkNsb3NlRm9ybSA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lID09PSBcInJlZ2lzdHJhdGlvbi1kaXZcIikge1xyXG4gICAgICBoaWRlKHRydWUpO1xyXG4gICAgICBoaXN0b3J5LnB1c2goXCIvXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgc2V0RXJyb3JNZXNzYWdlKFwiXCIpO1xyXG4gICAgc2V0Rm9ybSh7IC4uLmZvcm0sIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25TdWJtaXQgPSBhc3luYyAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKGZvcm0ucGFzc3dvcmQgIT09IGZvcm0uY29uZmlybVBhc3N3b3JkKSB7XHJcbiAgICAgIGNvbmZpcm1QYXNzd29yZFJlZi5jdXJyZW50LnZhbHVlID0gXCJcIjtcclxuICAgICAgc2V0RXJyb3JNZXNzYWdlKFwiUGxlYXNlIGNvbmZpcm0geW91ciBwYXNzd29yZFwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYW5zd2VyID0gYXdhaXQgaHR0cC5yZWdpc3Rlcih7IC4uLmZvcm0gfSk7XHJcbiAgICBwYXNzd29yZFJlZi5jdXJyZW50LnZhbHVlID0gXCJcIjtcclxuICAgIGNvbmZpcm1QYXNzd29yZFJlZi5jdXJyZW50LnZhbHVlID0gXCJcIjtcclxuICAgIGlmIChhbnN3ZXIgPT09IDIwMSkge1xyXG4gICAgICBzZXRTdWNjZXNzUmVnaXN0ZXIodHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZXRFcnJvck1lc3NhZ2UoYW5zd2VyKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBvbkxvZ2luID0gKCkgPT4ge1xyXG4gICAgaGlzdG9yeS5wdXNoKFwiL2xvZ2luXCIpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1kaXZcIiBvbkNsaWNrPXtvbkNsb3NlRm9ybX0+XHJcbiAgICAgIHtzdWNjZXNzUmVnaXN0ZXIgPyAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1jb25ncmF0XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmdyYXQtdGV4dFwiPlxyXG4gICAgICAgICAgICBDb25ncmF0dWxhdGlvbnMhIDxicj48L2JyPlxyXG4gICAgICAgICAgICBZb3UgaGF2ZSByZWdpc3RlcmVkIG9uIFRlcnRpdXNBeGlzIGVkaXRvciFcclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1yZWdpc3RlclwiIG9uQ2xpY2s9e29uTG9naW59PlxyXG4gICAgICAgICAgICBPa1xyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICkgOiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPGltZyBzcmM9e2xvZ299IGFsdD1cIkxvZ29cIiAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1mb3JtLXRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgPGgxPlJlZ2lzdHJhdGlvbjwvaDE+XHJcbiAgICAgICAgICAgICAge2Vycm9yTWVzc2FnZSAmJiAoXHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1lcnJvclwiPkVycm9yOiB7ZXJyb3JNZXNzYWdlfTwvcD5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tY2xvc2VcIiBvbkNsaWNrPXtvbkNsb3NlRm9ybX0+XHJcbiAgICAgICAgICAgICAgeFxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwicmVnaXN0cmF0aW9uLWZvcm0taW5wdXRzXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTmFtZVwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbklucHV0Q2hhbmdlfVxyXG4gICAgICAgICAgICA+PC9pbnB1dD5cclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbWFpbFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZX1cclxuICAgICAgICAgICAgPjwvaW5wdXQ+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHJlZj17cGFzc3dvcmRSZWZ9XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZCBub3QgbGVzcyA2IHN5bWJvbHNcIlxyXG4gICAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZX1cclxuICAgICAgICAgICAgPjwvaW5wdXQ+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHJlZj17Y29uZmlybVBhc3N3b3JkUmVmfVxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29uZmlybSBwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cImNvbmZpcm1QYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZX1cclxuICAgICAgICAgICAgPjwvaW5wdXQ+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1mb3JtLWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1JSGF2ZUxvZ2luXCJcclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uTG9naW59XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgSSBoYXZlIGxvZ2luXHJcbiAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVnaXN0cmF0aW9uLWZvcm0tcmVnaXN0ZXJcIlxyXG4gICAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblN1Ym1pdH1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICBSZWdpc3RlclxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL0xvZ2luLmNzc1wiO1xyXG5pbXBvcnQgbG9nbyBmcm9tIFwiLi4vLi4vX1Jlc291cmNlcy9Mb2dvL2xvZ281LmpwZ1wiO1xyXG5pbXBvcnQgeyBUQV9TdGF0ZSB9IGZyb20gXCIuLi8uLi9UQV9TdGF0ZS5qc1wiO1xyXG5pbXBvcnQgeyBIdHRwIH0gZnJvbSBcIi4uLy4uL0h0dHAuanNcIjtcclxuXHJcbmxldCB0YV9TdGF0ZSA9IG5ldyBUQV9TdGF0ZSgpO1xyXG5jb25zdCBodHRwID0gbmV3IEh0dHAodGFfU3RhdGUpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW4oeyBoaXN0b3J5LCBoaWRlIH0pIHtcclxuICBjb25zdCBwYXNzd29yZFJlZiA9IHVzZVJlZigpO1xyXG5cclxuICBjb25zdCBbZm9ybSwgc2V0Rm9ybV0gPSB1c2VTdGF0ZSh7XHJcbiAgICBlbWFpbDogXCJcIixcclxuICAgIHBhc3N3b3JkOiBcIlwiLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBbZXJyb3JNZXNzYWdlLCBzZXRFcnJvck1lc3NhZ2VdID0gdXNlU3RhdGUoXCJcIik7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBoaWRlKGZhbHNlKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGNsb3NlT25Fc2NhcGUpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjbG9zZU9uRXNjYXBlKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSAoZSkgPT4ge1xyXG4gICAgc2V0Rm9ybSh7IC4uLmZvcm0sIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY2xvc2VPbkVzY2FwZSA9IChlKSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgb25DbG9zZUZvcm0oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBoaWRlRm9ybSA9ICgpID0+IHtcclxuICAgIGhpZGUodHJ1ZSk7XHJcbiAgICBoaXN0b3J5LnB1c2goXCIvXCIpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uQ2xvc2VGb3JtID0gKGUpID0+IHtcclxuICAgIGUudGFyZ2V0LmNsYXNzTmFtZSA9PT0gXCJMb2dpbi1kaXZcIiAmJiBoaWRlRm9ybSgpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uUmVnaXN0ZXIgPSAoZSkgPT4ge1xyXG4gICAgaGlzdG9yeS5wdXNoKFwiL3JlZ2lzdHJhdGlvblwiKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBvbkxvZ2luID0gYXN5bmMgKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNldEVycm9yTWVzc2FnZShcIlwiKTtcclxuXHJcbiAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBodHRwLmxvZ2luKHsgLi4uZm9ybSB9KTtcclxuICAgIHBhc3N3b3JkUmVmLmN1cnJlbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgaWYgKGFuc3dlciAmJiBhbnN3ZXIudXNlck5hbWUpIHtcclxuICAgICAgaGlkZUZvcm0oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldEVycm9yTWVzc2FnZShcIk5vIGNvbm5lY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiTG9naW4tZGl2XCIgb25DbGljaz17b25DbG9zZUZvcm19PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1mb3JtXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1oZWFkZXJcIj5cclxuICAgICAgICAgIDxpbWcgc3JjPXtsb2dvfSBhbHQ9XCJMb2dvXCIgLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVnaXN0cmF0aW9uLWZvcm0tdGl0bGVcIj5cclxuICAgICAgICAgICAgPGgxPkxvZ2luPC9oMT5cclxuICAgICAgICAgICAge2Vycm9yTWVzc2FnZSAmJiAoXHJcbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVnaXN0cmF0aW9uLWZvcm0tZXJyb3JcIj5FcnJvcjoge2Vycm9yTWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicmVnaXN0cmF0aW9uLWNsb3NlXCIgb25DbGljaz17b25DbG9zZUZvcm19PlxyXG4gICAgICAgICAgICB4XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1pbnB1dHNcIj5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcclxuICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcclxuICAgICAgICAgICAgb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9XHJcbiAgICAgICAgICA+PC9pbnB1dD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICByZWY9e3Bhc3N3b3JkUmVmfVxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCJcclxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2V9XHJcbiAgICAgICAgICA+PC9pbnB1dD5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1mb3JtLWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1mb3JtLUlIYXZlTG9naW5cIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUmVnaXN0ZXJ9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICBJIGhhdmUgbm8gbG9naW5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWdpc3RyYXRpb24tZm9ybS1yZWdpc3RlclwiXHJcbiAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17b25Mb2dpbn1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIExvZ2luXHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU3dpdGNoLCBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBcIi4vQXV0aGVudGljYXRpb24uY3NzXCI7XHJcbmltcG9ydCBSZWdpc3RyYXRpb24gZnJvbSBcIi4vUmVnaXN0cmF0aW9uXCI7XHJcbmltcG9ydCBMb2dpbiBmcm9tIFwiLi9Mb2dpblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXV0aGVudGljYXRpb24oeyBoaXN0b3J5IH0pIHtcclxuICBjb25zdCBbaGlkZGVuLCBzZXRIaWRkZW5dID0gdXNlU3RhdGUodHJ1ZSk7XHJcbiAgY29uc3QgaGlkZSA9ICh2YWwpID0+IHtcclxuICAgIHNldEhpZGRlbih2YWwpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzTmFtZT1cInJlZ2lzdHJhdGlvbi1tYWluTWVudVwiXHJcbiAgICAgIHN0eWxlPXtoaWRkZW4gPyB7IGhlaWdodDogXCIwcHhcIiB9IDogeyBoZWlnaHQ6IFwiMTAwJVwiIH19XHJcbiAgICA+XHJcbiAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgPFJvdXRlXHJcbiAgICAgICAgICBwYXRoPVwiL3JlZ2lzdHJhdGlvblwiXHJcbiAgICAgICAgICByZW5kZXI9eyhoaXN0b3J5KSA9PiA8UmVnaXN0cmF0aW9uIGhpZGU9e2hpZGV9IHsuLi5oaXN0b3J5fSAvPn1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgcGF0aD1cIi9Mb2dpblwiXHJcbiAgICAgICAgICByZW5kZXI9eyhoaXN0b3J5KSA9PiA8TG9naW4gaGlkZT17aGlkZX0gey4uLmhpc3Rvcnl9IC8+fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvU3dpdGNoPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9Vc2VyTWVudS5jc3NcIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vLi4vVEFfU3RhdGUuanNcIjtcclxuaW1wb3J0IHsgSHR0cCB9IGZyb20gXCIuLi8uLi9IdHRwLmpzXCI7XHJcblxyXG5sZXQgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuY29uc3QgaHR0cCA9IG5ldyBIdHRwKHRhX1N0YXRlKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFVzZXJNZW51KHsgdXNlck5hbWUsIHNob3dVc2VybWVudSB9KSB7XHJcbiAgY29uc3QgZm9ybVJlZiA9IHVzZVJlZihudWxsKTtcclxuXHJcbiAgZnVuY3Rpb24gb25Nb3VzZWxlYXZlKCkge1xyXG4gICAgc2hvd1VzZXJtZW51KCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBodHRwLmxvZ291dCgpO1xyXG4gICAgc2hvd1VzZXJtZW51KCk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGZvcm1SZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbk1vdXNlbGVhdmUpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGZvcm1SZWYuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBvbk1vdXNlbGVhdmUpO1xyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IHJlZj17Zm9ybVJlZn0gY2xhc3NOYW1lPVwiVXNlck1lbnUtZGl2XCI+XHJcbiAgICAgIDx1bD5cclxuICAgICAgICB7dXNlck5hbWV9XHJcbiAgICAgICAgPGxpPlByb2ZpbGU8L2xpPlxyXG4gICAgICAgIDxsaT5TY2VuZXM8L2xpPlxyXG4gICAgICAgIDxsaT5TZXR0aW5nczwvbGk+XHJcbiAgICAgICAgX19fX19fX19fX19cclxuICAgICAgICA8bGk+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJVc2VyTWVudS1sb2dvdXRcIiBvbkNsaWNrPXtsb2dvdXR9PlxyXG4gICAgICAgICAgICBMb2dvdXRcclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICA8L3VsPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgVEFfU3RhdGUgfSBmcm9tIFwiLi4vLi4vVEFfU3RhdGUuanNcIjtcclxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiLi4vLi4vRXZlbnRFbWl0dGVyLmpzXCI7XHJcbmltcG9ydCBVc2VyTWVudSBmcm9tIFwiLi4vUGVyc29uYWwvVXNlck1lbnUuanNcIjtcclxuXHJcbmxldCB0YV9TdGF0ZSA9IG5ldyBUQV9TdGF0ZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXV0aEluTWFpbk1lbnUoKSB7XHJcbiAgY29uc3QgW2lzQXV0aCwgc2V0aXNBdXRoXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbdXNlck1lbnVWaXNpYmxlLCBzZXRVc2VyTWVudVZpc2libGVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgbGV0IGV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGV2ZW50cy5vbkV2ZW50KFwiYXV0aFwiLCAoKSA9PiB7XHJcbiAgICAgIHNldGlzQXV0aCh0YV9TdGF0ZS5zdGF0ZS5hdXRoKTtcclxuICAgIH0pO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgY29uc3Qgc2hvd1VzZXJtZW51ID0gKCkgPT4ge1xyXG4gICAgc2V0VXNlck1lbnVWaXNpYmxlKCF1c2VyTWVudVZpc2libGUpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHVubG9nZ2VkID0gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPE5hdkxpbmsgdG89XCIvTG9naW5cIj5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhdXRoZW50aWNhdGlvbi1saW5rXCI+TG9naW48L3NwYW4+XHJcbiAgICAgIDwvTmF2TGluaz5cclxuICAgICAgPE5hdkxpbmsgdG89XCIvcmVnaXN0cmF0aW9uXCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYXV0aGVudGljYXRpb24tbGlua1wiPlJlZ2lzdHJhdGlvbjwvc3Bhbj5cclxuICAgICAgPC9OYXZMaW5rPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxuXHJcbiAgbGV0IGxvZ2dlZEluID0gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhdXRoZW50aWNhdGlvbi13ZWxjb21lXCI+XHJcbiAgICAgIFdlbGNvbWUsXHJcbiAgICAgIDxzcGFuIG9uQ2xpY2s9e3Nob3dVc2VybWVudX0gY2xhc3NOYW1lPVwiYXV0aGVudGljYXRpb24tbGlua1wiPlxyXG4gICAgICAgIHt0YV9TdGF0ZS5zdGF0ZS51c2VyTmFtZX1cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aC1pbi1tYWluTWVudVwiPlxyXG4gICAgICB7aXNBdXRoID8gbG9nZ2VkSW4gOiB1bmxvZ2dlZH1cclxuICAgICAge2lzQXV0aCAmJiB1c2VyTWVudVZpc2libGUgJiYgKFxyXG4gICAgICAgIDxVc2VyTWVudVxyXG4gICAgICAgICAgdXNlck5hbWU9e3RhX1N0YXRlLnN0YXRlLnVzZXJOYW1lfVxyXG4gICAgICAgICAgc2hvd1VzZXJtZW51PXtzaG93VXNlcm1lbnV9XHJcbiAgICAgICAgPjwvVXNlck1lbnU+XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICAgIC8vXHJcbiAgKTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRjYXBJbWFnZXMge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbWFnZXNfNjQgPSB0aGlzLmltcG9ydEFsbChcclxuICAgICAgcmVxdWlyZS5jb250ZXh0KFwiLi4vX1Jlc291cmNlcy9NYXRjYWJzL1Rlc3QvXCIsIGZhbHNlLCAvXFwuKHBuZykkLylcclxuICAgICk7XHJcbiAgICB0aGlzLmNhcmRzXzY0ID0gdGhpcy5jcmVhdGVDYXJkcyh0aGlzLmltYWdlc182NCk7XHJcbiAgfVxyXG5cclxuICBpbXBvcnRBbGwocikge1xyXG4gICAgbGV0IGltYWdlcyA9IHt9O1xyXG4gICAgci5rZXlzKDApLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICBpbWFnZXNbaXRlbS5yZXBsYWNlKFwiLi9cIiwgXCJcIildID0gcihpdGVtKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGltYWdlcztcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNhcmRzKGltYWdlcykge1xyXG4gICAgbGV0IGNhcmRzID0gW107XHJcbiAgICBsZXQgaW1hZ2VzTW9kdWxlcyA9IE9iamVjdC5lbnRyaWVzKGltYWdlcyk7XHJcbiAgICBpbWFnZXNNb2R1bGVzLm1hcCgoaW1nLCBpbmRleCkgPT4ge1xyXG4gICAgICBjYXJkcy5wdXNoKHtcclxuICAgICAgICBuYW1lOiBcIkNhcmQgXCIgKyBpbmRleCxcclxuICAgICAgICBpbWc6IGltZ1sxXS5kZWZhdWx0LFxyXG4gICAgICAgIHNyYzogaW1nWzBdLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNhcmRzO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgXCIuL2xvYWRlci5jc3NcIjtcclxuXHJcbmNvbnN0IGxvYWRlciA9IHtcclxuICBzaG93KCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjcmVhdGVMb2FkZXIoKSk7XHJcbiAgfSxcclxuICBoaWRlKCkge1xyXG4gICAgbGV0IGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGVyXCIpO1xyXG4gICAgaWYgKGxvYWRlcikgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsb2FkZXIpO1xyXG4gIH0sXHJcbn07XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMb2FkZXIoKSB7XHJcbiAgbGV0IGxvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgbG9hZGVyLmNsYXNzTmFtZSA9IFwibG9hZGVyXCI7XHJcbiAgbG9hZGVyLmlkID0gXCJsb2FkZXJcIjtcclxuXHJcbiAgbGV0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XHJcbiAgdGV4dC5jbGFzc05hbWUgPSBcImxvYWRlci10ZXh0XCI7XHJcbiAgdGV4dC5pbm5lckhUTUwgPSBcIkxvYWRpbmcuLi5cIjtcclxuICBsb2FkZXIuYXBwZW5kQ2hpbGQodGV4dCk7XHJcblxyXG4gIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImNvbnRhaW5lclwiO1xyXG4gIGNvbnRhaW5lci5pZCA9IFwiY29udGFpbmVyXCI7XHJcblxyXG4gIGxldCB1bm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIHVuby5jbGFzc05hbWUgPSBcImRhc2ggdW5vXCI7XHJcbiAgdW5vLmlkID0gXCJ1bm9cIjtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodW5vKTtcclxuXHJcbiAgbGV0IGRvcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgZG9zLmNsYXNzTmFtZSA9IFwiZGFzaCBkb3NcIjtcclxuICBkb3MuaWQgPSBcImRvc1wiO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkb3MpO1xyXG5cclxuICBsZXQgdHJlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgdHJlcy5jbGFzc05hbWUgPSBcImRhc2ggdHJlc1wiO1xyXG4gIHRyZXMuaWQgPSBcInRyZXNcIjtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodHJlcyk7XHJcblxyXG4gIGxldCBjdWF0cm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gIGN1YXRyby5jbGFzc05hbWUgPSBcImRhc2ggY3VhdHJvXCI7XHJcbiAgY3VhdHJvLmlkID0gXCJjdWF0cm9cIjtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3VhdHJvKTtcclxuXHJcbiAgbG9hZGVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblxyXG4gIHJldHVybiBsb2FkZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB7IGxvYWRlciB9O1xyXG4iLCIvKipcclxuICogQGF1dGhvciBEcmFnb24zREdyYWZmIC8gaHR0cDovL2RyYWdvbjNkZ3JhZmYucnUvXHJcbiAqL1xyXG5cclxuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcclxuXHJcbmltcG9ydCB7IFRBX1VJIH0gZnJvbSBcIi4vVUkvVEFfVUkuanNcIjtcclxuaW1wb3J0IHsgVEFfU2NlbmUgfSBmcm9tIFwiLi9UQV9TY2VuZS5qc1wiO1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgUmVhY3RQYW5lbCBmcm9tIFwiLi9VSS9SZWFjdFBhbmVsXCI7XHJcbmltcG9ydCBBdXRoZW50aWNhdGlvbiBmcm9tIFwiLi9VSS9BdXRoZW50aWNhdGlvbi9BdXRoZW50aWNhdGlvblwiO1xyXG5pbXBvcnQgQXV0aEluTWFpbk1lbnUgZnJvbSBcIi4vVUkvQXV0aGVudGljYXRpb24vQXV0aEluTWFpbk1lbnVcIjtcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xyXG5pbXBvcnQgTWF0Y2FwSW1hZ2VzIGZyb20gXCIuL1VJL01hdGNhcEltYWdlc1wiO1xyXG5pbXBvcnQgeyBIdHRwIH0gZnJvbSBcIi4vSHR0cC5qc1wiO1xyXG5pbXBvcnQgeyBUQV9TdGF0ZSB9IGZyb20gXCIuL1RBX1N0YXRlXCI7XHJcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSBcIi4vRXZlbnRFbWl0dGVyLmpzXCI7XHJcbmltcG9ydCB7IGxvYWRlciB9IGZyb20gXCIuL2xvYWRlci5qc1wiO1xyXG5cclxuY29uc3QgdGFfU3RhdGUgPSBuZXcgVEFfU3RhdGUoKTtcclxuY29uc3QgaHR0cCA9IG5ldyBIdHRwKHRhX1N0YXRlKTtcclxubGV0IG1hdGNhcEltYWdlcyA9IG5ldyBNYXRjYXBJbWFnZXMoKTtcclxuY29uc3QgaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCk7XHJcblxyXG5sZXQgZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5ldmVudHMub25FdmVudChcImlzTG9hZGluZ1wiLCAoKSA9PiB7XHJcbiAgaWYgKHRhX1N0YXRlLnN0YXRlW1wiaXNMb2FkaW5nXCJdKSB7XHJcbiAgICBsb2FkZXIuc2hvdygpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsb2FkZXIuaGlkZSgpO1xyXG4gIH1cclxufSk7XHJcblxyXG5jb25zdCBjaGVja0F1dGggPSBhc3luYyAoKSA9PiB7XHJcbiAgYXdhaXQgaHR0cC5jaGVja0F1dGgoKTtcclxufTtcclxuY2hlY2tBdXRoKCk7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgPFJlYWN0LlN0cmljdE1vZGU+XHJcbiAgICA8Um91dGVyIGhpc3Rvcnk9e2hpc3Rvcnl9PlxyXG4gICAgICA8QXV0aGVudGljYXRpb24+PC9BdXRoZW50aWNhdGlvbj5cclxuICAgICAgPEF1dGhJbk1haW5NZW51PjwvQXV0aEluTWFpbk1lbnU+XHJcbiAgICA8L1JvdXRlcj5cclxuICAgIDxSZWFjdFBhbmVsIG1hdGNhcEltYWdlcz17bWF0Y2FwSW1hZ2VzfT48L1JlYWN0UGFuZWw+XHJcbiAgPC9SZWFjdC5TdHJpY3RNb2RlPixcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIk1hdENhYlwiKVxyXG4pO1xyXG5cclxubGV0IHRhX1VJID0gbmV3IFRBX1VJKCk7XHJcbmxldCB0YVNjZW5lID0gbmV3IFRBX1NjZW5lKHRhX1VJKTtcclxuXHJcbnRhX1VJLmluaXQodGFTY2VuZSk7XHJcblxyXG50YVNjZW5lLmNyZWF0ZVNjZW5lKCk7XHJcblxyXG5pZiAodGFfVUkuZmlsbE1haW5Ub29sYmFyKHRhU2NlbmUpKSB7XHJcbiAgY29uc29sZS5sb2coXCJUZXJ0aXVzQXhpcyBsb2FkZWRcIik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==